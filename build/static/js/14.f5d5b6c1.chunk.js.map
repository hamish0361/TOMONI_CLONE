{"version":3,"sources":["app/components/TopHeader.js","app/modules/Dashboard/components/InfoCard.js","app/modules/Dashboard/components/LogCard.js","app/modules/Dashboard/components/OrderCard.js","app/modules/Dashboard/components/PurchaseCard.js","app/modules/Dashboard/components/TrackingCard.js","app/modules/Dashboard/components/TransactionCard.js","app/modules/Dashboard/pages/index.js"],"names":["TopHeader","title","children","Divider","InfoCard","user","className","style","overflow","src","IMAGES","PROFILE","alt","id","role","email","LogCard","logs","intl","handleDate","date","dateTimeArr","split","day","time","formatMessage","length","height","map","item","index","key","created_at","minWidth","creator_id","content","includes","obj","JSON","parse","value","product_id","wrote","director_id","supplier_id","discount_tax_percent","addtional","status","renderContent","EmptyData","OrderCard","orders","marginBottom","overflowX","width","maxHeight","overflowY","order","backgroundColor","formatNumber","cost","balance","name","type","updated_at","PurchaseCard","purchases","purchase","supplier","address","TrackingCard","trackings","checked","code","TransactionCard","transactions","transaction","create_at","amount","description","prepared_by_id","injectIntl","connect","dispatch","useDispatch","useSelector","auth","accounting","notification","list","isLoadingTransaction","isLoading","orderList","isLoadingOrders","purchaseList","isLoadingPurchases","log","isLoadingLogs","tracking","trackingList","isLoadingTrackings","shallowEqual","paramsTransaction","orderBy","sortedBy","paramsOrder","paramsPurchase","appends","with","paramsLog","paramsTracking","React","useEffect","resetPurchase","resetOrder","fetchTransactions","fetchOrder","fetchPurchase","fetchLogs","fetchTracking","loading","Loading"],"mappings":"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","file":"static/js/14.f5d5b6c1.chunk.js","sourcesContent":["import { Divider } from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {\n    Card,\n    CardHeader,\n    CardHeaderToolbar\n} from '_metronic/_partials/controls';\n\nTopHeader.propTypes = {\n    title: PropTypes.string,\n    children: PropTypes.any\n};\n\nfunction TopHeader({ title = '', children }) {\n    return (\n        <Card>\n            <Divider />\n            <CardHeader title={title}>\n                <CardHeaderToolbar>{children}</CardHeaderToolbar>\n            </CardHeader>\n        </Card>\n    );\n}\n\nexport default TopHeader;\n","import { IMAGES } from 'constant/Images';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Card } from '_metronic/_partials/controls';\n\nInfoCard.propTypes = {\n    user: PropTypes.object\n};\n\nfunction InfoCard({ user }) {\n    return (\n        <Card className=\"h-100\">\n            <div className=\"p-8\">\n                <div\n                    className=\"d-flex mb-6 dashboard-info__profile\"\n                    style={{ overflow: 'hidden' }}\n                >\n                    <img\n                        src={IMAGES.PROFILE}\n                        alt=\"profile\"\n                        className=\"rounded-circle\"\n                    />\n                    <div className=\"ml-4\">\n                        <div className=\"font-size-h6 font-weight-bolder opacity-80\">\n                            {user.id}\n                        </div>\n                        <div>{user.role}</div>\n                        <div>{user.email}</div>\n                    </div>\n                </div>\n                {/* begin item */}\n                <div className=\"dashboard-info__vnd mb-4 p-5\">\n                    <div className=\"font-size-h6 font-weight-bolder\">\n                        <FormattedMessage id=\"DASHBOARD.CURRENCY.VND\" />\n                    </div>\n                    <div className=\"font-size-h6\">120.000.000</div>\n                </div>\n                {/* end item */}\n                {/* begin item */}\n                <div className=\"dashboard-info__jpy mb-4 p-5\">\n                    <div className=\"font-size-h6 font-weight-bolder\">\n                        <FormattedMessage id=\"DASHBOARD.CURRENCY.JPY\" />\n                    </div>\n                    <div className=\"font-size-h6\">120.000.000</div>\n                </div>\n                {/* end item */}\n                {/* begin item */}\n                <div className=\"dashboard-info__usd p-5\">\n                    <div className=\"font-size-h6 font-weight-bolder\">\n                        <FormattedMessage id=\"DASHBOARD.CURRENCY.USD\" />\n                    </div>\n                    <div className=\"font-size-h6\">120.000.000</div>\n                </div>\n\n                {/* end item */}\n            </div>\n        </Card>\n    );\n}\n\nexport default InfoCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardHeader } from '_metronic/_partials/controls';\nimport EmptyData from 'app/components/EmptyData';\n\nLogCard.propTypes = {\n    logs: PropTypes.array\n};\n\nfunction LogCard({ logs, intl }) {\n    const handleDate = date => {\n        if (!date) return;\n\n        const dateTimeArr = date.split(' ');\n        const dateArr = dateTimeArr[0]?.split('-');\n        const dateObj = {\n            day: dateArr[0],\n            time: dateTimeArr[1]\n        };\n        return dateObj;\n    };\n\n    const renderContent = content => {\n        if (!content.includes('{')) return content;\n        let obj = JSON.parse(content, function(key, value) {\n            return value;\n        });\n        return (\n            obj.product_id ||\n            obj.wrote ||\n            obj.director_id ||\n            obj.supplier_id ||\n            obj.discount_tax_percent ||\n            obj.addtional ||\n            obj.status\n        );\n    };\n\n    return (\n        <Card className=\"h-100\">\n            <CardHeader\n                title={intl.formatMessage({ id: 'DASHBOARD.LOG.TITLE' })}\n            />\n            {logs?.length > 0 ? (\n                <div className=\"dashboard-log mx-8 h-100 mt-8\">\n                    <div\n                        className=\"border\"\n                        style={{ height: '100%', overflow: 'auto' }}\n                    >\n                        {logs.map((item, index) => (\n                            <div\n                                className=\"d-flex justify-content-between p-4 border-bottom\"\n                                key={index}\n                            >\n                                <div className=\"d-flex w-100\">\n                                    <div className=\"dashboard-log__date p-2 mr-2 font-size-h6\">\n                                        {handleDate(item.created_at).day}\n                                    </div>\n                                    <div className=\"w-100\">\n                                        <div\n                                            className=\"d-flex justify-content-between w-100\"\n                                            style={{ minWidth: '100px' }}\n                                        >\n                                            <div className=\"font-size-h6 font-weight-bolder opacity-80\">\n                                                {item.creator_id}\n                                            </div>\n                                            <div className=\"dashboard-log__time\">\n                                                {\n                                                    handleDate(item.created_at)\n                                                        .time\n                                                }\n                                            </div>\n                                        </div>\n                                        <div>{renderContent(item.content)}</div>\n                                    </div>\n                                </div>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            ) : (\n                <EmptyData />\n            )}\n        </Card>\n    );\n}\n\nexport default LogCard;\n","import EmptyData from 'app/components/EmptyData';\nimport formatNumber from 'helper/formatNumber';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Card, CardHeader } from '_metronic/_partials/controls';\n\nOrderCard.propTypes = {\n    orders: PropTypes.array\n};\n\nfunction OrderCard({ orders, intl }) {\n    return (\n        <>\n            <Card style={{ marginBottom: '0px' }} className=\"h-100\">\n                <CardHeader\n                    title={intl.formatMessage({ id: 'DASHBOARD.ORDER.TITLE' })}\n                />\n                <div\n                    className=\"border m-8\"\n                    style={{ height: '69%', overflowX: 'auto' }}\n                >\n                    <div style={{ minWidth: '900px' }}>\n                        <div className=\"d-flex\">\n                            <span\n                                className=\"font-size-h6 text-dark font-weight-bolder border-bottom py-5 px-8\"\n                                style={{ width: '20%' }}\n                            >\n                                <FormattedMessage id=\"DASHBOARD.ORDER.ID\" />\n                            </span>\n                            <span\n                                className=\"font-size-h6 text-dark font-weight-bolder border-bottom py-5 px-8\"\n                                style={{ width: '20%' }}\n                            >\n                                <FormattedMessage id=\"DASHBOARD.ORDER.PRICE\" />\n                            </span>\n                            <span\n                                className=\"font-size-h6 text-dark font-weight-bolder border-bottom py-5 px-8\"\n                                style={{ width: '20%' }}\n                            >\n                                <FormattedMessage id=\"DASHBOARD.ORDER.STATUS\" />\n                            </span>\n                            <span\n                                className=\"font-size-h6 text-dark font-weight-bolder border-bottom py-5 px-8\"\n                                style={{ width: '20%' }}\n                            >\n                                <FormattedMessage id=\"DASHBOARD.ORDER.TYPE\" />\n                            </span>\n                            <span\n                                className=\"font-size-h6 text-dark font-weight-bolder border-bottom py-5 px-8\"\n                                style={{ width: '20%' }}\n                            >\n                                <FormattedMessage id=\"DASHBOARD.ORDER.UPDATE_DATE\" />\n                            </span>\n                        </div>\n                        {orders?.length > 0 ? (\n                            <div\n                                style={{\n                                    height: '80%',\n                                    maxHeight: '273px',\n                                    overflowY: 'auto'\n                                }}\n                            >\n                                {orders?.map((order, index) => (\n                                    <div\n                                        key={index}\n                                        className=\"d-flex py-5\"\n                                        style={{\n                                            backgroundColor:\n                                                index % 2 !== 1\n                                                    ? '#e2e3ef'\n                                                    : '-'\n                                        }}\n                                    >\n                                        <div\n                                            className=\"font-size-h6  px-8\"\n                                            style={{ width: '20%' }}\n                                        >\n                                            {order.id || '-'}\n                                        </div>\n                                        <span\n                                            className=\"font-size-h6 px-8\"\n                                            style={{ width: '20%' }}\n                                        >\n                                            {formatNumber(\n                                                order.cost?.balance\n                                            ) || 0}\n                                        </span>\n                                        <span\n                                            className=\"font-size-h6 px-2 px-8\"\n                                            style={{ width: '20%' }}\n                                        >\n                                            {order.status?.name || '-'}\n                                        </span>\n                                        <span\n                                            className=\"font-size-h6 px-2 px-8\"\n                                            style={{ width: '20%' }}\n                                        >\n                                            {order.type?.name || '-'}\n                                        </span>\n                                        <span\n                                            className=\"font-size-h6 px-8\"\n                                            style={{ width: '20%' }}\n                                        >\n                                            {order.updated_at || '-'}\n                                        </span>\n                                    </div>\n                                ))}\n                            </div>\n                        ) : (\n                            <EmptyData />\n                        )}\n                    </div>\n                </div>\n            </Card>\n        </>\n    );\n}\n\nexport default OrderCard;\n","import EmptyData from 'app/components/EmptyData';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Card, CardHeader } from '_metronic/_partials/controls';\n\nPurchaseCard.propTypes = {\n    purchases: PropTypes.array\n};\n\nfunction PurchaseCard({ purchases, intl }) {\n    return (\n        <>\n            <Card className=\"h-100\">\n                <CardHeader\n                    title={intl.formatMessage({\n                        id: 'DASHBOARD.PURCHASE.TITLE'\n                    })}\n                />\n\n                <div className=\"border mx-8 mt-8\" style={{ overflowX: 'auto' }}>\n                    <div style={{ minWidth: '900px' }}>\n                        <div className=\"d-flex\">\n                            <span\n                                className=\"font-size-h6 text-dark font-weight-bolder border-bottom py-5 px-8\"\n                                style={{ width: '20%' }}\n                            >\n                                <FormattedMessage id=\"DASHBOARD.PURCHASE.ID\" />\n                            </span>\n                            <span\n                                className=\"font-size-h6 text-dark font-weight-bolder border-bottom py-5 px-8\"\n                                style={{ width: '40%' }}\n                            >\n                                <FormattedMessage id=\"DASHBOARD.PURCHASE.SUPPLIER\" />\n                            </span>\n                            <span\n                                className=\"font-size-h6 text-dark font-weight-bolder border-bottom py-5 px-8\"\n                                style={{ width: '20%' }}\n                            >\n                                <FormattedMessage id=\"DASHBOARD.PURCHASE.STATUS\" />\n                            </span>\n                            <span\n                                className=\"font-size-h6 text-dark font-weight-bolder border-bottom py-5 px-8\"\n                                style={{ width: '20%' }}\n                            >\n                                <FormattedMessage id=\"DASHBOARD.PURCHASE.CREATED_DATE\" />\n                            </span>\n                        </div>\n                        {purchases?.length > 0 ? (\n                            <div\n                                style={{\n                                    maxHeight: '273px',\n                                    overflowY: 'auto'\n                                }}\n                            >\n                                {purchases?.map((purchase, index) => (\n                                    <div\n                                        key={index}\n                                        className=\"d-flex py-5\"\n                                        style={{\n                                            backgroundColor:\n                                                index % 2 !== 1\n                                                    ? '#e2e3ef'\n                                                    : '-'\n                                        }}\n                                    >\n                                        <div\n                                            className=\"font-size-h6 px-8\"\n                                            style={{ width: '20%' }}\n                                        >\n                                            {purchase.id || '-'}\n                                        </div>\n                                        <div\n                                            className=\"font-size-h6 px-8\"\n                                            style={{ width: '40%' }}\n                                        >\n                                            <div>{purchase.supplier?.name}</div>\n                                            <div>\n                                                {purchase.supplier?.address}\n                                            </div>\n                                        </div>\n                                        <div\n                                            className=\"font-size-h6 px-8\"\n                                            style={{ width: '20%' }}\n                                        >\n                                            {purchase.status?.name || '-'}\n                                        </div>\n                                        <div\n                                            className=\"font-size-h6 px-8\"\n                                            style={{ width: '20%' }}\n                                        >\n                                            {purchase.created_at || '-'}\n                                        </div>\n                                    </div>\n                                ))}\n                            </div>\n                        ) : (\n                            <EmptyData />\n                        )}\n                    </div>\n                </div>\n            </Card>\n        </>\n    );\n}\n\nexport default PurchaseCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardHeader } from '_metronic/_partials/controls';\nimport EmptyData from 'app/components/EmptyData';\n\nTrackingCard.propTypes = {\n    trackings: PropTypes.array\n};\n\nfunction TrackingCard({ trackings, intl }) {\n    return (\n        <Card className=\"h-100\">\n            <CardHeader\n                title={intl.formatMessage({ id: 'DASHBOARD.TRACKING.TITLE' })}\n            />\n            {trackings?.length > 0 ? (\n                <div className=\"dashboard-log h-100 m-8\">\n                    <div\n                        className=\"border\"\n                        style={{ height: '100%', overflow: 'auto' }}\n                    >\n                        {trackings.map((item, index) => (\n                            <div\n                                className=\"dashboard-tracking__item  px-8 border-bottom py-5\"\n                                key={index}\n                            >\n                                <i\n                                    className={`fa fa-genderless ${\n                                        item.checked\n                                            ? 'text-primary'\n                                            : 'text-danger'\n                                    } icon-xl mr-4`}\n                                />\n                                <div className=\"font-weight-bolder font-size-h6 opacity-80\">\n                                    {item.code}\n                                </div>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            ) : (\n                <EmptyData />\n            )}\n        </Card>\n    );\n}\n\nexport default TrackingCard;\n","import EmptyData from 'app/components/EmptyData';\nimport formatNumber from 'helper/formatNumber';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Card, CardHeader } from '_metronic/_partials/controls';\n\nTransactionCard.propTypes = {\n    transactions: PropTypes.array\n};\n\nfunction TransactionCard({ transactions, intl }) {\n    return (\n        <>\n            <Card style={{ marginBottom: '0px' }} className=\"h-100\">\n                <CardHeader\n                    title={intl.formatMessage({\n                        id: 'DASHBOARD.TRANSACTION.TITLE'\n                    })}\n                />\n                <div\n                    className=\"border m-8\"\n                    style={{ height: '69%', overflowX: 'auto' }}\n                >\n                    <div style={{ minWidth: '900px' }}>\n                        <div className=\"d-flex\">\n                            <span className=\"w-25 font-size-h6 text-dark font-weight-bolder border-bottom py-5  px-8\">\n                                <FormattedMessage id=\"DASHBOARD.TRANSACTION.EXECUTION_DATE\" />\n                            </span>\n                            <span className=\"w-25 font-size-h6 text-dark font-weight-bolder border-bottom py-5  px-8\">\n                                <FormattedMessage id=\"DASHBOARD.TRANSACTION.AMOUNT\" />\n                            </span>\n                            <span className=\"w-25 font-size-h6 text-dark font-weight-bolder border-bottom py-5  px-8\">\n                                <FormattedMessage id=\"DASHBOARD.TRANSACTION.CONTENT\" />\n                            </span>\n                            <span className=\"w-25 font-size-h6 text-dark font-weight-bolder border-bottom py-5  px-8\">\n                                <FormattedMessage id=\"DASHBOARD.TRANSACTION.PERFORMER\" />\n                            </span>\n                        </div>\n                        {transactions?.length > 0 ? (\n                            <div\n                                style={{\n                                    height: '80%',\n                                    maxHeight: '273px',\n                                    overflowY: 'auto'\n                                }}\n                            >\n                                {transactions?.map((transaction, index) => (\n                                    <div\n                                        key={index}\n                                        className=\"d-flex py-5\"\n                                        style={{\n                                            backgroundColor:\n                                                index % 2 !== 1\n                                                    ? '#e2e3ef'\n                                                    : '-'\n                                        }}\n                                    >\n                                        <div className=\"w-25 font-size-h6 px-8\">\n                                            {transaction.create_at || '-'}\n                                        </div>\n                                        <div className=\"w-25 font-size-h6 px-8\">\n                                            {formatNumber(transaction.amount) ||\n                                                '-'}\n                                        </div>\n                                        <div className=\"w-25 font-size-h6 px-8\">\n                                            {transaction.description || '-'}\n                                        </div>\n                                        <div className=\"w-25 font-size-h6 px-8\">\n                                            {transaction.prepared_by_id || '-'}\n                                        </div>\n                                    </div>\n                                ))}\n                            </div>\n                        ) : (\n                            <EmptyData />\n                        )}\n                    </div>\n                </div>\n            </Card>\n        </>\n    );\n}\n\nexport default TransactionCard;\n","import Loading from 'app/components/Loading';\nimport TopHeader from 'app/components/TopHeader';\nimport { fetchTransactions } from 'app/modules/Accounting/redux/transactionSlice';\nimport { fetchLogs } from 'app/modules/Notification/redux/logSlice';\nimport {\n    fetchOrder,\n    resetOrder\n} from 'app/modules/Order/order-redux/orderSlice';\nimport {\n    fetchPurchase,\n    resetPurchase\n} from 'app/modules/Purchase/redux/purchaseSlice';\nimport { fetchTracking } from 'app/modules/Purchase/redux/trackingSlice';\nimport 'assets/css/dashboard.scss';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect, shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport InfoCard from '../components/InfoCard';\nimport LogCard from '../components/LogCard';\nimport OrderCard from '../components/OrderCard';\nimport PurchaseCard from '../components/PurchaseCard';\nimport TrackingCard from '../components/TrackingCard';\nimport TransactionCard from '../components/TransactionCard';\n\nfunction DashboardPage({ intl }) {\n    const dispatch = useDispatch();\n\n    // store\n    const {\n        user,\n        transactions,\n        orders,\n        purchases,\n        logs,\n        trackings,\n        isLoadingTransaction,\n        isLoadingOrders,\n        isLoadingPurchases,\n        isLoadingLogs,\n        isLoadingTrackings\n    } = useSelector(\n        ({ auth, accounting, order, purchase, notification }) => ({\n            user: auth.user,\n            transactions: accounting.transaction.list,\n            isLoadingTransaction: accounting.transaction.isLoading,\n            orders: order.list.orderList,\n            isLoadingOrders: order.list.isLoading,\n            purchases: purchase.list.purchaseList,\n            isLoadingPurchases: purchase.list.isLoading,\n            logs: notification.log.list,\n            isLoadingLogs: notification.log.isLoading,\n            trackings: purchase.tracking.trackingList,\n            isLoadingTrackings: purchase.tracking.isLoading\n        }),\n        shallowEqual\n    );\n\n    const paramsTransaction = {\n        orderBy: 'created_at',\n        sortedBy: 'desc'\n    };\n\n    const paramsOrder = {\n        orderBy: 'created_at',\n        sortedBy: 'desc'\n    };\n\n    const paramsPurchase = {\n        // search: `buyer_id:${user.id}`,\n        appends: 'supplier',\n        with: 'items',\n        orderBy: 'created_at',\n        sortedBy: 'desc'\n    };\n\n    const paramsLog = {\n        orderBy: 'created_at',\n        sortedBy: 'desc'\n    };\n\n    const paramsTracking = {\n        // orderBy: 'expected_delivery',\n        // sortedBy: 'desc'\n    };\n\n    React.useEffect(() => {\n        dispatch(resetPurchase());\n        dispatch(resetOrder());\n        dispatch(fetchTransactions(paramsTransaction));\n        dispatch(fetchOrder(paramsOrder));\n        dispatch(fetchPurchase(paramsPurchase));\n        dispatch(fetchLogs(paramsLog));\n        dispatch(fetchTracking(paramsTracking));\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const loading =\n        isLoadingTransaction ||\n        isLoadingOrders ||\n        isLoadingPurchases ||\n        isLoadingLogs ||\n        isLoadingTrackings;\n\n    return (\n        <>\n            {loading && <Loading />}\n            <TopHeader title={intl.formatMessage({ id: 'DASHBOARD.TITLE' })} />\n            <div className=\"px-8 pb-8\">\n                {/* begin row */}\n                <div className=\"row mb-8\">\n                    <div className=\"col-3\">\n                        <InfoCard user={user} />\n                    </div>\n                    <div className=\"col-9\">\n                        <TransactionCard\n                            transactions={transactions}\n                            intl={intl}\n                        />\n                    </div>\n                </div>\n                {/* end row */}\n                {/* begin row */}\n                <div className=\"row\">\n                    <div className=\"col-3\">\n                        <TrackingCard trackings={trackings} intl={intl} />\n                    </div>\n                    <div className=\"col-9\">\n                        <OrderCard orders={orders} intl={intl} />\n                    </div>\n                </div>\n                {/* end row */}\n                {/* begin row */}\n                <div className=\"row mt-8\">\n                    <div className=\"col-3\">\n                        <LogCard logs={logs} intl={intl} />\n                    </div>\n                    <div className=\"col-9\">\n                        <PurchaseCard purchases={purchases} intl={intl} />\n                    </div>\n                </div>\n                {/* end row */}\n            </div>\n        </>\n    );\n}\n\nexport default injectIntl(connect(null, null)(DashboardPage));\n"],"sourceRoot":""}
{"version":3,"sources":["app/components/CustomDialogConfirm.js","app/modules/Warehouse/components/Layout/TopHeader.jsx","app/modules/Warehouse/components/Layout/index.jsx","app/modules/Warehouse/components/Filter/SFAFilter/index.jsx","app/modules/Warehouse/components/List/ListSFAForInbound/SFAItem/AdditionalTypeBox.jsx","app/modules/Warehouse/components/List/ListSFAForInbound/SFAItem/AdditionalTypeStorage.jsx","app/modules/Warehouse/components/List/ListSFAForInbound/SFAItem/AdditionalTypeOrder.jsx","app/modules/Warehouse/components/List/ListSFAForInbound/SFAItem/index.jsx","app/modules/Warehouse/components/List/ListSFAForInbound/index.jsx","app/modules/Warehouse/pages/CheckSFA/TableSFAs.jsx","app/modules/Warehouse/pages/CheckSFA/index.jsx","app/modules/Warehouse/pages/ClassifyBox/TableSFAs/index.jsx","app/modules/Warehouse/pages/PerformEntry/Step2_CheckTheGoods/EmptyDataContent/index.jsx","helper/handleApiError.js","app/modules/Warehouse/components/Form/FormStatus/index.jsx","helper/useFormEnterIndex.js","app/modules/Warehouse/components/Form/FormEnterIndex/index.jsx","helper/useSocket.js","app/modules/Warehouse/components/Form/FormUpdateBoxPhysicalInfo/index.jsx","app/components/Button/index.jsx","app/modules/Warehouse/components/PerformEntry/CreateNewBox/index.jsx","app/modules/Warehouse/components/List/ListBox/BoxItem.jsx","app/modules/Warehouse/components/List/ListBox/index.jsx","app/modules/Warehouse/components/ModalConfirmDelete/index.jsx","app/modules/Warehouse/components/Table/TableBoxOwners/index.jsx","app/modules/Warehouse/components/Form/FormAddBoxOrder/SelectObjType/index.jsx","app/components/Select/BaseSelect/index.jsx","app/components/Select/SelectCustomer/index.jsx","app/components/Select/SelectCustomer/SelectCustomerForm.jsx","app/modules/Warehouse/components/Form/FormAddBoxOrder/SelectObjValue/index.jsx","app/modules/Warehouse/components/Form/FormAddBoxOrder/index.jsx","app/modules/Warehouse/pages/ClassifyBox/ClassifyDetail/ClassifyBox/AddOrder/index.jsx","app/modules/Warehouse/components/SelectBox/index.jsx","app/modules/Warehouse/pages/ClassifyBox/ClassifyDetail/ClassifyBox/index.jsx","app/modules/Warehouse/pages/ClassifyBox/ClassifyDetail/index.jsx","app/modules/Warehouse/pages/ClassifyBox/index.jsx","app/components/Select/SelectSFA/index.jsx","app/components/Select/SelectSFATracking/index.jsx","app/components/Select/SelectLadingBill/index.jsx","app/components/Select/SelectInvoice/index.jsx","app/modules/Warehouse/pages/Dashboard/FilterList/index.jsx","app/components/WaypointTable/index.jsx","app/modules/Warehouse/pages/Dashboard/TableSKU/index.jsx","app/modules/Warehouse/pages/Dashboard/hooks/useColumns.js","app/modules/Warehouse/pages/Dashboard/FilterExtraData/FilterJancodeExtraData/index.jsx","app/modules/Warehouse/pages/Dashboard/FilterExtraData/index.jsx","app/modules/Warehouse/pages/Dashboard/SFACreatedToday/index.jsx","app/modules/Warehouse/pages/Dashboard/BoxCreatedToday/index.jsx","app/modules/Warehouse/pages/Dashboard/TrackingWillComingToday/index.jsx","app/modules/Warehouse/pages/Dashboard/RequestPackingBox/index.jsx","app/modules/Warehouse/pages/Dashboard/JobCheckingList/index.jsx","app/modules/Warehouse/pages/Dashboard/index.jsx","app/modules/Warehouse/selector/DownContainer/getCurrentContainer.js","app/modules/Warehouse/selector/DownContainer/targetBoxesSelector.js","app/modules/Warehouse/pages/DownContainer/TargetSection/InputAddInvoice/index.jsx","app/modules/Warehouse/components/WarehouseIO/TargetBoxes/index.jsx","app/modules/Warehouse/pages/DownContainer/TargetSection/index.jsx","app/modules/Warehouse/selector/DownContainer/getDownContMessages.js","app/modules/Warehouse/selector/DownContainer/getCurrentPallet.js","helper/printerTemplateData.js","app/modules/Warehouse/pages/DownContainer/ProcessSection/InputAddData/index.jsx","app/modules/Warehouse/pages/DownContainer/ProcessSection/InputAddData/useInputAdd.js","app/components/Select/SelectLocation/index.jsx","app/components/Select/SelectLocation/SelectLocationForm.jsx","app/modules/Warehouse/components/List/ListPallet/ModalSavePallet/FormSelectLocation.jsx","app/modules/Warehouse/components/Form/FormAddLocation/CustomShelveSelect.jsx","app/modules/Warehouse/components/Form/FormAddLocation/index.jsx","app/modules/Warehouse/components/List/ListPallet/ModalSavePallet/FormCreateLocation.jsx","app/modules/Warehouse/components/List/ListPallet/ModalSavePallet/index.jsx","app/components/Select/SelectPalletType/index.jsx","app/modules/Warehouse/pages/DownContainer/ProcessSection/ListPallet/index.jsx","app/modules/Warehouse/components/WarehouseIO/IOMessages/MessageTypePallet.jsx","app/components/EditableText/index.jsx","app/modules/Warehouse/components/WarehouseIO/IOMessages/MessageTypeNotify.jsx","app/modules/Warehouse/components/WarehouseIO/IOMessages/MessageTypeBox.jsx","app/modules/Warehouse/components/WarehouseIO/IOMessages/index.jsx","app/modules/Warehouse/pages/DownContainer/ProcessSection/index.jsx","app/modules/Warehouse/pages/DownContainer/ContainerStatus/index.jsx","app/modules/Warehouse/pages/DownContainer/index.jsx","app/modules/Warehouse/pages/GoodsDelivery/hooks/useGoodsDeliveryDetail.js","app/modules/Warehouse/components/GrBtnEdit/index.jsx","app/components/Select/SelectDeliveryPartner/index.jsx","app/components/Select/SelectDeliveryPartner/SelectDeliveryPartnerForm.jsx","app/components/Select/SelectGoodsDeliveryStatus/index.jsx","app/components/Select/SelectGoodsDeliveryStatus/SelectGoodsDeliveryStatusForm.jsx","app/components/Select/SelectShipmentInfo/index.jsx","app/components/Select/SelectShipmentInfo/SelectShipmentInfoForm.jsx","app/modules/Warehouse/components/Form/FormAddGoodsDelivery/index.jsx","app/modules/Warehouse/pages/GoodsDelivery/GoodsDeliveryDetail/GoodsDeliveryInfo.jsx","app/components/NotFound/index.jsx","app/components/CustomTable/index.js","app/modules/Warehouse/components/ModalConfirm/index.jsx","app/modules/Warehouse/components/Table/TableGoodsDeliveryBoxes/useColumns.js","app/modules/Warehouse/components/Table/TableGoodsDeliveryBoxes/index.jsx","app/components/Select/SelectLadingBill/SelectLadingBillForm.jsx","app/modules/Warehouse/components/Form/FormAddBoxToGoodsDelivery/ListBox.jsx","app/modules/Warehouse/components/Form/FormAddBoxToGoodsDelivery/FormContent.jsx","app/modules/Warehouse/components/Form/FormAddBoxToGoodsDelivery/useBoxLadingBill.js","app/modules/Warehouse/components/Form/FormAddBoxToGoodsDelivery/index.jsx","app/modules/Warehouse/pages/GoodsDelivery/GoodsDeliveryDetail/AddBoxToGoodsDelivery.jsx","app/modules/Warehouse/pages/GoodsDelivery/GoodsDeliveryDetail/GoodsDeliveryBoxes.jsx","app/modules/Warehouse/pages/GoodsDelivery/GoodsDeliveryDetail/index.jsx","app/modules/Warehouse/components/Table/TableGoodsDeliveries/index.jsx","app/modules/Warehouse/components/Table/TableGoodsDeliveries/useColumns.js","app/modules/Warehouse/components/Filter/GoodsDeliveryFilter/index.jsx","app/modules/Warehouse/pages/GoodsDelivery/ListGoodsDelivery/CreateGoodsDelivery.jsx","app/modules/Warehouse/pages/GoodsDelivery/ListGoodsDelivery/index.jsx","app/modules/Warehouse/pages/GoodsDelivery/hooks/useGoodsDeliveryList.js","app/components/Tabs/Simple/index.jsx","app/modules/Warehouse/components/Table/TableDeliveryPartner/index.jsx","app/modules/Warehouse/components/Table/TableDeliveryPartner/useColumns.js","app/modules/Warehouse/components/Form/FormAddDeliveryPartner/index.jsx","app/modules/Warehouse/pages/GoodsDelivery/DeliveryPartners/ModalCreateDeliveryPartner.jsx","app/modules/Warehouse/pages/GoodsDelivery/DeliveryPartners/index.jsx","app/modules/Warehouse/pages/GoodsDelivery/GDTabContent/index.jsx","app/modules/Warehouse/pages/GoodsDelivery/index.jsx","config/currency.js","app/modules/Warehouse/components/List/ListInboundPlan/InboundPlanItem.jsx","app/modules/Warehouse/components/List/ListInboundPlan/index.jsx","app/modules/Warehouse/pages/InboundPlan/ListTracking.jsx","app/modules/Warehouse/pages/InboundPlan/TrackingFilter/index.jsx","helper/convertObjectDateToString.js","app/modules/Warehouse/components/Form/FormCreateSFA/TrackingLabel.jsx","app/modules/Warehouse/components/Form/FormAddAgency/index.jsx","app/modules/Warehouse/components/Form/FormCreateSFA/AgencyLabel.jsx","app/modules/Warehouse/components/Form/FormCreateSFA/TrackingInput.jsx","app/modules/Warehouse/components/Form/FormCreateSFA/index.jsx","app/modules/Warehouse/pages/InboundPlan/TrackingPickedSection/index.jsx","app/modules/Warehouse/pages/InboundPlan/index.jsx","app/modules/Warehouse/components/Table/TableInvoiceList/index.jsx","app/modules/Warehouse/components/Table/TableInvoiceList/useColumn.js","app/components/Select/SelectContainerType/index.jsx","app/components/Select/SelectContainerType/SelectContainerTypeForm.jsx","app/modules/Warehouse/components/Form/FormAddInvoice/index.jsx","app/modules/Warehouse/pages/Invoice/InvoiceList/CreateInvoice.jsx","app/components/DatePicker/index.jsx","app/modules/Warehouse/components/Filter/InvoiceFilter/index.jsx","app/modules/Warehouse/pages/Invoice/InvoiceList/index.jsx","app/modules/Warehouse/pages/Invoice/InvoiceDetail/InvoiceInfo/index.jsx","app/modules/Warehouse/components/Form/FormEditInvoiceCost/index.jsx","app/modules/Warehouse/pages/Invoice/InvoiceDetail/InvoiceCostInfo/index.jsx","app/modules/Warehouse/pages/Invoice/InvoiceDetail/LadingBillList/TableLadingBill.jsx","app/modules/Warehouse/pages/Invoice/InvoiceDetail/LadingBillList/useColumns.js","app/modules/Warehouse/pages/Invoice/InvoiceDetail/LadingBillList/AddLadingBill.jsx","app/modules/Warehouse/pages/Invoice/InvoiceDetail/LadingBillList/index.jsx","app/modules/Warehouse/pages/Invoice/InvoiceDetail/index.jsx","app/modules/Warehouse/pages/Invoice/index.jsx","app/modules/Warehouse/components/Table/TableLadingBillList/index.jsx","app/modules/Warehouse/components/Table/TableLadingBillList/useColumns.js","app/modules/Warehouse/components/Form/FormAddLadingBill/ListBox.jsx","app/modules/Warehouse/components/Form/FormAddLadingBill/FormContent.jsx","app/modules/Warehouse/components/Form/FormAddLadingBill/index.jsx","app/modules/Warehouse/pages/LadingBill/LadingBillList/CreateLadingBill.jsx","app/modules/Warehouse/components/Filter/LadingBillFilter/index.jsx","app/modules/Warehouse/pages/LadingBill/LadingBillList/index.jsx","app/modules/Warehouse/components/Form/FormEditLadingBill/index.jsx","app/modules/Warehouse/pages/LadingBill/LadingBillDetail/LadingBillInfo.jsx","app/modules/Warehouse/components/Form/FormAddBoxLadingBill/FormContent.jsx","app/modules/Warehouse/components/Form/FormAddBoxLadingBill/index.jsx","app/modules/Warehouse/pages/LadingBill/LadingBillDetail/AddBoxToLadingBill.jsx","app/modules/Warehouse/pages/LadingBill/LadingBillDetail/TableBoxInLadingBill/useColumns.js","app/modules/Warehouse/pages/LadingBill/LadingBillDetail/TableBoxInLadingBill/index.jsx","app/modules/Warehouse/pages/LadingBill/LadingBillDetail/LadingBillBox.jsx","app/modules/Warehouse/components/Form/FormEditLadingBill/FormEditLadingBillCost.jsx","app/modules/Warehouse/pages/LadingBill/LadingBillDetail/LadingBillCostInfo.jsx","app/modules/Warehouse/pages/LadingBill/LadingBillDetail/index.jsx","app/modules/Warehouse/pages/LadingBill/index.jsx","app/modules/Warehouse/selector/LoadUpContainer/getCurrentContainer.js","app/modules/Warehouse/selector/LoadUpContainer/targetBoxesSelector.js","app/modules/Warehouse/pages/LoadUpContainer/TargetSection/InputAddInvoice/index.jsx","app/modules/Warehouse/pages/LoadUpContainer/TargetSection/index.jsx","helper/isContainerCutOff.js","app/modules/Warehouse/selector/LoadUpContainer/getUpContMessages.js","app/modules/Warehouse/pages/LoadUpContainer/hooks/useLoadUp.js","app/components/Select/SelectPallet/index.jsx","app/modules/Warehouse/pages/LoadUpContainer/ProcessSection/ModalSelectPallet/index.jsx","app/modules/Warehouse/pages/LoadUpContainer/ProcessSection/InputAddData/index.jsx","app/modules/Warehouse/pages/LoadUpContainer/ProcessSection/index.jsx","app/modules/Warehouse/pages/LoadUpContainer/ContainerStatus/index.jsx","app/modules/Warehouse/pages/LoadUpContainer/index.jsx","app/modules/Warehouse/pages/OutBoundPicker/ProcessSection/InputAddData/index.jsx","app/modules/Warehouse/pages/OutBoundPicker/ProcessSection/index.jsx","app/modules/Warehouse/selector/outBoundPicker/targetBoxesSelector.js","app/components/Select/SelectGoodsDelivery/index.jsx","app/modules/Warehouse/pages/OutBoundPicker/TargetSection/InputAddGoodsDelivery/index.jsx","app/modules/Warehouse/pages/OutBoundPicker/TargetSection/index.jsx","app/modules/Warehouse/pages/OutBoundPicker/index.jsx","app/modules/Warehouse/pages/Pack/TableSFAs.jsx","app/modules/Warehouse/pages/Pack/index.jsx","app/modules/Warehouse/pages/PerformEntry/PerformStep/EditSFA.jsx","app/components/DropdownButton/index.jsx","app/modules/Warehouse/components/Form/FormAddReceipt/index.jsx","app/modules/Warehouse/pages/PerformEntry/PerformStep/EditReceipt.jsx","app/modules/Warehouse/pages/PerformEntry/PerformStep/useCRUDReceipt.js","app/modules/Warehouse/pages/PerformEntry/PerformStep/ShowTrackingBarcode.jsx","app/modules/Warehouse/pages/PerformEntry/PerformStep/CurrentSFA.jsx","app/modules/Warehouse/pages/PerformEntry/PerformStep/index.jsx","app/modules/Warehouse/pages/PerformEntry/Step1_CreateSFA/index.jsx","app/modules/Warehouse/components/PerformEntry/ModalConfirmStep2/index.jsx","app/modules/Warehouse/components/PerformEntry/CurrentBox/index.jsx","helper/playAudio.js","app/modules/Warehouse/pages/PerformEntry/Step2_CheckTheGoods/CheckTheGoods/useBoxItem.js","app/modules/Warehouse/components/Form/FormAddBoxItem/DialogNewProduct.jsx","app/modules/Warehouse/components/Form/FormAddBoxItem/AddProduct.jsx","helper/useClickOutSide.js","app/modules/Warehouse/components/Form/FormAddBoxItem/ACProductInput.jsx","app/modules/Warehouse/components/Form/FormAddBoxItem/index.jsx","app/modules/Warehouse/pages/PerformEntry/Step2_CheckTheGoods/CheckTheGoods/AddBoxItem.jsx","app/modules/Warehouse/components/List/ListBoxItems/index.jsx","app/modules/Warehouse/pages/PerformEntry/Step2_CheckTheGoods/CheckTheGoods/TableBoxItem.jsx","helper/useScrollIntoView.js","app/modules/Warehouse/pages/PerformEntry/Step2_CheckTheGoods/CheckTheGoods/Header.jsx","app/modules/Warehouse/pages/PerformEntry/Step2_CheckTheGoods/CheckTheGoods/index.jsx","app/modules/Warehouse/pages/PerformEntry/Step2_CheckTheGoods/index.jsx","app/modules/Warehouse/components/List/ListPallet/PalletItem.jsx","app/modules/Warehouse/components/List/ListPallet/InputAddPallet.jsx","app/modules/Warehouse/components/List/ListPallet/index.jsx","app/modules/Warehouse/components/List/ListBoxOnPallet/index.jsx","app/modules/Warehouse/pages/PerformEntry/Step3_StorageBox/StorageBox/index.jsx","app/modules/Warehouse/pages/PerformEntry/Step3_StorageBox/Header.jsx","app/modules/Warehouse/pages/PerformEntry/Step3_StorageBox/index.jsx","app/modules/Warehouse/pages/PerformEntry/Step4_PackagingProduct/hooks/useF5SFA.js","app/modules/Warehouse/pages/PerformEntry/Step4_PackagingProduct/Header.jsx","app/modules/Warehouse/pages/PerformEntry/Step4_PackagingProduct/ParentBox/index.jsx","app/modules/Warehouse/components/Form/FormAddChild/index.jsx","app/modules/Warehouse/pages/PerformEntry/Step4_PackagingProduct/AddChilds/ModalNotEnoughVolume.jsx","app/modules/Warehouse/pages/PerformEntry/Step4_PackagingProduct/AddChilds/index.jsx","app/modules/Warehouse/pages/PerformEntry/Step4_PackagingProduct/TableBoxChilds/index.jsx","app/modules/Warehouse/pages/PerformEntry/Step4_PackagingProduct/ChildrenBoxes/index.jsx","app/modules/Warehouse/pages/PerformEntry/Step4_PackagingProduct/Packaging/index.jsx","app/modules/Warehouse/pages/PerformEntry/Step4_PackagingProduct/index.jsx","app/modules/Warehouse/pages/PerformEntry/index.jsx","app/modules/Warehouse/pages/Settings/DefaultAgency/index.jsx","app/modules/Warehouse/pages/Settings/PrinterSettings/index.jsx","app/modules/Warehouse/components/Table/TableLocationList/index.jsx","app/modules/Warehouse/components/Table/TableLocationList/useColumns.js","app/modules/Warehouse/components/SelectArea/index.jsx","app/modules/Warehouse/pages/Settings/LocationManagement/ModalCreateLocation/index.jsx","app/components/Select/SelectShelve/index.jsx","app/modules/Warehouse/pages/Settings/LocationManagement/index.jsx","app/modules/Warehouse/pages/Settings/LocationManagement/useLocationList.js","app/modules/Warehouse/components/Form/FormAddPalletType/index.jsx","app/modules/Warehouse/pages/Settings/PalletType/ModalCreatePalletType.jsx","app/modules/Warehouse/components/Table/TablePalletType/index.jsx","app/modules/Warehouse/components/Table/TablePalletType/useColumns.js","app/modules/Warehouse/pages/Settings/PalletType/index.jsx","app/modules/Warehouse/components/Table/TableArea/index.jsx","app/modules/Warehouse/components/Table/TableArea/useColumns.js","app/modules/Warehouse/components/Form/FormAddArea/index.jsx","app/modules/Warehouse/pages/Settings/AreaManagement/ModalCreateArea.jsx","app/modules/Warehouse/pages/Settings/AreaManagement/index.jsx","app/modules/Warehouse/components/Table/TableShelve/index.jsx","app/modules/Warehouse/components/Table/TableShelve/useColumns.js","app/modules/Warehouse/components/SelectArea/SelectAreaForm.jsx","app/modules/Warehouse/components/Form/FormAddShelve/index.jsx","app/modules/Warehouse/pages/Settings/ShelveManagement/ModalCreateShelve.jsx","app/modules/Warehouse/pages/Settings/ShelveManagement/index.jsx","app/modules/Warehouse/components/Table/TableContainerType/index.jsx","app/modules/Warehouse/components/Table/TableContainerType/useColumns.js","helper/getDateOfWeekByNumber.js","app/components/Select/SelectDateOfWeek/index.jsx","app/components/Select/SelectDateOfWeek/SelectDateOfWeekForm.jsx","app/components/Select/SelectShipmentMethod/index.jsx","app/components/Select/SelectShipmentMethod/SelectShipmentMethodForm.jsx","app/modules/Warehouse/components/Form/FormAddContainerType/index.jsx","app/modules/Warehouse/pages/Settings/ContainerTypeManagement/ModalCreateContainerType.jsx","app/modules/Warehouse/pages/Settings/ContainerTypeManagement/index.jsx","app/modules/Warehouse/components/Form/FormAddShipmenMethod/index.jsx","app/modules/Warehouse/pages/Settings/ShipmentMethodManagement/ModalCreateShipmentMethod.jsx","app/modules/Warehouse/components/Table/TableShipmentMethods/index.jsx","app/modules/Warehouse/components/Table/TableShipmentMethods/useColumns.js","app/modules/Warehouse/pages/Settings/ShipmentMethodManagement/index.jsx","app/components/NeedPermission/NotHavePermission/index.jsx","app/modules/Warehouse/pages/Settings/index.jsx","app/modules/Warehouse/pages/StorageSFA/TableSFAs/index.jsx","app/modules/Warehouse/components/Form/FormDirectStorage/ModalAddLocation.jsx","app/modules/Warehouse/components/Form/FormDirectStorage/index.jsx","app/modules/Warehouse/pages/StorageSFA/DirectStorage/index.jsx","app/modules/Warehouse/pages/StorageSFA/index.jsx","app/modules/Warehouse/pages/WarehouseModel/FilterSection/index.jsx","app/modules/Warehouse/components/Model/context.jsx","app/modules/Warehouse/components/Model/PalletItem/index.jsx","app/modules/Warehouse/components/Model/LocationItem/index.jsx","app/modules/Warehouse/components/Model/LocationGrid/index.jsx","app/modules/Warehouse/components/Model/PalletDetail/index.jsx","app/modules/Warehouse/components/Model/ShelveItem/index.jsx","app/modules/Warehouse/pages/WarehouseModel/index.jsx","app/modules/Warehouse/pages/WarehousePage.js"],"names":["CustomDialogConfirm","show","onHide","onDelete","title","content","isLoading","aria-labelledby","Header","closeButton","Title","id","Body","Footer","type","onClick","className","TopHeader","toolbar","Divider","Layout","children","SFAFilter","ref","onSearch","searchAll","useState","searchText","setSearchText","useTrans","trans","fields","useMemo","searchField","setSearchField","agencies","useSelector","state","warehouse","agency","list","dispatchSearch","useCallback","_","debounce","_searchText","_searchField","length","search","searchFields","useImperativeHandle","reset","handleSearchTextChange","e","target","value","getSearchFieldCpn","onChange","map","idx","key","name","placeholder","f","forwardRef","AdditionalTypeBox","sfa","boxes","box","duplicate","AdditionalTypeStorage","quantity_available_in_pallet","src","toAbsoluteUrl","OrderList","owners","OverlayTrigger","placement","overlay","Tooltip","owner","ownerIdx","objectable_type","objectable_id","quantity","AdditionalTypeOrder","Number","quantity_of_owners","SFAItem","onRedirect","totalSku","reduce","prevV","curV","totalBoxOnPallet","totalHaveOrder","quantityRender","clsx","addionalRender","arrival_date","tracking","ListSFAForInbound","onViewEdit","pagination","loading","data","history","useHistory","dispatch","useDispatch","filterRef","useRef","fetchData","additionalParams","withParams","fetchSFAs","page","with","useEffect","sortedData","sortBy","o","p","c","moment","created_at","toDate","Loading","local","searchData","NeedPermission","need","push","Pagination","count","lastPage","shape","evt","sfaAction","changePagination","TableSFAs","props","sfaID","CheckSFAPage","EmptyDataContent","focusModalCreateBox","handleApiError","err","form","errObj","get","errorsObj","Object","entries","forEach","kErr","vErr","setErrors","api","console","error","FormStatus","useFormikContext","errors","status","has","focusableElementsNoneName","FormEnterIndex","enterIndex","formRef","ele","submitForm","current","addEventListener","event","keyCode","includes","nodeName","inputElements","Array","from","elements","filter","disabled","index","prototype","indexOf","call","step","focus","preventDefault","useFormEnterIndex","useSocket","onReceivedMessage","defaultIPServer","settings","printer","socketServer","socket","connect","ipConnect","sk","WebSocket","printerSocketConfig","onerror","listenSocketConnectAndSendData","d","readyState","send","onopen","listenSocketMessage","onmessage","str","JSON","parse","isJsonString","evtData","objGetDWS","FormUpdateBoxPhysicalInfo","formItemClass","isHaveDuplicate","onSubmit","initialValues","socketData","handleSocketData","stringify","log","validationSchema","Yup","width","min","height","weight_per_box","innerRef","component","Input","label","autoFocus","React","TMNButton","htmlType","permissionJoin","isActiveByPermission","usePermission","getLoadingClassName","initialBoxPhysicalData","CreateNewBox","onSuccess","setLoading","params","useParams","closeModal","goBack","handleBoxInfo","values","a","updateBox","createBox","sfa_id","body","apiParams","omit","warehouseApi","create","then","response","dialog","success","setTimeout","catch","box_id","pick","update","CustomModal","actionsLoading","Modal","Button","BoxItem","active","showQuantity","showRelative","showTotalItems","getTotalBoxItems","totalBoxItems","items","curB","childs","prevC_V","curC_B","formatNumber","boxChild","boxChildIdx","ListBox","onSelectBox","detail","cardRef","listRef","listItemsRef","document","handleScroll","removeEventListener","getBoundingClientRect","top","wrapperHeight","style","bottom","listBox","boxList","b","box_parent_id","sort","handleClickBox","debounceSearchText","v","scrollTo","left","behavior","onKeyPress","charCode","ModalConfirmDelete","onConfirmed","useStyles","makeStyles","theme","root","display","marginTop","spacing","marginBottom","justifyContent","TableBoxOrders","onRefresh","onPageChange","classes","match","useRouteMatch","inputQuantityRef","r","handleDelete","recordId","boxOwner","delete","columns","render","row","fallback","handleChangeQuantity","persist","dispatchToApi","borderColor","errMessage","path","Box","Table","TableHead","TableRow","column","TableCell","TableBody","hover","getCellElement","color","size","record","url","EmptyData","emptyText","SelectObjType","showLabel","setValue","useField","field","meta","setFieldTouched","setFieldValue","touched","options","newValue","i","htmlFor","optionSelected","TMNBaseSelect","onFetchData","typeSearch","dispatchFirstOption","prevSearch","setPrevSearch","isDispatchedFirstOption","undefined","onInputChange","option","SelectCustomer","customerList","authService","user","userList","shallowEqual","customerOptions","item","email","fetchUsers","SelectCustomerForm","SelectObjValue","FormAddBoxOrder","required","enableReinitialize","handleSubmit","AddOrder","currentBox","res","resetForm","SelectBox","getOptions","ClassifyBox","f5DataSFA","boxDetail","f5DataBox","fetchBox","appends","handleSelectBox","ClassifyDetail","payload","replace","fetchSFA","createBoxSuccess","StorageBoxPage","exact","to","SelectSFA","sfaList","makeOption","x","selectedOption","SelectTracking","trackingList","SelectLadingBill","ladingBillList","ladingBill","customerId","customer_id","createdAt","ladingBillOptions","fetchLadingBills","SelectInvoice","invoiceList","invoice","fetchInvoices","dateFormatter","FilterList","dashboard","location","useLocation","searchParsed","queryString","newFilter","startDate","endDate","date","dashboardAction","changeFilter","fetchDashboardBoxes","handleChangeFilter","handleDateChange","newDate","format","selected","maxDate","dateFormat","minDate","resetFilter","resetBoxes","parsedFilter","visuallyHidden","border","clip","margin","overflow","padding","position","WaypointTable","rows","lastpage","additionalActions","onSort","rowKey","noSTT","order","setOrder","orderBy","setOrderBy","tableRowKey","isAction","isSort","TableSortLabel","direction","property","orderByTemp","handleSort","disablePadding","action","Fragment","handleViewEdit","onEnter","absolute","hideLoadingText","defaultProps","isPagination","isDelete","isViewEdit","TableSKU","locationSearch","COLUMNS","sku","gotoPerformEntry","getQuantityBoxInWarehouse","getQuantityProductInBox","inWH","total","pivot_pallets","pivotPallet","pallet","floor","current_quantity","shelve_id","boxLadingBills","ladingBillsList","prevValue","curOwner","box_lading_bills","listLadingBillsOfCurOwner","lading_bill","l_lb","gotoLadingBill","containers","container","cIdx","gotoContainer","shipping_date","quantity_inventory","quantityProduct","find","activeColumns","window","open","useColumns","changePage","FilterJancodeExtraData","product","setProduct","productApi","fetchProductById","finally","getTotalItems","jancode","curBox","itemInBox","getQuantityBoxInWH","quantityOutWH","oP","oC","getQuantityItemsInWH","images","alt","price","ingredients","FilterExtraData","SFACreatedToday","setTotal","getDataSFA","SFA","BoxCreatedToday","getDataBox","fetchBoxs","TrackingWillComingToday","trackingApi","fetchTracking","RequestPackingBox","JobCheckingList","WHDashboard","getCurrentContainer","createSelector","require","downContainer","currentContainer","listInvoices","currentContainerIdx","getTargetBoxes","targetBoxes","lading_bills","owning_box","out","in_pickers","out_pickers","InputAddInvoice","addInvoice","listColors","TargetBoxes","countRendering","labelPrefix","onRemoveTarget","shuffleColorList","shuffle","background","rIdx","hex","result","exec","parseInt","hexToRgba","getBGColor","aria-hidden","bIdx","boxId","TargetSection","downContainerAction","removeInvoiceByIdx","getDownContMessages","process","message","allMessages","m","getcurrentPallet","currentPallet","listPallets","currentPalletIdx","TEMPLATE_DATA","pageSize","palletId","sfaId","region","startIndex","locationId","createdDate","itemQuantity","sfaQuantity","getTemplateData","applyDataToTemplate","obj","newObj","k","toString","InputAddData","inputRef","canDownCont","listPalletType","palletType","fetchPalletTypes","addPallet","fetchPallet","loadBox","loadUpBox","pallet_id","warning","addNewPallet","blur","type_id","startPrinter","useInputAdd","useScanBarcode","condition","handleScanEnter","isSKUCode","isPalletCode","isDisabledInput","SelectLocation","defaultQuery","locationList","shelve_info","shelve","area_name","area","locationOptions","isLocationCode","getParams","myParams","fetchLocations","SelectLocationForm","savePalletSchema","location_id","FormSelectLocation","toggleFormSelected","criteria","variant","CustomShelveSelect","inputValue","setInputValue","area_id","searchJoin","fetchShelves","dispatchToState","selectValue","FormAddLocation","areaList","fetchAreas","FormCreateLocation","sortedBy","ModalSavePallet","formSelected","setFormSelected","formSelectLocationRef","setValues","SelectPalletType","palletTypeList","max_volume","max_weight","palletTypeOptions","ListPallet","modalSavePallet","setModalSavePallet","quantity_boxes","handleChangePalletType","ProgressBar","now","boxes_volume","max","boxes_weight","MessageTypePallet","messageString","time","EditableText","text","suffix","isEdit","setIsEdit","toggleEdit","defaultValue","MessageTypeNotify","onRemove","onEdit","isCanUpdate","isCanDelete","transObj","newQuantity","MessageTypeBox","IOMessage","messages","permissions","messageItems","ProcessSection","messageKey","outContainerPicker","removeBoxByPickerId","updateBoxQuantity","ContainerStatus","setCurrentContainer","cutOffVolumeInContainer","volume","cutOffWeightInContainer","currentVolumeInContainer","outVolume","currentWeightInContainer","outWeight","getValueSelect","handleCutOff","pivot_boxes","pivotBox","updatePivotBox","createPivotBox","palletBoxes","selectedInvoice","resetSlice","weight","animated","DownContainer","useGoodsDeliveryDetail","fetchGoodsDelivery","GrBtnEdit","onCancel","SelectDeliveryPartners","deliveries","deliveryPartner","fetchDeliveryPartners","SelectDeliveryPartnerForm","SelectGoodsDeliveryStatus","listGoodsDeliveryStatus","goodsDeliveryStatus","fetchGoodsDeliveryStatuses","SelectGoodsDeliveryStatusForm","SelectShipmentInfo","shipmentInfoList","shipmentInfo","consignee","address","fetchShipmentInfo","SelectShipmentInfoForm","isDisabled","helpers","FormAddGoodsDelivery","partner_id","status_id","shipping_cost","shipment_info_id","formItemClassName","showStatus","shouldUpdate","GoodsDeliveryInfo","goodsDelivery","getGoodsDeliveryDetail","NotFound","CustomTable","minWidth","newPage","ModalConfirm","onOk","setShow","setData","setTitle","refData","handleHide","dataTable","modalConfirmRef","dispatchUpdateQuantity","availableQuantity","box_lading_bill","quantity_avaliable_in_goods_delivery","goodsDeliveryBoxes","confirmDeleteBoxItem","TableGoodsDeliveryBoxes","SelectLadingBillForm","onChangePage","boxIdxInListChecked","findIndex","handleQuantityChange","boxIdx","newChecked","List","labelId","ListItem","role","dense","button","currentIndex","splice","ListItemIcon","Checkbox","edge","checked","tabIndex","disableRipple","inputProps","FormContent","ladingBillId","setBoxes","setPagination","getBoxLadingBills","boxLadingBill","fetchBoxLadingBills","last_page","setPage","useBoxLadingBill","lading_bill_id","FormAddBoxToGoodsDelivery","AddBoxToGoodsDelivery","Promise","all","box_lading_bill_id","goods_delivery_id","GoodsDeliveryBoxes","GoodsDeliveryDetail","TableGoodsDeliveries","partner_name","pivot","goodsDeliveryAction","GoodsDeliveryFilter","handleCustomerChange","CreateGoodsDelivery","ListGoodsDelivery","getDataGoodsDelivery","fetchGoodsDeliveries","useGoodsDeliveryList","createLadingBillSuccess","TabPanel","other","hidden","SimpleTabs","labels","tabContent","Children","child","cloneElement","Tabs","aria-label","Tab","TableDeliveryPartner","handlePageChange","deliveryPartnerAction","delivery_partner_id","FormAddArea","autoComplete","ModalCreateDeliveryPartner","editMode","setInitialValues","setInitialData","createDeliveryPartner","updateDeliveryPartner","DeliveryPartners","modalEditRef","f5Data","openModalCreate","openModalUpdate","GDTabContent","GoodsDelivery","currenyUnit","productItemColumns","amount","is_box","InboundPlanItem","iconUrl","code","order_items","ListInboundPlan","checkedData","trackingItem","ListTracking","purchase","ListTrackingFilter","Date","selectedDate","setSelectedDate","setParams","val","popperPlacement","convertObjectDateToString","formater","tempV","TrackingLabel","anchorEl","setAnchorEl","Boolean","currentTarget","Popover","onClose","anchorOrigin","vertical","horizontal","transformOrigin","createTracking","phoneRegExp","FormAddAgency","tel","matches","AgencyLabel","showModal","setShowModal","loadingModal","setLoadingModal","toggleModal","handleClose","fetchAgencies","TrackingInput","isScanTracking","setIsScanTracking","clickToggle","canTypeOnInput","FormCreateSFA","shipping_inside","np","TrackingPickedSection","trackingPickedCount","setTrackingPickedCount","setSfa","trackingCode","canEditSFA","canCreateSFA","barcode","handleReceiveTracking","debounceUpdateSFA","updateSFA","getOrCreateSFA","currentSFA","InboundPlanPage","TableInvoiceList","shipment_method","day_of_week","vanning_date","departure_date","cut_off_date","shipping_cost_per_unit","useColumn","rowId","invoice_id","invoiceAction","SelectContainerType","containerTypeList","containerType","shipment_method_name","containerTypeOptions","fetchContainerTypes","SelectContainerTypeForm","FormAddInvoice","isShowCutOff","CreateInvoice","DatePicker","InvoiceFilter","shipmentMethods","shipmentMethod","InvoiceList","handleCreateInvoiceSuccess","InvoiceInfo","invoiceDetail","getInitialValue","isValid","fetchInvoice","FormEditInvoiceCost","InvoiceCostInfo","TableLadingBill","balance","shipping_inside_cost","additional_cost","round","storage_cost","lb_id","AddLadingBill","addLadingBillSchema","LadingBillList","InvoiceDetailPage","OutOfStockPage","TableLadingBillList","shipment_method_id","ladingBillAction","orderList","setChecked","orderSelected","setOrderSelected","searchOrder","fetchOrder","fetchBoxOwners","personalOption","type_name","status_name","orderOptions","getValue","matchedOrder","avalableQuantity","ladingBillBox","quantity_in_lading_bills","handleSearch","boxOwnerAction","resetParams","FormAddLadingBill","desired_container_type_id","CreateLadingBill","handleCreateLadingBill","updateMultiBox","owning_box_id","LadingBillFilter","getLadingBillsData","FormEditLadingBill","LadingBillInfo","ladingBillDetail","desired_date","fetchLadingBill","getBoxes","owning_boxes","FormAddBoxLadingBill","AddBoxToLadingBill","quantity_avaliable_for_owners","handlePressInputStorageCost","handlePressInputAdditionalCost","TableBoxInLadingBill","LadingBillBox","FormEditLadingBillCost","LadingBillCostInfo","LadingBillDetail","f5LadingBillDetail","LadingBillPage","ErrorPage","loadUpContainer","matchedInvoice","loadUpContainerAction","isContainerCutOff","isSameOrBefore","getUpContMessages","useLoadUp","modalSelectPalletRef","inContainerPicker","container_id","loadUpBoxSuccess","SelectPallet","defaultParams","palletList","pallet_info","palletOptions","fetchOptions","fetchPallets","ModalSelectPallet","setBoxId","palletSelected","canLoadUpContainer","loadUpPallet","containerCutOff","cutOffContainer","LoadUpContainer","outBoundPicker","canOutboundVN","pickBox","outBoundPickerAction","out_bound_pickers","SelectGoodsDelivery","goodsDeliveries","InputAddGoodsDelivery","pickGoodsDelivery","OutBoundPicker","PackPage","EditSFA","closeSection","DropdownButton","Dropdown","Toggle","as","Menu","Item","file","FormAddReceipt","files","EditReceipt","formData","FormData","set","receipt","receiptId","useCRUDReceipt","createReceipt","deleteReceipt","receipts","path_file","handleDownload","confirmDeleteReceipt","ShowTrackingBarcode","textPosition","CurrentSFA","showExtraPanel","setShowExtraPanel","extraPanelContent","setExtraPanelContent","agencyList","toggleFormEdit","toggleReceiptEdit","toggleTrackingBarcode","matchedAgency","agency_id","PerformStep","steps","performEntry","activeStep","matchedStep","pathname","split","pop","Stepper","alternativeLabel","Step","StepLabel","CreateSFA","isCallPrinterPrint","setIsCallPrinter","handleCOUSFA","createSFA","printAndGoNext","goToStep2","coupon","FormControlLabel","control","Switch","ModalConfirmNextStep","openModal","CurrentBox","totalItems","volume_per_box","playAudio","Audio","play","useBoxItem","listBoxItems","checking_goods","box_items","canAddBoxItem","createOrUpdateBoxItem","performEntryAction","addBoxItem","handleAddBoxItem","product_id","productVolume","package","isBoxCanIncludeProduct","continueAddProduct","updateBoxItem","rowIdx","newData","updateQuantityBoxItem","updateExpiryDateBoxItem","expiry_date","deleteBoxItem","deleteBoxIem","isRespectRedux","boxItem","closeBoxItems","sumListBoxItems","fetchBoxItemsOfCurrentBox","DialogNewProduct","tags","setTags","defaultSrc","setDefaultSrc","unitList","unit","tax","taxList","origin","originList","useForm","resolver","yupResolver","register","useFileUpload","selectFiles","fetchOrigin","fetchUnit","fetchTax","taxSelect","originSelect","unitSelect","origin_id","unit_id","tax_id","image_url","createProductWithImg","createProductFunc","createProductImageFile","createProduct","accept","data-toggle","data-placement","source","backgroundColor","aria-describedby","urlImage","exampleRequired","editable","readOnly","newTags","allowDuplicates","AddProduct","showMd","setShowMd","memo","useClickOutside","elRef","callback","callbackRef","handleOutClick","contains","isParsedNumber","isNaN","ACProductInput","withFeedbackLabel","customFeedbackLabel","prevSearchText","setPrevSearchText","visibleAC","setVisibleAC","loadingAC","setLoadingAC","dataAC","setDataAC","containerRef","callApiGetProduct","fetchProduct","setInputData","handleClickProduct","FormAddBoxItem","AddBoxItem","formatMoment","ListBoxItems","onUpdate","canUpdateBoxItems","centered","dateObj","handleChangeExpiryDate","confirmDelete","TableBoxItem","apiLoading","isCheckingGoods","is_checking","tableBoxItemRef","scrollIntoView","minHeight","Alert","severity","AlertTitle","CheckingBox","sfaRef","dataSend","CustomEvent","dispatchEvent","confirmStep2","f5BoxData","updateBoxSuccess","f5SFAData","CreateBoxSection","CheckTheGoods","PalletItem","onSelect","storage","uniquifyIDs","InputAddPallet","onAdd","onAddNew","ListPallets","onAddPallet","pallets","handleSavePalletSuccess","palletData","matchedPalletIdx","newListPallets","setListPallets","matchedPalletInList","addPalletToList","setCurrentPallet","inputAddSKURef","inputChangePivotRef","boxRef","updatePalletData","resetStorage","addBoxToPallet","boxID","getQuantityBoxWithCurrentPallet","boxPallet","handlePressInputQuantity","callApiChangePivot","updateCurrentPallet","erorr","quantityOnPallet","palletBox","handleRemoveBoxOutPallet","StorageBox","palletsPagination","getAllPalletIDFromBoxList","setListPalletsPage","useF5SFA","ParentBox","showModalUpdateBox","setShowModalUpdateBox","listTempBox","packaging","childrens","inputParentRef","inputPackingCostRef","canMakeBoxRelative","canUpdateBox","toggleModalUpdateBox","callApiGetParent","mapTempChildToParentBox","removeTempChildBox","handleCreateBoxSuccess","currentChildVolume","handleSavePackingCost","packing_cost_per_box","boxAction","setBoxDetailData","FormAddChild","BarcodeInput","submitOnEnter","ModalNotEnoughVolume","toggle","newChildId","dangerouslySetInnerHTML","__html","child_id","AddChilds","modalRef","handleAddChild","isEnoughVolumeForNewBox","checkedRes","addChild","childBox","addTempChildBox","availableCurrentBoxVolume","boxChildsVolume","TableBoxChilds","listAgency","child_quantity","handleChangeChildQuantity","handleRemoveBoxChild","childId","callApiRemoveChildBox","decouple","askUserToPrintLabel","duplicated","ChildrenBoxes","Packaging","PackagingProduct","PerformEntryPage","DefaultAgency","default_agency","settingsAction","changeDefaultAgency","matchedDefaultAgency","selectOptions","selectedOptions","PrinterSettings","ipServer","setIPServer","dispatchValueToRedux","changePrinterSocketServer","websocket","close","ip","TableLocationList","handleRePrintLabel","sortedDataTable","SelectArea","areaOptions","ModalAddLocation","SelectShelve","shelveList","shelveOptions","LocationManagament","selectedArea","setSelectedArea","selectedShelve","setSelectedShelve","areaId","shelveId","setDataTable","getLocationsByAreaId","getLocationsByShelveId","fetchArea","shelves","locations","l","fetchShelve","useLocationList","ModalCreateLocation","FormAddPalletType","max_width","max_height","max_length","ModalCreatePalletType","createPalletType","updatePalletType","TablePalletTypes","pallet_type_id","PalletType","modalEditPalletTypeRef","TableArea","ModalCreateArea","triggerSubmit","updateArea","createArea","AreaManagement","modalEditAreaRef","handleOpenEditArea","handleOpenCreateArea","TableShelve","shelveAction","SelectAreaForm","FormAddShelve","ModalCreateShelve","updateShelve","createShelve","ShelveManagement","handleOpenEdit","handleOpenModalCreate","TableContainerTypes","d_o_w","getDateOfWeekByNumber","container_type_id","SelectDateOfWeek","SelectDateOfWeekForm","SelectShipmentMethod","shipmentMethodList","fetchShipmentMethods","SelectShipmentMethodForm","FormAddContainerType","to_area_id","ModalCreateContainerType","updateContainertype","createContainertype","FormAddShipmentMethod","fee","ModalCreateShipmentMethod","createShipmentMethod","updateShipmentMethod","TableShipmentMethods","ShipmentMethodManagement","NotHavePermission","SettingPage","ContainerTypeManagement","FormDirectStorage","locationLabel","handleCreateLocationSuccess","DirectStorage","canUpdatePallet","StorageSFAPage","FilterSection","whModel","whModelAction","fetchShelvesForWHModel","fetchShelveFromArea","newFP","initialContext","showPallet","setShowPallet","setPallet","DetailPalletContext","createContext","DetailPalletProvider","Provider","useDetailPallet","useContext","togglePalletDetail","isActive","setIsActive","routerLocation","totalBoxesInPallet","LocationItem","locationData","setLocationData","fetchLocation","LocationGrid","groupRow","groupBy","maxRow","maxBy","renderColumnLocation","rowLocations","maxColumn","range","columnIdx","PalletDetail","selectedBox","setSelectedBox","iIdx","ShelveItem","areaName","shelveItemData","setShelveItemData","groupFloor","lIdx","floorLocations","keys","WarehouseModel","sIdx","WarehousePage","auth","warehouseRole","ROLES","WAREHOUSE","saleRole","SALE","allRole","ADMIN","ROOT","checkRedirect","checkSaleRedirect","DialogNotify","LoadUpContainerPage","InvoicePage","WarehouseModelPage","ClassifyBoxPage","SettingsPage"],"mappings":"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","file":"static/js/7.50128589.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Modal } from 'react-bootstrap';\nimport { FormattedMessage } from 'react-intl';\nimport Loading from './Loading';\n\nCustomDialogConfirm.propTypes = {\n    show: PropTypes.bool,\n    onHide: PropTypes.func,\n    onDelete: PropTypes.func,\n    title: PropTypes.string,\n    content: PropTypes.string,\n    isLoading: PropTypes.bool\n};\n\nfunction CustomDialogConfirm({\n    show = false,\n    onHide = null,\n    onDelete = null,\n    title = 'Confirm Delete',\n    content = 'Are you sure?',\n    isLoading = false\n}) {\n    return (\n        <Modal\n            show={show}\n            onHide={onHide}\n            aria-labelledby=\"example-modal-sizes-title-lg\"\n        >\n            {/*begin::Loading*/}\n            {isLoading && <Loading />}\n            {/*end::Loading*/}\n            <Modal.Header closeButton>\n                <Modal.Title id=\"example-modal-sizes-title-lg\">\n                    {title}\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <span>{content}</span>\n            </Modal.Body>\n            <Modal.Footer>\n                <div>\n                    <button\n                        type=\"button\"\n                        onClick={onHide}\n                        className=\"btn btn-light btn-elevate\"\n                    >\n                        <FormattedMessage id=\"GLOBAL.BUTTON.CANCEL\" />\n                    </button>\n                    <> </>\n                    <button\n                        type=\"button\"\n                        onClick={onDelete}\n                        className=\"btn btn-primary btn-elevate\"\n                    >\n                        <FormattedMessage id=\"GLOBAL.BUTTON.DELETE\" />\n                    </button>\n                </div>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nexport default CustomDialogConfirm;\n","import { Divider } from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {\n    Card,\n    CardHeader,\n    CardHeaderToolbar\n} from '_metronic/_partials/controls';\n\nTopHeader.propTypes = {\n    title: PropTypes.any,\n    toolbar: PropTypes.any\n};\n\nfunction TopHeader({ title = '', toolbar }) {\n    return (\n        <Card>\n            <Divider />\n            <CardHeader title={title}>\n                <CardHeaderToolbar>{toolbar}</CardHeaderToolbar>\n            </CardHeader>\n        </Card>\n    );\n}\n\nexport default TopHeader;\n","import React from 'react';\nimport TopHeader from './TopHeader';\n\nimport './index.scss';\n\nconst Layout = ({ title, toolbar, children }) => {\n    return (\n        <div className=\"warehouse-layout\">\n            <TopHeader title={title} toolbar={toolbar} />\n\n            <div className=\"px-5 pb-5\">\n                {children}\n            </div>\n        </div>\n    );\n};\n\nLayout.propTypes = {\n\n};\n\nexport default Layout;","import React, { useCallback, useState, forwardRef, useImperativeHandle, useMemo } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport _ from 'lodash';\nimport useTrans from 'helper/useTrans';\n\n\n\nconst SFAFilter = ({ onSearch, searchAll = true }, ref) => {\n\n    const [searchText, setSearchText] = useState('');\n    const [trans] = useTrans();\n\n    const fields = useMemo(() => ([\n        { id: 'id', title: trans(\"warehouse.sfa.id\") },\n        { id: 'tracking', title: trans(\"warehouse.tracking.id\") },\n        { id: 'agency_id', title: trans(\"common.agency\") },\n    ]), [trans]);\n\n    const [searchField, setSearchField] = useState(searchAll ? '' : fields?.[0]?.id);\n    const agencies = useSelector(state => state.warehouse.agency.list);\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const dispatchSearch = useCallback(_.debounce((_searchText, _searchField) => {\n        if (_searchField.length && _searchText.length) {\n            onSearch && onSearch({ search: `${_searchField}:${_searchText}`, searchFields: `${_searchField}:like` });\n        } else {\n            onSearch && onSearch({ search: _searchText });\n        }\n    }, 700), []);\n\n    useImperativeHandle(ref, () => ({\n        reset: () => {\n            setSearchText('');\n            setSearchField(searchAll ? '' : fields?.[0]?.id);\n        }\n    }))\n\n    const handleSearchTextChange = (e) => {\n        setSearchText(e.target.value);\n\n        dispatchSearch(e.target.value, searchField);\n    }\n\n    const handleSearchFieldChange = (e) => {\n        setSearchField(e.target.value);\n\n        if (searchText.length) {\n            setSearchText('');\n            dispatchSearch('', e.target.value);\n        }\n    }\n\n    const getSearchFieldCpn = useMemo(() => {\n        if (searchField === 'agency_id')\n            return (\n                <select onChange={handleSearchTextChange} className=\"form-control\">\n                    <option value=\"\">{trans('common.all')}</option>\n                    {agencies.map((agency, idx) => (\n                        <option value={agency.id} key={`agency-idx-${idx}`}>{agency.name}</option>\n                    ))}\n                </select>\n            )\n\n        return (\n            <input\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"Search\"\n                onChange={handleSearchTextChange}\n                value={searchText}\n            />\n        )\n    }, [searchField, searchText, agencies]); // eslint-disable-line\n\n    return (\n        <div className=\"d-flex custom-filter-warehouse\">\n            <div className=\"p-3\">\n                <select name=\"searchField\" id=\"searchField\" className=\"form-control\" onChange={handleSearchFieldChange} value={searchField}>\n                    {searchAll ? (<option value=\"\">{trans('common.all')}</option>) : ''}\n                    {(fields || []).map((f, idx) => (\n                        <option value={f.id} key={`search-field-${idx}`}>{f.title}</option>\n                    ))}\n                </select>\n            </div>\n            <div className=\"p-3 flex-grow-1\">\n                {getSearchFieldCpn}\n            </div>\n        </div>\n    );\n};\n\nexport default forwardRef(SFAFilter);","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst AdditionalTypeBox = ({ sfa }) => {\n\n    return (\n        <div className=\"sfa-list-box\">\n            {!!sfa?.boxes?.length && sfa.boxes.map((box) => (\n                <div className=\"sfa-box-item\" key={`box-${box.id}`}>\n                    <div className=\"sfa-box-item--id\">{box.id}</div>\n                    <div className=\"sfa-box-item--duplicate success\">{box.duplicate}</div>\n                </div>\n            ))}\n        </div>\n    );\n};\n\nAdditionalTypeBox.propTypes = {\n    sfa: PropTypes.any\n};\n\nexport default AdditionalTypeBox;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { toAbsoluteUrl } from '_metronic/_helpers';\n\nimport SVG from 'react-inlinesvg';\n\nconst AdditionalTypeStorage = ({ sfa }) => {\n\n    return (\n        <div className=\"sfa-list-box\">\n            {!!sfa?.boxes?.length && sfa.boxes.map((box) => (\n                <div className=\"sfa-box-item\" key={`box-${box.id}`}>\n                    <div className=\"sfa-box-item--id\">{box.id}</div>\n                    {!!box.quantity_available_in_pallet ? (\n                        <div className=\"sfa-box-item--duplicate\">{box.quantity_available_in_pallet}</div>\n                    ) : (\n                        <span className=\"svg-icon svg-icon-success\">\n                            <SVG\n                                src={toAbsoluteUrl(\n                                    '/media/svg/icons/Navigation/Double-check.svg'\n                                )}\n                            ></SVG>\n                        </span>\n                    )}\n                </div>\n            ))}\n        </div>\n    );\n};\n\nAdditionalTypeStorage.propTypes = {\n    sfa: PropTypes.any\n};\n\nexport default AdditionalTypeStorage;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { toAbsoluteUrl } from '_metronic/_helpers';\n\nimport SVG from 'react-inlinesvg';\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport useTrans from 'helper/useTrans';\n\nconst OrderList = ({ box }) => {\n    const [trans] = useTrans();\n\n    if (!box?.owners?.length) return <div className=\"sfa-box-item--id\">{box.id}</div>;\n\n    return (\n        <OverlayTrigger\n            key={'order'}\n            placement={'top'}\n            overlay={\n                <Tooltip className=\"owner-tooltip\">\n                    <div className=\"owner-list\">\n                        {box.owners.map((owner, ownerIdx) => (\n                            <div className=\"owner-item\" key={`owner-${ownerIdx}`}>\n                                <div className=\"owner-obj\">\n                                    {owner.objectable_type === 'order' && trans(\"ORDER.SHIPMENT.TABLE_ID\")}\n                                &nbsp;{owner.objectable_id}\n                                </div>\n                                <div className=\"owner-quantity\">{owner.quantity}</div>\n                            </div>\n                        ))}\n                    </div>\n                </Tooltip>\n            }\n        >\n            <div className=\"sfa-box-item--id cursor-pointer\">{box.id}</div>\n        </OverlayTrigger>\n    )\n}\n\nconst AdditionalTypeOrder = ({ sfa }) => {\n    return (\n        <div className=\"sfa-list-box\">\n            {!!sfa?.boxes?.length && sfa.boxes.map((box) => (\n                <div className=\"sfa-box-item\" key={`box-${box.id}`}>\n                    <OrderList box={box} />\n                    {!!(box.duplicate - Number(box.quantity_of_owners)) ? (\n                        <div className=\"sfa-box-item--duplicate\">{box.duplicate - box.quantity_of_owners}</div>\n                    ) : (\n                        <span className=\"svg-icon svg-icon-success\">\n                            <SVG\n                                src={toAbsoluteUrl(\n                                    '/media/svg/icons/Navigation/Double-check.svg'\n                                )}\n                            ></SVG>\n                        </span>\n                    )}\n                </div>\n            ))}\n        </div>\n    );\n};\n\nAdditionalTypeOrder.propTypes = {\n    sfa: PropTypes.any\n};\n\nexport default AdditionalTypeOrder;","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport clsx from 'clsx';\nimport useTrans from 'helper/useTrans';\nimport { toAbsoluteUrl } from '_metronic/_helpers';\n\nimport SVG from 'react-inlinesvg';\nimport { Card, CardBody } from '_metronic/_partials/controls';\nimport AdditionalTypeBox from './AdditionalTypeBox';\nimport AdditionalTypeStorage from './AdditionalTypeStorage';\nimport AdditionalTypeOrder from './AdditionalTypeOrder';\n\nimport './index.scss';\n\nconst SFAItem = ({\n    sfa,\n    type,\n    onRedirect\n}) => {\n\n    const [trans] = useTrans();\n\n    const totalSku = useMemo(() => {\n\n        if (!sfa?.boxes?.length) return 0;\n\n        return sfa.boxes.reduce((prevV, curV) => prevV + curV.duplicate, 0);\n    }, [sfa]);\n\n    const totalBoxOnPallet = useMemo(() => {\n        if (!sfa?.boxes?.length) return 0;\n\n        return totalSku - sfa.boxes.reduce((prevV, curV) => {\n\n            return prevV + curV.quantity_available_in_pallet;\n        }, 0);\n    }, [sfa, totalSku]);\n\n    const totalHaveOrder = useMemo(() => {\n        if (!sfa?.boxes?.length) return 0;\n\n        return sfa.boxes.reduce((prevV, curV) => {\n            return prevV + Number(curV.quantity_of_owners);\n        }, 0);\n    }, [sfa]);\n\n    const handleRedirect = () => {\n        onRedirect && onRedirect(sfa.id);\n    }\n\n    const quantityRender = useMemo(() => {\n        if (type === 'box')\n            return (\n                <div className=\"sfa-info--quantity-status\">\n                    <span className={clsx(totalSku < sfa?.quantity ? 'text-danger' : 'text-success')}>{totalSku}</span> / <span className=\"text-success\">{sfa?.quantity}</span>\n                </div>\n            )\n\n        if (type === 'storage')\n            return (\n                <div className=\"sfa-info--quantity-status\">\n                    <span className={clsx(totalBoxOnPallet < totalSku ? 'text-danger' : 'text-success')}>{totalBoxOnPallet}</span> / <span className=\"text-success\">{totalSku}</span>\n                </div>\n            )\n\n        if (type === 'order')\n            return (\n                <div className=\"sfa-info--quantity-status\">\n                    <span className={clsx(totalHaveOrder < totalSku ? 'text-danger' : 'text-success')}>{totalHaveOrder}</span> / <span className=\"text-success\">{totalSku}</span>\n                </div>\n            )\n\n        return <></>\n    }, [type, sfa?.quantity, totalSku, totalBoxOnPallet, totalHaveOrder]);\n\n    const addionalRender = useMemo(() => {\n        if (type === 'box') return <AdditionalTypeBox sfa={sfa} />;\n\n        if (type === 'storage') return <AdditionalTypeStorage sfa={sfa} />;\n\n        if (type === 'order') return <AdditionalTypeOrder sfa={sfa} />;\n\n        return <></>\n    }, [type, sfa]);\n\n    return (\n        <Card className=\"sfa-item\">\n            <CardBody>\n                <div className=\"sfa-info\">\n                    <div className=\"sfa-head\" onClick={handleRedirect}>\n                        <div className=\"sfa-info--id\">\n                            {sfa?.id}\n                            <span className=\"svg-icon svg-icon-primary svg-icon-2x redirect-icon\">\n                                <SVG\n                                    src={toAbsoluteUrl(\n                                        '/media/svg/icons/Navigation/Arrow-right.svg'\n                                    )}\n                                ></SVG>\n                            </span>\n                        </div>\n                    </div>\n\n                    <div className=\"sfa-info--arrival_date\">{trans(\"warehouse.sfa.arrival_date.title\")}: <b>{sfa?.arrival_date}</b></div>\n                    <div className=\"sfa-info--tracking\">{trans(\"warehouse.tracking.title\")}: <b>{sfa?.tracking}</b></div>\n                    <div className=\"d-flex justify-content-between\">\n                        <div className=\"sfa-info--agency\"><b>{sfa?.agency?.name}</b></div>\n                        {quantityRender}\n                    </div>\n                </div>\n\n                {addionalRender}\n            </CardBody>\n        </Card>\n    );\n};\n\nSFAItem.propTypes = {\n    sfa: PropTypes.any\n};\n\nexport default SFAItem;","import React, { useEffect, useMemo, useRef } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { fetchSFAs, sfaAction } from 'app/modules/Warehouse/warehouse-redux/sfaSlice';\nimport _ from 'lodash';\nimport moment from 'moment';\n\nimport {\n    Card,\n    CardBody,\n} from '_metronic/_partials/controls';\nimport SFAFilter from 'app/modules/Warehouse/components/Filter/SFAFilter';\nimport Loading from 'app/components/Loading';\nimport useTrans from 'helper/useTrans';\nimport SFAItem from './SFAItem';\nimport { Pagination } from '@material-ui/lab';\n\nimport './index.scss';\nimport NeedPermission from 'app/components/NeedPermission';\n\n/**\n * \n * @param {*} type one of ['box', 'storage', 'order', 'pack'] \n * @returns \n */\n\nconst ListSFAForInbound = ({ onViewEdit, type }) => {\n    const { pagination, loading, data } = useSelector(\n        state => state.warehouse.sfa.list\n    );\n    const history = useHistory();\n    const dispatch = useDispatch();\n    const filterRef = useRef();\n    const [trans] = useTrans();\n\n    const fetchData = (additionalParams) => {\n\n        let withParams = 'agency';\n\n        if (type === 'box') withParams += ';boxes';\n        if (type === 'storage') withParams += ';boxes'\n        if (type === 'order') withParams += ';boxes.owners'\n\n        dispatch(fetchSFAs({ page: pagination.page, with: withParams, ...additionalParams }));\n    }\n\n    useEffect(() => {\n        fetchData();\n    }, [pagination.page]); // eslint-disable-line\n\n    const handleSubmitSearch = searchData => {\n        fetchData(searchData);\n    };\n\n    const createNewSfa = () => {\n        history.push(`/warehouse/inbound/step-1`);\n    }\n\n    const handlePageChange = (evt, page) => {\n        dispatch(sfaAction.changePagination({ page }))\n    }\n\n    const sortedData = useMemo(() => {\n\n        /** Đưa những sfa chưa nhập xong sku lên trước */\n        if (type === 'box') {\n            return _.sortBy(data, [(o) => {\n\n                if (!o?.boxes) return 0;\n\n                let totalSku = o.boxes.reduce((p, c) => p + c.duplicate, 0);\n\n                return totalSku >= o.quantity;\n            }], (o) => moment(o.created_at).toDate())\n        }\n\n        /** Đưa những sfa chưa lưu xong sku lên trước */\n        if (type === 'storage') {\n            return _.sortBy(data, [(o) => {\n\n                if (!o?.boxes) return 0;\n\n                let totalOnPallet = o.boxes.reduce((p, c) => p + c.quantity_available_in_pallet, 0);\n\n                return totalOnPallet === 0;\n            }], (o) => moment(o.created_at).toDate())\n        }\n\n        /** Đưa những sfa chưa phân hàng cho sku lên trước */\n        if (type === 'order') {\n            return _.sortBy(data, [(o) => {\n\n                if (!o?.boxes) return 0;\n\n                let totalSku = o.boxes.reduce((p, c) => p + c.duplicate, 0);\n                let totalHaveOrder = o.boxes.reduce((p, c) => p + c.quantity_of_owners, 0);\n\n                return totalHaveOrder >= totalSku;\n            }], (o) => moment(o.created_at).toDate())\n        }\n\n        return data;\n    }, [data, type]);\n\n    return (\n        <div className=\"list-sfa-for-inbound\">\n            <Card className=\"head-card\">\n                <CardBody className=\"position-relative\">\n                    {loading && <Loading local />}\n                    <div className=\"action-section\">\n                        <SFAFilter ref={filterRef} onSearch={handleSubmitSearch} />\n                        <NeedPermission need={['sfas.create']}>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-primary\"\n                                onClick={createNewSfa}\n                            >\n                                {trans(\"warehouse.sfa.create.title\")}\n                            </button>\n                        </NeedPermission>\n                    </div>\n\n                    <Pagination\n                        count={pagination.lastPage}\n                        page={pagination.page}\n                        shape=\"rounded\"\n                        onChange={handlePageChange}\n                    />\n                </CardBody>\n            </Card>\n\n            <div className=\"row\">\n                {sortedData.map((sfa) => (\n                    <div className=\"col-lg-6 col-sm-12\" key={`sfa-${sfa.id}`}>\n                        <SFAItem\n                            sfa={sfa}\n                            type={type}\n                            onRedirect={onViewEdit}\n                        />\n                    </div>\n                ))}\n            </div>\n\n        </div>\n    );\n};\n\nListSFAForInbound.propTypes = {\n    onViewEdit: PropTypes.func\n};\n\nexport default ListSFAForInbound;","import React from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport ListSFAForInbound from '../../components/List/ListSFAForInbound';\n\nconst TableSFAs = props => {\n    const history = useHistory();\n\n    const gotoDetail = (sfaID) => {\n        history.push(`/warehouse/inbound/step-2/${sfaID}`)\n    }\n\n    return (\n        <ListSFAForInbound onViewEdit={gotoDetail} type=\"box\" />\n    );\n};\n\nTableSFAs.propTypes = {\n\n};\n\nexport default TableSFAs;","import useTrans from 'helper/useTrans';\nimport React from 'react';\nimport Layout from '../../components/Layout';\nimport TableSFAs from './TableSFAs';\n\nconst CheckSFAPage = props => {\n\n    const [trans] = useTrans();\n\n    return (\n        <Layout title={trans(\"MENU.WAREHOUSE.CHECKING_GOODS\")}>\n            <TableSFAs />\n        </Layout>\n    );\n};\n\nCheckSFAPage.propTypes = {\n    \n};\n\nexport default CheckSFAPage;","import React from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport ListSFAForInbound from '../../../components/List/ListSFAForInbound';\nimport Layout from 'app/modules/Warehouse/components/Layout';\nimport useTrans from 'helper/useTrans';\n\nconst TableSFAs = props => {\n    const history = useHistory();\n    const [trans] = useTrans();\n\n    const gotoDetail = (sfaID) => {\n        history.push(`/warehouse/classify-box/${sfaID}`)\n    }\n\n    return (\n        <Layout title={trans(\"MENU.WAREHOUSE.ASSIGN_BOXES\")}>\n            <ListSFAForInbound onViewEdit={gotoDetail} type=\"order\" />\n        </Layout>\n    );\n};\n\nTableSFAs.propTypes = {\n\n};\n\nexport default TableSFAs;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Card, CardBody } from '_metronic/_partials/controls';\nimport useTrans from 'helper/useTrans';\nimport NeedPermission from 'app/components/NeedPermission';\n\nconst EmptyDataContent = ({ focusModalCreateBox }) => {\n\n    const [trans] = useTrans();\n\n    return (\n        <Card className=\"step-2__empty-content\">\n            <CardBody>\n                <div className=\"empty-text\">{trans(\"warehouse.sku.empty\")}</div>\n\n                <div className=\"empty-actions\">\n                    <NeedPermission need={\"boxes.create\"}>\n                        <button type=\"button\" className=\"btn btn-outline-primary\" onClick={focusModalCreateBox}>{trans(\"warehouse.sku.create.title\")}</button>\n                    </NeedPermission>\n                </div>\n            </CardBody>\n        </Card>\n    );\n};\n\nEmptyDataContent.propTypes = {\n    focusModalCreateBox: PropTypes.func\n};\n\nexport default EmptyDataContent;","import _ from 'lodash';\n\nexport default function handleApiError(err, form) {\n    if (form) {\n        const errObj = _.get(err, ['response', 'errors']) || _.get(err, ['response', 'data', 'errors']);\n        let errorsObj = {};\n        \n        if (errObj) {\n            Object.entries(errObj).forEach(\n                ([kErr, vErr]) => {\n                    if(kErr === 'message') kErr = 'api';\n                    errorsObj[kErr] = vErr[0];\n                }\n            );\n        }\n\n        form.setErrors({\n            ...errorsObj,\n            api: _.get(err, ['response', 'data', 'message']) || _.get(err, ['response', 'data', 'errors', 'message'])\n        });\n    } else {\n        console.error(err);\n    }\n}","import React from 'react';\nimport { useFormikContext } from 'formik';\nimport _ from 'lodash';\n\nimport './index.scss';\n\nconst FormStatus = props => {\n    const { errors, status } = useFormikContext();\n\n    return (\n        <div>\n            {errors && _.has(errors, ['api']) && (\n                <div className=\"form-api-error py-3\">{_.get(errors, ['api'])}</div>\n            )}\n\n            {status && _.has(status, ['api']) && (\n                <div className=\"form-api-success py-3\">{_.get(status, ['api'])}</div>\n            )}\n        </div>\n    );\n};\n\nFormStatus.propTypes = {};\n\nexport default FormStatus;\n","import { useFormikContext } from 'formik';\nimport { useEffect } from 'react';\n\nconst focusableElementsNoneName = ['INPUT', 'SELECT'];\n\nexport default function useFormEnterIndex(ele) {\n\n    const { submitForm } = useFormikContext();\n\n    useEffect(() => {\n        if (ele?.current) {\n            ele.current.addEventListener('keydown', function (event) {\n                if ((event.keyCode === 13 || event.keyCode === 9) && focusableElementsNoneName.includes(event.target.nodeName)) {\n                    var form = event.target.form;\n                    var inputElements = Array.from(form.elements).filter(f => f.nodeName !== 'BUTTON' && !f.disabled);\n\n                    var index = Array.prototype.indexOf.call(\n                        inputElements,\n                        event.target\n                    );\n\n                    if (index === inputElements.length - 1) {\n                        submitForm();\n                    }\n\n                    for (\n                        let step = 1;\n                        step < inputElements?.length;\n                        step++\n                    ) {\n                        if (inputElements[index + step] && !inputElements[index + step]?.disabled) {\n                            inputElements[index + step].focus();\n                            break;\n                        }\n                    }\n\n                    event.preventDefault();\n                }\n            });\n        }\n    }, []); // eslint-disable-line\n}\n","import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Form } from 'formik';\nimport useFormEnterIndex from 'helper/useFormEnterIndex';\n\nconst FormEnterIndex = ({ enterIndex, children, ...props }) => {\n\n    const formRef = useRef();\n\n    useFormEnterIndex(formRef)\n\n    return (\n        <Form ref={formRef} {...props}>\n            {children}\n        </Form>\n    );\n};\n\nFormEnterIndex.propTypes = {\n    enterIndex: PropTypes.bool\n};\n\nexport default FormEnterIndex;","import { useCallback, useRef } from \"react\";\n\nimport { printerSocketConfig } from 'config/printerSocket';\nimport { useSelector } from \"react-redux\";\n\nfunction isJsonString(str) {\n    try {\n        JSON.parse(str);\n    } catch (e) {\n        return false;\n    }\n    return true;\n}\n\nexport default function useSocket({\n    onReceivedMessage\n}) {\n\n    const defaultIPServer = useSelector(state => state.warehouse.settings.printer.socketServer);\n    const socket = useRef();\n\n    const connect = useCallback((ipConnect) => {\n\n        let serverIP = ipConnect || defaultIPServer;\n\n        const sk = new WebSocket(serverIP + '?encoding=text', printerSocketConfig);\n        socket.current = sk;\n\n        socket.current.onerror = function (evt) {\n            socket.current = null;\n        };\n    }, [defaultIPServer]); // eslint-disable-line\n\n    const listenSocketConnectAndSendData = useCallback((d) => {\n        /** Đã có sẵn kết nối */\n        if (socket.current.readyState === 1) {\n            socket.current.send(d);\n        } else {\n            /** Chưa có sẵn kết nối */\n            socket.current.onopen = function () {\n                socket.current.send(d);\n            };\n        }\n    }, [defaultIPServer]); // eslint-disable-line\n\n    const listenSocketMessage = useCallback(() => {\n        socket.current.onmessage = function (evt) {\n\n            // Nếu data không thể parse từ JSON thì đó k phải là dữ liệu chúng ta cần\n            if (!isJsonString(evt?.data)) return;\n\n            const evtData = JSON.parse(evt.data) || {};\n\n            onReceivedMessage(evtData);\n        }\n    }, []); // eslint-disable-line\n\n    const send = useCallback((d) => {\n        if (!socket.current) {\n            connect(defaultIPServer);\n        }\n        listenSocketConnectAndSendData(d);\n        listenSocketMessage();\n    }, [connect, listenSocketConnectAndSendData, listenSocketMessage, defaultIPServer]); // eslint-disable-line\n\n    return [send];\n}","import React, { useEffect } from 'react';\n\nimport { Input } from '_metronic/_partials/controls';\nimport { FastField, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport FormStatus from '../FormStatus';\nimport Form from '../FormEnterIndex';\n\nimport useSocket from 'helper/useSocket';\nimport useTrans from 'helper/useTrans';\n\nimport './index.scss';\n\nconst objGetDWS = {\n    type: \"ReadDWS\"\n}\n\nconst FormUpdateBoxPhysicalInfo = ({\n    formItemClass = \"col-lg-6 col-md-6 mt-3\",\n    isHaveDuplicate = true,\n    onSubmit,\n    initialValues\n}, ref) => {\n\n    const [trans] = useTrans();\n    const [send] = useSocket({\n        onReceivedMessage: (socketData) => handleSocketData(socketData)\n    });\n\n    useEffect(() => {\n        send(JSON.stringify(objGetDWS));\n    }, []); // eslint-disable-line\n\n    const handleSocketData = (socketData) => {\n        console.log(socketData, 'handleSocketData')\n    }\n\n    const validationSchema = Yup.object().shape({\n        width: Yup.number().min(0, trans(\"validation.message.min\", { min: 0 })),\n        height: Yup.number().min(0, trans(\"validation.message.min\", { min: 0 })),\n        weight_per_box: Yup.number().min(0, trans(\"validation.message.min\", { min: 0 })),\n        length: Yup.number().min(0, trans(\"validation.message.min\", { min: 0 })),\n        duplicate: Yup.number().min(0, trans(\"validation.message.min\", { min: 0 })),\n    });\n\n    return (\n        <Formik\n            initialValues={initialValues}\n            validationSchema={validationSchema}\n            onSubmit={onSubmit}\n            innerRef={ref}\n        >\n            <Form className=\"form form-label-right form-update-box-info\">\n                <div className=\"form-group row\">\n                    <div className={formItemClass}>\n                        <FastField\n                            name=\"weight_per_box\"\n                            component={Input}\n                            label={trans(\"common.weight\")}\n                            placeholder={trans(\"common.weight\")}\n                            autoFocus\n                            type=\"number\"\n                            min={0}\n                        />\n                    </div>\n\n                    <div className={formItemClass}>\n                        <FastField\n                            name=\"width\"\n                            component={Input}\n                            label={trans(\"common.width\")}\n                            placeholder={trans(\"common.width\")}\n                            type=\"number\"\n                            min={0}\n                        />\n                    </div>\n                    <div className={formItemClass}>\n                        <FastField\n                            name=\"height\"\n                            component={Input}\n                            label={trans(\"common.height\")}\n                            placeholder={trans(\"common.height\")}\n                            type=\"number\"\n                            min={0}\n                        />\n                    </div>\n\n                    <div className={formItemClass}>\n                        <FastField\n                            name=\"length\"\n                            component={Input}\n                            label={trans(\"common.length\")}\n                            placeholder={trans(\"common.length\")}\n                            type=\"number\"\n                            min={0}\n                        />\n                    </div>\n                    {isHaveDuplicate && (\n                        <div className={formItemClass}>\n                            <FastField\n                                name=\"duplicate\"\n                                component={Input}\n                                label={trans(\"warehouse.sku.duplicate\")}\n                                placeholder={trans(\"warehouse.sku.duplicate\")}\n                                type=\"number\"\n                                min={0}\n                            />\n                        </div>\n                    )}\n                </div>\n                <FormStatus />\n            </Form>\n        </Formik>\n    );\n};\n\nexport default React.forwardRef(FormUpdateBoxPhysicalInfo);","import React, { useMemo } from 'react';\n\nimport clsx from 'clsx';\nimport usePermission from '../NeedPermission/usePermission';\n\nconst TMNButton = ({\n    type = \"secondary\",\n    loading = false,\n    htmlType = \"button\",\n    disabled = false,\n    className = \"\",\n    children,\n    need, \n    permissionJoin = 'or',\n    ...props\n}, ref) => {\n\n    const isActiveByPermission = usePermission(need, permissionJoin);\n\n    const getLoadingClassName = useMemo(() => {\n        if (!loading) return '';\n\n        if (type === 'light-success') return \"spinner spinner-darker-success spinner-left\";\n        if (type === 'secondary') return \"spinner spinner-dark spinner-left\";\n        if (type === 'outline-danger') return \"spinner spinner-darker-danger spinner-left\";\n\n        return \"spinner spinner-white spinner-left\";\n\n    }, [type, loading]);\n\n    return (\n        <button\n            ref={ref}\n            type={htmlType}\n            className={clsx(`btn btn-${type}`, className, getLoadingClassName)}\n            disabled={disabled || loading || !isActiveByPermission}\n            {...props}\n        >\n            {children}\n        </button>\n    );\n};\n\nexport default React.forwardRef(TMNButton);","import React, { useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory, useParams } from 'react-router-dom';\n\nimport warehouseApi from 'apis/warehouse';\nimport handleApiError from 'helper/handleApiError';\nimport _ from 'lodash';\n\nimport FormUpdateBoxPhysicalInfo from '../../Form/FormUpdateBoxPhysicalInfo';\nimport CustomModal from 'app/components/CustomModal';\nimport { Modal } from 'react-bootstrap';\nimport { dialog } from 'app/components/DialogNotify';\nimport useTrans from 'helper/useTrans';\nimport Button from 'app/components/Button';\n\nimport './index.scss';\n\nconst initialBoxPhysicalData = {\n    width: 1,\n    height: 1,\n    weight_per_box: 1,\n    length: 1,\n    duplicate: 1,\n}\n\nconst CreateNewBox = ({ show, onSuccess, initialValues, onHide, isHaveDuplicate = true }) => {\n\n    const [loading, setLoading] = useState(false);\n    const history = useHistory();\n    const params = useParams();\n    const [trans] = useTrans();\n    const formRef = useRef();\n\n    const closeModal = () => {\n        if (onHide) onHide();\n        else history.goBack();\n    }\n\n    const handleBoxInfo = async (values, form) => {\n        setLoading(true);\n\n        if (initialValues) await updateBox(values, form);\n        else await createBox({ sfa_id: params?.sfa_id, ...values }, form);\n\n        setLoading(false);\n    }\n\n    const createBox = (body, form) => {\n\n        let apiParams = body;\n        if (!isHaveDuplicate) apiParams = _.omit(body, ['duplicate'])\n\n        return warehouseApi.box.create(apiParams)\n            .then((response) => {\n\n                dialog.success(trans(\"warehouse.sku.create.success\"));\n\n                closeModal();\n                setTimeout(() => {\n                    onSuccess && onSuccess(response);\n                }, 500);\n            })\n            .catch((err) => {\n                dialog.error(trans(\"warehouse.sku.create.failure\"));\n                handleApiError(err, form);\n            })\n    }\n\n    const updateBox = (body, form) => {\n        const box_id = initialValues?.id || params?.box_id;\n\n        let apiParams = _.pick(body, ['width', 'height', 'weight_per_box', 'length', 'duplicate']);\n        if (!isHaveDuplicate) apiParams = _.pick(body, ['width', 'height', 'weight_per_box', 'length']);\n\n        return warehouseApi.box.update(box_id, apiParams)\n            .then((response) => {\n                dialog.success(trans(\"warehouse.sku.update.success\"));\n\n                closeModal();\n                setTimeout(() => {\n                    onSuccess && onSuccess(response);\n                }, 500);\n            })\n            .catch((err) => {\n                dialog.error(trans(\"warehouse.sku.update.failure\"));\n                handleApiError(err, form);\n            })\n    }\n\n    const triggerSubmit = () => {\n        formRef.current.submitForm();\n    }\n\n    return (\n        <CustomModal\n            show={show}\n            onHide={closeModal}\n            actionsLoading={loading}\n            title={initialValues ? trans(\"warehouse.sku.update.title\") : trans(\"warehouse.sku.create.title\")}\n        >\n            <div className=\"modal-create-new-box\">\n                <Modal.Body>\n                    <FormUpdateBoxPhysicalInfo\n                        isHaveDuplicate={isHaveDuplicate}\n                        formItemClass=\"col-lg-6 col-md-12 col-sm-12\"\n                        initialValues={initialValues || initialBoxPhysicalData}\n                        onSubmit={handleBoxInfo}\n                        ref={formRef}\n                    />\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button type=\"secondary\" onClick={closeModal} className=\"btn-large\">{trans(\"common.cancel\")}</Button>\n                    <Button htmlType=\"submit\" type=\"primary\" onClick={triggerSubmit} className=\"btn-large\" need={['boxes.create', 'boxes.update']}>{trans(\"common.save\")}</Button>\n                </Modal.Footer>\n            </div>\n\n        </CustomModal>\n    );\n};\n\nCreateNewBox.propTypes = {\n    show: PropTypes.bool,\n    onSuccess: PropTypes.func,\n    initialValue: PropTypes.any,\n    onHide: PropTypes.func,\n    isHaveDuplicate: PropTypes.bool\n};\n\nexport default CreateNewBox;","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport clsx from 'clsx';\nimport formatNumber from 'helper/formatNumber';\n\nimport { toAbsoluteUrl } from '_metronic/_helpers';\nimport SVG from 'react-inlinesvg';\n\nimport './BoxItem.scss';\n\nconst BoxItem = ({ box, active, onClick, showQuantity = () => false, showRelative = false, showTotalItems = false }) => {\n\n    const handleClick = () => {\n        if (active) return;\n\n        onClick && onClick(box)\n    }\n\n    const getTotalBoxItems = useMemo(() => {\n\n        let totalBoxItems = 0;\n\n        if (box?.items?.length) {\n            totalBoxItems += box.items.reduce((prevV, curB) => prevV + (curB.quantity || 0), 0);\n        }\n\n        if (!box?.childs?.length) return totalBoxItems;\n\n        totalBoxItems += box.childs.reduce((prevV, curB) => {\n            let childItems = curB.items.reduce((prevC_V, curC_B) => prevC_V + (curC_B.quantity || 0), 0);\n\n            return prevV + childItems * curB.duplicate;\n        }, 0);\n\n        return totalBoxItems;\n\n    }, [box]);\n\n    return (\n        <div className={clsx(\"box-item\", active && 'active')} onClick={handleClick}>\n            <div className=\"box-icon position-relative\">\n                <SVG\n                    src={toAbsoluteUrl(\n                        '/media/svg/icons/Shopping/Box3.svg'\n                    )}\n                ></SVG>\n\n                {!!showQuantity(box) && (\n                    <div className=\"label-quantity\">\n                        {showQuantity(box)}\n                    </div>\n                )}\n            </div>\n            <div className=\"box-info\">\n                <div className=\"sku\">SKU: {box.id}</div>\n                <div className=\"size\">Size: {box.width} × {box.height} × {box.length}</div>\n\n                {showTotalItems && (\n                    <div className=\"size\">Items: {formatNumber(getTotalBoxItems)}</div>\n                )}\n\n                {showRelative && !!box?.childs?.length && (\n                    <div className=\"box-childs\">\n                        <div className=\"box-childs-title\">Childs:</div>\n                        <div className=\"box-childs-wrapper\">\n                            {box.childs.map((boxChild, boxChildIdx) => (\n                                <div className=\"box-child\" key={`box-child-${boxChildIdx}`}>\n                                    <div className=\"box-child--id\">{boxChild.id}</div>\n                                    <div className=\"box-child--duplicate\">{formatNumber(boxChild.duplicate)}</div>\n                                </div>\n                            ))}\n                        </div>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nBoxItem.propTypes = {\n    box: PropTypes.any,\n    active: PropTypes.bool,\n    onClick: PropTypes.func,\n    showQuantity: PropTypes.func,\n    showRelative: PropTypes.bool\n};\n\nexport default BoxItem;","import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\n\nimport _ from 'lodash';\nimport useTrans from 'helper/useTrans';\n\nimport { Card } from '_metronic/_partials/controls';\nimport BoxItem from './BoxItem';\n\nimport './index.scss';\n\nconst headerHeight = 65;\n\nconst ListBox = ({ onSelectBox, showQuantity = () => false, showRelative = false, showTotalItems = false }) => {\n\n    const [searchText, setSearchText] = useState(\"\");\n    const sfa = useSelector(state => state.warehouse.sfa.detail.data);\n    const cardRef = useRef();\n    const listRef = useRef();\n    const params = useParams();\n    const listItemsRef = useRef();\n    const [trans] = useTrans();\n\n    useEffect(() => {\n        document.addEventListener('scroll', handleScroll);\n\n        return () => {\n            document.removeEventListener('scroll', handleScroll);\n        }\n    }, []);\n\n    const handleScroll = (e) => {\n        const { top, height: wrapperHeight } = cardRef.current.getBoundingClientRect();\n        const { height: contentHeight } = listRef.current.getBoundingClientRect();\n\n        if (contentHeight > wrapperHeight) {\n            listRef.current.style.top = '0px';\n            listRef.current.style.bottom = '0px';\n\n            return;\n        }\n\n        if (top <= headerHeight) {\n            listRef.current.style.top = `${headerHeight - top}px`;\n        } else {\n            listRef.current.style.top = 0;\n        }\n    }\n\n    const listBox = useMemo(() => {\n\n        if (!sfa?.boxes?.length) return [];\n\n        let boxList = [...sfa?.boxes];\n\n        if (showRelative) {\n            boxList = boxList.filter(b => !b.box_parent_id);\n        }\n\n        if (!searchText) return boxList;\n\n        return boxList.sort((a, b) => {\n\n            if (a.id.includes(searchText)) return -1;\n            if (b.id.includes(searchText)) return 1;\n\n            return 0;\n        });\n    }, [sfa?.boxes, searchText]); // eslint-disable-line\n\n    const handleClickBox = (box) => {\n        onSelectBox && onSelectBox(box);\n    }\n\n    const handleChangeSearchText = (e) => {\n        listItemsRef.current.scrollTo({\n            top: 0,\n            left: 0,\n            behavior: 'smooth'\n        });\n        debounceSearchText(e.target.value);\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const debounceSearchText = useCallback(_.debounce((v) => {\n        setSearchText(v);\n    }, 750), []); // eslint-disable-line\n\n    const handleKeyPress = (e) => {\n        if (e.charCode === 13 && searchText.length && listBox.length) {\n            onSelectBox && onSelectBox(listBox[0]);\n        }\n    }\n\n    return (\n        <Card className=\"list-box-wrapper position-relative\" ref={cardRef}>\n            <div className=\"position-absolute list-box\" ref={listRef}>\n                <div className=\"title\">{trans(\"warehouse.sku.list.title\")}</div>\n                <div className=\"search-box\">\n                    <input className=\"form-control\" placeholder=\"Search here\" onChange={handleChangeSearchText} onKeyPress={handleKeyPress} />\n                </div>\n\n                <div className=\"list-box-items\" ref={listItemsRef}>\n                    {listBox.map((box, idx) => (\n                        <div className=\"position-relative\" key={`box-${idx}`}>\n                            <BoxItem\n                                showTotalItems={showTotalItems}\n                                showRelative={showRelative}\n                                showQuantity={showQuantity}\n                                onClick={handleClickBox}\n                                box={box}\n                                active={box.id === params?.box_id}\n                                key={`box-item-${idx}`}\n                            />\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </Card>\n    );\n};\n\nListBox.propTypes = {\n    onSelectBox: PropTypes.func,\n    showQuantity: PropTypes.func,\n    showRelative: PropTypes.bool,\n    showTotalItems: PropTypes.bool\n};\n\nexport default ListBox;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\n\nimport CustomDialogConfirm from 'app/components/CustomDialogConfirm';\n\nconst ModalConfirmDelete = ({ id, show, onConfirmed, title }) => {\n    const history = useHistory();\n\n    const onDelete = () => {\n        onConfirmed && onConfirmed(id);\n        history.goBack();\n    };\n\n    return (\n        <CustomDialogConfirm\n            show={show}\n            onHide={() => history.goBack()}\n            onDelete={onDelete}\n            title={title}\n        />\n    );\n};\n\nModalConfirmDelete.propTypes = {\n    onConfirmed: PropTypes.func,\n    show: PropTypes.bool,\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    title: PropTypes.string\n};\n\nexport default ModalConfirmDelete;\n","import React, { useMemo, useCallback, useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory, useRouteMatch, Route } from 'react-router-dom';\n\nimport _ from 'lodash';\nimport warehouseApi from 'apis/warehouse';\n\nimport {\n    Box,\n    makeStyles,\n    Button,\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableRow\n} from '@material-ui/core';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { Pagination } from '@material-ui/lab';\nimport { dialog } from 'app/components/DialogNotify';\nimport ModalConfirmDelete from '../../ModalConfirmDelete';\nimport EmptyData from 'app/components/EmptyData';\n\nimport './index.scss';\nimport useTrans from 'helper/useTrans';\nimport NeedPermission from 'app/components/NeedPermission';\n\nconst useStyles = makeStyles(theme => ({\n    root: {},\n    pagination: {\n        display: 'flex',\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n        justifyContent: 'flex-end'\n    }\n}));\n\nconst TableBoxOrders = ({ onRefresh, data = [], pagination = {}, onPageChange }) => {\n    const classes = useStyles();\n    const history = useHistory();\n    const match = useRouteMatch();\n    const inputQuantityRef = useRef([]);\n    const [trans] = useTrans();\n\n    useEffect(() => {\n        if (data?.length) {\n            data.forEach(r => {\n                inputQuantityRef.current[r.id].value = r.quantity;\n            })\n        }\n    }, [data]);\n\n    const getCellElement = (row, column) => {\n        if (column.render) return column.render(_.get(row, column.id), row);\n\n        return _.get(row, column.id);\n    };\n\n    const handleDelete = recordId => {\n        warehouseApi.boxOwner\n            .delete(recordId)\n            .then(() => {\n                dialog.success(trans(\"warehouse.sku.owner.delete.success\"));\n                onRefresh && onRefresh();\n            })\n            .catch(() => {\n                dialog.error(trans(\"warehouse.sku.owner.delete.failure\"));\n            });\n    };\n\n    const confirmDeleteBoxItem = record => {\n        history.push(`${match.url}/delete-box-owner/${record.id}`);\n    };\n\n    const columns = useMemo(() => ([\n        {\n            id: 'objectable_id', title: trans(\"warehouse.sku.owner.title\"), render: (objectable_id, { objectable_type }) => (\n                <div className=\"owner-object\">\n                    <span className=\"object-type\">{objectable_type === 'user' ? trans(\"common.customer\") : trans(\"common.the_order\")}</span>\n                    <span> - </span>\n                    <span className=\"object-id\">{trans(\"common.code\")}: {objectable_id}</span>\n                </div>\n            )\n        },\n        {\n            id: 'quantity', title: trans(\"common.quantity\"), render: (quantity, row) => {\n                return (\n                    <NeedPermission need={['owning-boxes.update']} fallback={(<span>{quantity}</span>)}>\n                        <input\n                            className=\"form-control quantity-box\"\n                            min={1}\n                            type=\"number\"\n                            ref={ref => inputQuantityRef.current[row.id] = ref}\n                            onKeyPress={(e) => handleChangeQuantity(e, row)}\n                        />\n                    </NeedPermission>\n                )\n            }\n        },\n    ]), []); // eslint-disable-line\n\n    const handleChangeQuantity = (e, row) => {\n        e.persist();\n\n        if (e.charCode === 13)\n            dispatchToApi(e.target.value, row, e.target)\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const dispatchToApi = useCallback(_.debounce((v, row, ele) => {\n        if (v < 1) {\n            ele.style.borderColor = '#dc3545';\n\n            return;\n        }\n\n        warehouseApi.boxOwner.update(row?.id, { quantity: v })\n            .then(() => {\n                dialog.success(trans(\"warehouse.sku.owner.update.success\"));\n\n                ele.style.borderColor = '#1BC5BD';\n\n                setTimeout(() => {\n                    ele.style.borderColor = '';\n                }, 5000);\n            })\n            .catch((err) => {\n\n                let errMessage = trans(\"warehouse.sku.owner.update.failure\");\n\n                if (err?.response?.data?.errors?.quantity) errMessage = err.response.data.errors.quantity\n\n                dialog.error(errMessage);\n\n                inputQuantityRef.current[row.id].value = row.quantity;\n\n                ele.style.borderColor = '#dc3545';\n            })\n\n    }, 700), []); // eslint-disable-line\n\n    if (!data.length) return <EmptyData emptyText={trans(\"warehouse.sku.owner.empty\")} />\n\n    return (\n        <>\n            <Route path={`${match.path}/delete-box-owner/:id`}>\n                {({ match }) => (\n                    <ModalConfirmDelete\n                        id={match?.params?.id}\n                        show={match !== null}\n                        onConfirmed={handleDelete}\n                        title={trans(\"warehouse.sku.owner.delete.title\")}\n                    />\n                )}\n            </Route>\n\n            <PerfectScrollbar>\n                <Box>\n                    <Table className=\"table-box-owners\">\n                        <TableHead>\n                            <TableRow>\n                                {columns.map(column => (\n                                    <TableCell key={column.id}>\n                                        {column.title}\n                                    </TableCell>\n                                ))}\n                                <TableCell></TableCell>\n                            </TableRow>\n                        </TableHead>\n\n                        <TableBody>\n                            {data.map(row => (\n                                <TableRow hover key={row[columns[0].id]}>\n                                    {columns.map(column => (\n                                        <TableCell key={column.id}>\n                                            {getCellElement(row, column)}\n                                        </TableCell>\n                                    ))}\n                                    <TableCell>\n                                        <NeedPermission need={['owning-boxes.delete']}>\n                                            <Button\n                                                color=\"primary\"\n                                                size=\"small\"\n                                                onClick={() =>\n                                                    confirmDeleteBoxItem(row)\n                                                }\n                                            >\n                                                {trans(\"common.delete\")}\n                                            </Button>\n                                        </NeedPermission>\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                    <Pagination\n                        className={classes.pagination}\n                        count={pagination.lastPage}\n                        page={pagination.page}\n                        shape=\"rounded\"\n                        onChange={onPageChange}\n                    />\n                </Box>\n            </PerfectScrollbar>\n        </>\n    );\n};\n\nTableBoxOrders.propTypes = {\n    data: PropTypes.array,\n    pagination: PropTypes.any,\n    onPageChange: PropTypes.func,\n    onRefresh: PropTypes.func\n};\n\nexport default TableBoxOrders;\n","import React, { useEffect, useState } from 'react';\n\nimport clsx from 'clsx';\n\nimport { useField, useFormikContext } from \"formik\";\nimport Select from 'react-select';\nimport useTrans from 'helper/useTrans';\n\nconst SelectObjType = ({ name, showLabel = true, ...props }) => {\n\n    const [value, setValue] = useState();\n    const [field, meta] = useField(name);\n    const { setFieldTouched, setFieldValue } = useFormikContext();\n    const { error, touched } = meta;\n    const [trans] = useTrans();\n\n    const options = [\n        { value: 'user', label: trans(\"warehouse.order.owner_type.customer\") },\n        { value: 'order', label: trans(\"warehouse.order.owner_type.order\") },\n    ]\n\n    useEffect(() => {\n        if (value?.value !== field?.value) {\n            let newValue = options.filter(i => i.value === field.value)?.[0];\n\n            setValue(newValue);\n        }\n    }, [field.value]); // eslint-disable-line\n\n    const handleClick = () => {\n        setFieldTouched(field.name);\n    }\n\n    const handleSelect = (optionSelected) => {\n        setValue(optionSelected);\n        setFieldValue(field.name, optionSelected.value);\n    }\n\n    return (\n        <div className={clsx(touched && error && 'is-invalid')}>\n            <div className=\"select-customer\">\n                <div className=\"form-group\">\n                    {showLabel && <label htmlFor=\"\">{trans(\"warehouse.order.owner_type.title\")}</label>}\n                    <Select\n                        value={value}\n                        placeholder={trans(\"common.select_here\")}\n                        options={options}\n                        onChange={handleSelect}\n                        onClick={handleClick}\n                        {...props}\n                    />\n                </div>\n            </div>\n\n            {touched && error && (\n                <div className=\"invalid-feedback d-block\">{error}</div>\n            )}\n        </div>\n    );\n};\n\nSelectObjType.propTypes = {\n\n};\n\nexport default SelectObjType;","import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nimport _ from 'lodash';\nimport useTrans from 'helper/useTrans';\nimport clsx from 'clsx';\n\nimport Select from 'react-select';\n\nimport './index.scss';\n\nconst TMNBaseSelect = ({\n    className = '',\n    options = [],\n    loading = false,\n    onFetchData,\n    value,\n    typeSearch = 'id',\n    label,\n    onChange,\n    dispatchFirstOption = false,\n    ...props\n}) => {\n    const [prevSearch, setPrevSearch] = useState('');\n    const [trans] = useTrans();\n    const isDispatchedFirstOption = useRef(false);\n\n    useEffect(() => {\n        if (!options.length && onFetchData) onFetchData();\n    }, []); // eslint-disable-line\n\n    useEffect(() => {\n        if(options.length && dispatchFirstOption && !isDispatchedFirstOption.current) {\n            onChange && onChange(options?.[0]);\n            isDispatchedFirstOption.current = true;\n        }\n    }, [options, dispatchFirstOption, isDispatchedFirstOption, onChange]);\n\n    const optionSelected = useMemo(() => {\n        if(value === undefined || value === null) return '';\n        \n        return options.filter(c => c.value === value)[0] || ''\n    }, [value, options]); // eslint-disable-line\n\n    const handleInputSeachChange = value => {\n        if (value)\n            search({ value, type: typeSearch });\n    };\n\n    const handleSelect = option => {\n        onChange && onChange(option);\n    };\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const search = useCallback(\n        _.debounce(({ value, type }) => {\n            if (value === prevSearch) return;\n\n            setPrevSearch(value);\n\n            const params = {\n                search: value,\n                searchFields: type && `${type}:like`\n            };\n\n            onFetchData && onFetchData(params);\n        }, 700),\n        [prevSearch]\n    );\n\n    return (\n        <div className={clsx(\"tomoni-base-select\", className)}>\n            <div className=\"form-group\">\n                {label && <label htmlFor=\"\">{label}</label>}\n                <Select\n                    value={optionSelected}\n                    placeholder={trans(\"common.select_here\")}\n                    options={options}\n                    onInputChange={handleInputSeachChange}\n                    onChange={handleSelect}\n                    isLoading={loading}\n                    {...props}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default TMNBaseSelect;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\n\nimport { fetchUsers } from 'app/modules/AuthService/auth-service-redux/userSlice';\nimport useTrans from 'helper/useTrans';\n\nimport TMNBaseSelect from '../BaseSelect';\n\nimport './index.scss';\n\nconst SelectCustomer = ({ onChange, value, showLabel = true, ...props }) => {\n    const { customerList } = useSelector(\n        ({ authService }) => ({\n            customerList: authService.user.userList\n        }),\n        shallowEqual\n    );\n    const dispatch = useDispatch();\n    const [trans] = useTrans();\n\n    const customerOptions = customerList?.map(item => {\n        return {\n            value: item.id,\n            label: item.email\n        };\n    });\n\n    const handleSelectCustomer = option => {\n        onChange && onChange(option.value);\n    };\n\n    const fetchData = (params) => {\n        dispatch(fetchUsers(params));\n    }\n\n    return (\n        <TMNBaseSelect\n            value={value}\n            label={showLabel && trans(\"common.customer_info\")}\n            placeholder={trans(\"common.pick_here\")}\n            options={customerOptions}\n            onChange={handleSelectCustomer}\n            className=\"select-customer\"\n            typeSearch=\"email\"\n            onFetchData={fetchData}\n            {...props}\n        />\n    );\n};\n\nSelectCustomer.propTypes = {\n    onChange: PropTypes.func,\n    value: PropTypes.any,\n    showLabel: PropTypes.bool\n};\n\nexport default SelectCustomer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport clsx from 'clsx';\n\nimport SelectCustomer from './index';\nimport { useField, useFormikContext } from \"formik\";\n\nconst SelectCustomerForm = ({ name, ...props }) => {\n\n    const [field, meta] = useField(name);\n    const { setFieldTouched, setFieldValue } = useFormikContext();\n    const { error, touched } = meta;\n\n    const handleClick = () => {\n        setFieldTouched(field.name);\n    }\n\n    const handleChangeCustomer = (v) => {\n        setFieldValue(field.name, v);\n    }\n\n    return (\n        <div className={clsx(touched && error && 'is-invalid')}>\n            <SelectCustomer\n                value={field.value}\n                onChange={handleChangeCustomer}\n                onClick={handleClick}\n                {...props}\n            />\n\n            {touched && error && (\n                <div className=\"invalid-feedback d-block\">{error}</div>\n            )}\n        </div>\n    );\n};\n\nSelectCustomerForm.propTypes = {\n    value: PropTypes.any,\n    onChange: PropTypes.func,\n    withFeedbackLabel: PropTypes.bool\n};\n\nexport default SelectCustomerForm;","import React from 'react';\n\nimport clsx from 'clsx';\nimport { useField, useFormikContext } from \"formik\";\nimport SelectCustomerForm from 'app/components/Select/SelectCustomer/SelectCustomerForm';\nimport useTrans from 'helper/useTrans';\n\nconst SelectObjValue = ({ name, showLabel = true, ...props }) => {\n\n    const [field, meta] = useField(name);\n    const { setFieldValue, values } = useFormikContext();\n    const { error, touched } = meta;\n    const [trans] = useTrans();\n\n    const handleChangeCustomer = (data) => {\n        setFieldValue(field.name, data);\n    }\n\n    if(values?.objectable_type === 'user')\n        return <SelectCustomerForm onChange={handleChangeCustomer} name={field.name} />\n\n    return (\n        <div className={clsx(touched && error && 'is-invalid')}>\n            <div className=\"select-customer\">\n                <div className=\"form-group\">\n                    {showLabel && <label htmlFor=\"\">{trans(\"warehouse.order.owner_type.order\")}</label>}\n                    <input {...field} className=\"form-control\" />\n                </div>\n            </div>\n\n            {touched && error && (\n                <div className=\"invalid-feedback d-block\">{error}</div>\n            )}\n        </div>\n    );\n};\n\nSelectObjValue.propTypes = {\n\n};\n\nexport default SelectObjValue;","import React from 'react';\nimport { FastField, Form, Formik } from 'formik';\nimport { Input } from '_metronic/_partials/controls';\nimport * as Yup from 'yup';\nimport SelectObjType from './SelectObjType';\nimport SelectObjValue from './SelectObjValue';\nimport FormStatus from '../FormStatus';\nimport useTrans from 'helper/useTrans';\nimport Button from 'app/components/Button';\n\nconst FormAddBoxOrder = ({\n    onSubmit,\n    initialValues = {\n        objectable_type: 'user',\n        objectable_id: '',\n        quantity: 1,\n    }\n}) => {\n\n    const [trans] = useTrans();\n\n    const validationSchema = Yup.object().shape({\n        objectable_id: Yup.string().required(trans(\"validation.message.required\")),\n        objectable_type: Yup.string().required(trans(\"validation.message.required\")),\n        quantity: Yup.number()\n            .required(trans(\"validation.message.required\"))\n            .min(1, trans(\"validation.message.min\", { min: 1 })),\n    });\n\n    return (\n        <Formik\n            enableReinitialize\n            initialValues={initialValues}\n            onSubmit={onSubmit}\n            validationSchema={validationSchema}\n        >\n            {({ handleSubmit }) => (\n                <Form className=\"form-add-order row\">\n                    <div className=\"col-lg-4 col-md-6 col-sm-12\">\n                        <SelectObjType name=\"objectable_type\" />\n                    </div>\n                    <div className=\"col-lg-4 col-md-6 col-sm-12\">\n                        <SelectObjValue name=\"objectable_id\" />\n                    </div>\n                    <div className=\"col-lg-4 col-md-6 col-sm-12\">\n                        <FastField\n                            name=\"quantity\"\n                            label={trans(\"common.quantity\")}\n                            component={Input}\n                            type=\"number\"\n                            min={1}\n                        />\n                    </div>\n\n                    <FormStatus />\n\n                    <div className=\"action-submit text-right mt-3 w-100\">\n                        <Button type=\"primary\" onClick={handleSubmit} need={['owning-boxes.create']}>{trans(\"common.add\")}</Button>\n                    </div>\n                </Form>\n            )}\n        </Formik>\n    );\n};\n\nFormAddBoxOrder.propTypes = {\n\n};\n\nexport default FormAddBoxOrder;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\n\nimport warehouseApi from 'apis/warehouse';\n\nimport FormAddOrder from 'app/modules/Warehouse/components/Form/FormAddBoxOrder';\nimport { dialog } from 'app/components/DialogNotify';\nimport handleApiError from 'helper/handleApiError';\n\nimport './index.scss';\nimport useTrans from 'helper/useTrans';\n\nconst AddOrder = ({ onSuccess }) => {\n\n    const currentBox = useSelector(state => state.warehouse.box.detail.data);\n    const [trans] = useTrans();\n\n    const handleCreateBoxOwning = (values, form) => {\n        warehouseApi.boxOwner.create({ ...values, box_id: currentBox?.id })\n            .then((res) => {\n                dialog.success(trans(\"warehouse.sku.owner.create.success\"));\n                onSuccess && onSuccess(res);\n                form.resetForm();\n            })\n            .catch((err) => {\n                dialog.error(trans(\"warehouse.sku.owner.create.failure\"));\n                handleApiError(err, form);\n            })\n    }\n\n    return (\n        <div className=\"add-order\">\n            <FormAddOrder onSubmit={handleCreateBoxOwning} />\n        </div>\n    );\n};\n\nAddOrder.propTypes = {\n    onSuccess: PropTypes.func\n};\n\nexport default AddOrder;","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\n\nimport TMNBaseSelect from 'app/components/Select/BaseSelect';\n\nimport './index.scss';\n\nconst SelectBox = ({ onChange }) => {\n\n    const sfa = useSelector(state => state.warehouse.sfa.detail.data);\n    const currentBox = useSelector(state => state.warehouse.box.detail.data);\n\n    const getOptions = useMemo(() => {\n        if (!sfa?.boxes?.length) return [];\n\n        return sfa.boxes.map(i => ({ value: i.id, label: i.id }))\n    }, [sfa]); // eslint-disable-line\n\n    const handleChange = (option) => {\n        onChange && onChange(option);\n    }\n\n    return (\n            <TMNBaseSelect\n                className=\"select-box\"\n                value={currentBox?.id}\n                options={getOptions}\n                onChange={handleChange}\n            />\n    );\n};\n\nSelectBox.propTypes = {\n    onChange: PropTypes.func\n};\n\nexport default SelectBox;","import React, { useEffect } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { fetchBox } from 'app/modules/Warehouse/warehouse-redux/boxSlice';\n\nimport { Card, CardBody } from '_metronic/_partials/controls';\nimport Layout from 'app/modules/Warehouse/components/Layout';\nimport ListBox from 'app/modules/Warehouse/components/List/ListBox';\nimport Loading from 'app/components/Loading';\nimport TableBoxOwners from 'app/modules/Warehouse/components/Table/TableBoxOwners';\nimport AddOrder from './AddOrder';\n\nimport './index.scss';\nimport SelectBox from 'app/modules/Warehouse/components/SelectBox';\nimport useTrans from 'helper/useTrans';\n\nconst ClassifyBox = ({ f5DataSFA }) => {\n    const boxDetail = useSelector(state => state.warehouse.box.detail.data);\n    const loading = useSelector(state => state.warehouse.box.detail.loading);\n    const dispatch = useDispatch();\n    const params = useParams();\n    const history = useHistory();\n    const [trans] = useTrans();\n\n    useEffect(() => {\n        if (params?.box_id) f5DataBox();\n    }, [params?.box_id]); // eslint-disable-line\n\n    const f5DataBox = () => {\n        return dispatch(fetchBox({ id: params?.box_id, with: 'owners', appends: 'owners.object' }))\n    }\n\n    const handleSelectBox = (box) => {\n        history.push(`/warehouse/classify-box/${params?.sfa_id}/${box.id}`);\n    }\n\n    const handleBoxChange = (option) => {\n        if (!option) return;\n\n        handleSelectBox({ id: option.value });\n    }\n\n    return (\n        <Layout title={`${trans(\"MENU.WAREHOUSE.ASSIGN_BOXES\")} - SFA: ${params?.sfa_id}`}>\n            <div className=\"row classify-box\">\n                <div className=\"col-lg-9 col-md-12 col-sm-12\" style={{ height: '100%' }}>\n                    <Card className=\"mb-0 position-relative\">\n                        {loading && <Loading local />}\n                        <CardBody>\n                            <div className=\"ipad-shown select-box-mobile\">\n                                <label htmlFor=\"\">{trans(\"warehouse.sku.title\")}</label>\n                                <SelectBox onChange={handleBoxChange} />\n                            </div>\n                            <AddOrder onSuccess={f5DataBox} />\n                            <TableBoxOwners onRefresh={f5DataBox} data={boxDetail?.owners || []} />\n                        </CardBody>\n                    </Card>\n                </div>\n                <div className=\"col-lg-3 col-md-12 col-sm-12 ipad-hidden\">\n                    <ListBox\n                        onSelectBox={handleSelectBox}\n                        showQuantity={(b) => b.duplicate}\n                        showTotalItems\n                        showRelative\n                    />\n                </div>\n            </div>\n        </Layout>\n    );\n};\n\nClassifyBox.propTypes = {\n\n};\n\nexport default ClassifyBox;\n","import React, { useEffect } from 'react';\nimport { useHistory, useParams, useRouteMatch, Route } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { fetchSFA } from 'app/modules/Warehouse/warehouse-redux/sfaSlice';\n\nimport Layout from 'app/modules/Warehouse/components/Layout';\nimport EmptyDataContent from '../../PerformEntry/Step2_CheckTheGoods/EmptyDataContent';\nimport CreateNewBox from 'app/modules/Warehouse/components/PerformEntry/CreateNewBox';\nimport ClassifyBox from './ClassifyBox';\nimport useTrans from 'helper/useTrans';\n\nconst ClassifyDetail = props => {\n    const sfa = useSelector(state => state.warehouse.sfa.detail.data);\n    const loading = useSelector(state => state.warehouse.box.detail.loading);\n    const dispatch = useDispatch();\n    const params = useParams();\n    const history = useHistory();\n    const match = useRouteMatch();\n    const [trans] = useTrans();\n\n    useEffect(() => {\n        if (params?.sfa_id) f5DataSFA().then(res => {\n            if (res.payload?.boxes?.length && !params?.box_id) {\n                history.replace(`${match.url}/${res.payload?.boxes?.[0].id}`);\n            } else if (!res.payload?.boxes?.length) {\n                history.push(`${match.url}/create-new-box`);\n            }\n        });\n    }, []); // eslint-disable-line\n\n    const f5DataSFA = () => {\n        return dispatch(fetchSFA({ id: params.sfa_id, with: 'boxes.childs.items;boxes.items' }))\n    }\n\n    const handleSelectBox = (box) => {\n        history.push(`/warehouse/classify-box/${params?.sfa_id}/${box.id}`);\n    }\n\n    const focusModalCreateBox = () => {\n        history.push(`${match.url}/create-new-box`);\n    }\n\n    const createBoxSuccess = (res) => {\n        handleSelectBox(res);\n        f5DataSFA();\n    }\n\n    if (!loading && !sfa?.boxes?.length)\n        return (\n            <Layout title={`${trans(\"MENU.WAREHOUSE.ASSIGN_BOXES\")} - SFA: ${params?.sfa_id}`}>\n                <EmptyDataContent focusModalCreateBox={focusModalCreateBox} />\n\n                <Route path={`${match.path}/create-new-box`}>\n                    {({ match }) => (\n                        <CreateNewBox\n                            show={match !== null}\n                            onSuccess={createBoxSuccess}\n                        />\n                    )}\n                </Route>\n            </Layout>\n        )\n\n    return (\n        <Route path={`${match.path}/:box_id`}>\n            <ClassifyBox f5DataSFA={f5DataSFA} />\n        </Route>\n    );\n};\n\nClassifyDetail.propTypes = {\n\n};\n\nexport default ClassifyDetail;\n","import React from 'react';\nimport { Route, Redirect, Switch, useRouteMatch } from 'react-router-dom';\n\nimport TableSFAs from './TableSFAs';\nimport ClassifyDetail from './ClassifyDetail';\n\nconst StorageBoxPage = props => {\n\n    const match = useRouteMatch();\n\n    return (\n        <Switch>\n            <Redirect exact={true} from=\"/warehouse/classify-box\" to=\"/warehouse/classify-box/list\" />\n\n            <Route path={`${match.path}/list`}>\n                <TableSFAs />\n            </Route>\n\n            <Route path={`${match.path}/:sfa_id`}>\n                <ClassifyDetail />\n            </Route>\n        </Switch>\n    );\n};\n\nStorageBoxPage.propTypes = {\n\n};\n\nexport default StorageBoxPage;","import React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { fetchSFAs } from 'app/modules/Warehouse/warehouse-redux/sfaSlice';\nimport useTrans from 'helper/useTrans';\n\nimport TMNBaseSelect from '../BaseSelect';\n\nimport './index.scss';\n\nconst SelectSFA = ({ onChange, value, showLabel = true, ...props }) => {\n    const sfaList = useSelector(state => state.warehouse.sfa.list.data);\n    const loading = useSelector(state => state.warehouse.sfa.list.loading);\n    const dispatch = useDispatch();\n    const [trans] = useTrans();\n\n    const makeOption = useCallback((i) => ({\n        value: i.id,\n        label: trans('warehouse.sfa.x_id', { x: i.id })\n    }), [trans]);\n\n    const options = sfaList?.map(item => makeOption(item));\n\n    const handleFetchData = (params) => {\n        dispatch(fetchSFAs(params));\n    }\n\n    const handleChange = (selectedOption) => {\n        onChange && onChange(selectedOption.value)\n    }\n\n    return (\n        <TMNBaseSelect\n            className=\"select-sfa\"\n            value={value}\n            label={showLabel && trans(\"warehouse.sfa.title\")}\n            placeholder={trans(\"warehouse.sfa.find\")}\n            options={options}\n            onChange={handleChange}\n            loading={loading}\n            onFetchData={handleFetchData}\n            {...props}\n        />\n    );\n};\n\nSelectSFA.propTypes = {\n    onChange: PropTypes.func,\n    value: PropTypes.any,\n    showLabel: PropTypes.bool\n};\n\nexport default SelectSFA;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { fetchSFAs } from 'app/modules/Warehouse/warehouse-redux/sfaSlice';\nimport useTrans from 'helper/useTrans';\n\nimport TMNBaseSelect from '../BaseSelect';\n\nimport './index.scss';\n\nconst makeOption = (i) => ({\n    value: i.tracking,\n    label: i.tracking\n})\n\nconst SelectTracking = ({ onChange, value, showLabel = true, ...props }) => {\n    const { loading, data: trackingList } = useSelector(state => state.warehouse.sfa.list); // eslint-disable-line\n    const dispatch = useDispatch();\n    const [trans] = useTrans();\n\n    const options = trackingList?.map(item => makeOption(item));\n\n    const handleSelect = option => {\n        onChange && onChange(option.value);\n    };\n\n    const fetchData = (params) => {\n        dispatch(fetchSFAs(params));\n    }\n\n    return (\n        <TMNBaseSelect\n            value={value}\n            label={showLabel && trans(\"warehouse.tracking.title\")}\n            className=\"select-tracking\"\n            placeholder={trans(\"warehouse.tracking.find\")}\n            options={options}\n            onChange={handleSelect}\n            loading={loading}\n            onFetchData={fetchData}\n            typeSearch='tracking'\n            {...props}\n        />\n    );\n};\n\nSelectTracking.propTypes = {\n    onChange: PropTypes.func,\n    value: PropTypes.any,\n    showLabel: PropTypes.bool\n};\n\nexport default SelectTracking;","import React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { fetchLadingBills } from 'app/modules/Warehouse/warehouse-redux/ladingBillSlice';\nimport useTrans from 'helper/useTrans';\n\nimport TMNBaseSelect from '../BaseSelect';\n\nimport './index.scss';\n\nconst SelectLadingBill = ({ onChange, value, showLabel = true, ...props }) => {\n    const ladingBillList = useSelector(state => state.warehouse.ladingBill.list.data);\n    const loading = useSelector(state => state.warehouse.ladingBill.list.loading);\n    const dispatch = useDispatch();\n    const [trans] = useTrans();\n\n    const makeOption = useCallback((i) => ({\n        value: i.id,\n        label: trans('warehouse.lading_bill.option_label', { id: i.id, customerId: i.customer_id || '---', createdAt: i.created_at || '---' }),\n    }), [trans]);\n\n    const ladingBillOptions = ladingBillList?.map(item => makeOption(item));\n\n    const handleSelect = option => {\n        onChange && onChange(option.value);\n    };\n\n    const fetchData = (params) => {\n        dispatch(fetchLadingBills(params));\n    }\n\n    return (\n        <TMNBaseSelect\n            value={value}\n            label={showLabel && trans(\"warehouse.lading_bill.title\")}\n            className=\"select-lading-bill\"\n            placeholder={trans(\"warehouse.lading_bill.find\")}\n            options={ladingBillOptions}\n            onChange={handleSelect}\n            loading={loading}\n            onFetchData={fetchData}\n            typeSearch={undefined}\n            {...props}\n        />\n    );\n};\n\nSelectLadingBill.propTypes = {\n    onChange: PropTypes.func,\n    value: PropTypes.any,\n    showLabel: PropTypes.bool\n};\n\nexport default SelectLadingBill;\n","import React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { fetchInvoices } from 'app/modules/Warehouse/warehouse-redux/invoiceSlice';\nimport useTrans from 'helper/useTrans';\n\nimport TMNBaseSelect from '../BaseSelect';\n\nimport './index.scss';\n\nconst SelectInvoice = ({ onChange, value, showLabel = true, ...props }) => {\n    const invoiceList = useSelector(state => state.warehouse.invoice.list.data);\n    const loading = useSelector(state => state.warehouse.invoice.list.loading);\n    const dispatch = useDispatch();\n    const [trans] = useTrans();\n\n    const makeOption = useCallback((i) => ({\n        value: i.id,\n        label: trans(\"warehouse.invoice.option_label\", { id: i.id, created_at: i.created_at || '---' })\n    }), [trans]);\n\n    const options = invoiceList?.map(item => makeOption(item));\n\n    const handleSelect = option => {\n        onChange && onChange(option.value);\n    };\n\n    const fetchData = (params) => {\n        dispatch(fetchInvoices(params));\n    }\n\n    return (\n        <TMNBaseSelect\n            value={value}\n            label={showLabel && trans(\"warehouse.invoice.title\")}\n            className=\"select-invoice\"\n            placeholder={trans(\"warehouse.invoice.find\")}\n            options={options}\n            onChange={handleSelect}\n            loading={loading}\n            onFetchData={fetchData}\n            {...props}\n        />\n    );\n};\n\nSelectInvoice.propTypes = {\n    onChange: PropTypes.func,\n    value: PropTypes.any,\n    showLabel: PropTypes.bool\n};\n\nexport default SelectInvoice;","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory, useLocation, useRouteMatch } from 'react-router-dom';\n\nimport { dashboardAction, fetchDashboardBoxes } from 'app/modules/Warehouse/warehouse-redux/dashboardSlice';\nimport moment from 'moment';\nimport queryString from 'query-string';\nimport _ from 'lodash';\nimport useTrans from 'helper/useTrans';\n\nimport { Card, CardBody } from '_metronic/_partials/controls';\nimport SelectSFA from 'app/components/Select/SelectSFA';\nimport SelectCustomer from 'app/components/Select/SelectCustomer';\nimport SelectSFATracking from 'app/components/Select/SelectSFATracking';\nimport SelectLadingBill from 'app/components/Select/SelectLadingBill';\nimport SelectInvoice from 'app/components/Select/SelectInvoice';\nimport DatePicker from \"react-datepicker\";\nimport Button from 'app/components/Button';\n\nimport './index.scss';\n\nconst dateFormatter = 'YYYY-MM-DD';\n\nconst FilterList = props => {\n\n    const loading = useSelector(state => state.warehouse.dashboard.loading);\n    const filter = useSelector(state => state.warehouse.dashboard.filter);\n    const dispatch = useDispatch();\n    const location = useLocation();\n    const history = useHistory();\n    const match = useRouteMatch();\n    const [trans] = useTrans();\n\n    useEffect(() => {\n        if (location.search) {\n            let searchParsed = queryString.parse(location.search);\n\n            let newFilter = searchParsed;\n\n            if (searchParsed.startDate || searchParsed.endDate) {\n                newFilter = {\n                    ..._.omit(searchParsed, ['startDate', 'endDate']),\n                    date: { startDate: searchParsed.startDate, endDate: searchParsed.endDate }\n                }\n            }\n\n            dispatch(dashboardAction.changeFilter(newFilter));\n        }\n\n        dispatch(fetchDashboardBoxes());\n    }, []); // eslint-disable-line\n\n    const handleChangeFilter = (key, value) => {\n        dispatch(dashboardAction.changeFilter({ [key]: value }))\n    }\n\n    const handleDateChange = (key, date) => {\n        let newDate = { ...filter?.date };\n        newDate[key] = moment(date).format('YYYY-MM-DD');\n        dispatch(dashboardAction.changeFilter({ date: newDate }))\n    }\n\n    const handleReset = () => {\n        if (filter !== {}) {\n            history.replace(match.url);\n            dispatch(dashboardAction.resetFilter());\n            dispatch(fetchDashboardBoxes());\n        }\n    }\n\n    const handleFilter = () => {\n\n        dispatch(dashboardAction.resetBoxes());\n        dispatch(fetchDashboardBoxes());\n\n        let parsedFilter = filter;\n\n        if (filter.date) {\n            parsedFilter = {\n                ..._.omit(filter, 'date'),\n                startDate: filter.date.startDate,\n                endDate: filter.date.endDate\n            }\n        }\n\n        history.replace(`${match.url}?${queryString.stringify(parsedFilter)}`);\n    }\n\n    return (\n        <Card className=\"dashboard-filter\">\n            <CardBody>\n                <div className=\"row\">\n                    <div className=\"col-lg-3 col-md-6 col-sm-12\">\n                        <SelectSFA\n                            value={filter.sfa_id}\n                            onChange={(v) => handleChangeFilter('sfa_id', v)}\n                        />\n                    </div>\n                    <div className=\"col-lg-3 col-md-6 col-sm-12\">\n                        <div className=\"form-group\">\n                            <label htmlFor=\"\">{trans(\"warehouse.sku.title\")}</label>\n                            <input\n                                value={filter.id || ''}\n                                onChange={(e) => handleChangeFilter('id', e.target.value)}\n                                className=\"form-control\"\n                                placeholder={trans(\"warehouse.sku.title\")}\n                            />\n                        </div>\n                    </div>\n                    <div className=\"col-lg-3 col-md-6 col-sm-12\">\n                        <div className=\"form-group\">\n                            <label htmlFor=\"\">{trans(\"warehouse.jancode.title\")}</label>\n                            <input\n                                value={filter['items.product_id'] || ''}\n                                onChange={(e) => handleChangeFilter('items.product_id', e.target.value)}\n                                className=\"form-control\"\n                                placeholder={trans(\"warehouse.jancode.title\")}\n                            />\n                        </div>\n                    </div>\n                    <div className=\"col-lg-3 col-md-6 col-sm-12\">\n                        <SelectSFATracking\n                            value={filter['sfa.tracking']}\n                            onChange={(v) => handleChangeFilter('sfa.tracking', v)}\n                        />\n                    </div>\n                    <div className=\"col-lg-3 col-md-6 col-sm-12\">\n                        <SelectCustomer\n                            value={filter['owners.objectable_id']}\n                            onChange={(v) => handleChangeFilter('owners.objectable_id', v)}\n                        />\n                    </div>\n                    <div className=\"col-lg-3 col-md-6 col-sm-12\">\n                        <SelectLadingBill\n                            value={filter['owners.pivotLadingBills.ladingBill.id']}\n                            onChange={(v) => handleChangeFilter('owners.pivotLadingBills.ladingBill.id', v)}\n                        />\n                    </div>\n                    <div className=\"col-lg-3 col-md-6 col-sm-12\">\n                        <SelectInvoice\n                            value={filter['owners.pivotLadingBills.ladingBill.containers.id']}\n                            onChange={(v) => handleChangeFilter('owners.pivotLadingBills.ladingBill.containers.id', v)}\n                        />\n                    </div>\n                    <div className=\"col-lg-3 col-md-6 col-sm-12\">\n                        <div className=\"form-group\">\n                            <label htmlFor=\"\">{trans(\"common.start_date\")}</label>\n                            <DatePicker\n                                selected={filter?.date?.startDate ? moment(filter?.date?.startDate, dateFormatter).toDate() : undefined}\n                                maxDate={filter?.date?.endDate ? moment(filter?.date?.endDate, dateFormatter).toDate() : null}\n                                onChange={(date) => handleDateChange('startDate', date)}\n                                dateFormat={'yyyy-MM-dd'}\n                                className=\"form-control\"\n                            />\n                        </div>\n                    </div>\n                    <div className=\"col-lg-3 col-md-6 col-sm-12\">\n                        <div className=\"form-group\">\n                            <label htmlFor=\"\">{trans(\"common.end_date\")}</label>\n                            <DatePicker\n                                selected={filter?.date?.endDate ? moment(filter?.date?.endDate, dateFormatter).toDate() : undefined}\n                                minDate={filter?.date?.startDate ? moment(filter?.date?.startDate, dateFormatter).toDate() : null}\n                                onChange={(date) => handleDateChange('endDate', date)}\n                                dateFormat={'yyyy-MM-dd'}\n                                className=\"form-control\"\n                            />\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"text-right\">\n                    <Button type=\"secondary\" loading={loading} onClick={handleReset}>{trans(\"common.reset_filter\")}</Button>\n                    <Button className=\"ml-3\" type=\"primary\" loading={loading} onClick={handleFilter}>{trans(\"common.filter\")}</Button>\n                </div>\n            </CardBody>\n        </Card>\n    );\n};\n\nFilterList.propTypes = {\n\n};\n\nexport default FilterList;","import React, { useMemo, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { toAbsoluteUrl } from '_metronic/_helpers';\nimport _ from 'lodash';\n\nimport {\n    makeStyles,\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableRow,\n    TableSortLabel\n} from '@material-ui/core';\nimport SVG from 'react-inlinesvg';\nimport { Waypoint } from 'react-waypoint';\n\nimport './index.scss';\nimport Loading from '../Loading';\n\nconst useStyles = makeStyles(theme => ({\n    root: {},\n    pagination: {\n        display: 'flex',\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n        justifyContent: 'flex-end'\n    },\n    visuallyHidden: {\n        border: 0,\n        clip: 'rect(0 0 0 0)',\n        height: 1,\n        margin: -1,\n        overflow: 'hidden',\n        padding: 0,\n        position: 'absolute',\n        top: 20,\n        width: 1\n    }\n}));\n\nfunction WaypointTable(props) {\n    const {\n        columns,\n        rows,\n        page,\n        lastpage,\n        onPageChange,\n        onDelete,\n        onViewEdit,\n        additionalActions = [],\n        onSort = null,\n        rowKey,\n        className,\n        noSTT,\n        loading = false\n    } = props;\n    const classes = useStyles();\n\n    const handleDelete = id => {\n        if (onDelete) onDelete(id);\n    };\n\n    const handleViewEdit = (id, row) => {\n        if (onViewEdit) onViewEdit(id, row);\n    };\n\n    const getCellElement = (row, column) => {\n        if (column.render) return column.render(_.get(row, column.id), row);\n\n        return _.get(row, column.id);\n    };\n\n    const [order, setOrder] = React.useState('asc');\n    const [orderBy, setOrderBy] = useState('');\n\n    const handleSort = property => {\n        const isAsc = orderBy === property && order === 'asc';\n        const orderByTemp = isAsc ? 'desc' : 'asc';\n        setOrder(orderByTemp);\n        setOrderBy(property);\n        if (onSort) onSort(property, orderByTemp);\n    };\n\n    const tableRowKey = useMemo(() => {\n        return rowKey || columns[0].id;\n    }, [columns, rowKey]);\n\n    const isAction = useMemo(() => {\n        return !!onViewEdit || !!onDelete || !!additionalActions.length;\n    }, [onViewEdit, onDelete, additionalActions]);\n\n    const handleWaypointEnter = () => {\n\n        if (page >= lastpage) return;\n\n        onPageChange(page + 1);\n    }\n\n    return (\n        <div className=\"tmn-waypoint-table position-relative\">\n            <div className=\"tmn-waypoint-table__wrapper\">\n                <Table className={className}>\n                    <TableHead>\n                        <TableRow>\n                            {!noSTT && (\n                                <TableCell>\n                                    <span>STT</span>\n                                </TableCell>\n                            )}\n\n                            {columns.map(column => (\n                                <TableCell key={column.id}>\n                                    {column.isSort ? (\n                                        <TableSortLabel\n                                            active={orderBy === column.id}\n                                            direction={\n                                                orderBy === column.id\n                                                    ? order\n                                                    : 'asc'\n                                            }\n                                            onClick={() =>\n                                                handleSort(column.id)\n                                            }\n                                        >\n                                            {column.title}\n                                            {orderBy === column.id &&\n                                                column.disablePadding ? (\n                                                <span\n                                                    className={\n                                                        classes.visuallyHidden\n                                                    }\n                                                >\n                                                    {order === 'desc'\n                                                        ? 'sorted descending'\n                                                        : 'sorted ascending'}\n                                                </span>\n                                            ) : null}\n                                        </TableSortLabel>\n                                    ) : (\n                                        column.title\n                                    )}\n                                </TableCell>\n                            ))}\n\n                            {isAction && (\n                                <TableCell className=\"text-center\">\n                                    <span className={classes.title}>#</span>\n                                </TableCell>\n                            )}\n                        </TableRow>\n                    </TableHead>\n\n                    <TableBody>\n                        {rows.map((row, index) => (\n                            <TableRow hover key={index}>\n                                {!noSTT && (<TableCell>{index + 1}</TableCell>)}\n\n                                {columns.map(column => (\n                                    <TableCell key={column.id}>\n                                        {getCellElement(row, column)}\n                                    </TableCell>\n                                ))}\n\n                                {isAction && (\n                                    <TableCell style={{ width: '12%' }}>\n                                        {additionalActions.map(\n                                            (action, idx) => (\n                                                <React.Fragment\n                                                    key={`action-item-${idx}`}\n                                                >\n                                                    {action(row)}\n                                                </React.Fragment>\n                                            )\n                                        )}\n                                        {!!onViewEdit && (\n                                            <button\n                                                className=\"btn btn-icon btn-light btn-hover-primary btn-sm mx-3\"\n                                                onClick={() =>\n                                                    handleViewEdit(\n                                                        row[tableRowKey],\n                                                        row\n                                                    )\n                                                }\n                                            >\n                                                <span className=\"svg-icon svg-icon-md svg-icon-primary\">\n                                                    <SVG\n                                                        src={toAbsoluteUrl(\n                                                            '/media/svg/icons/Communication/Write.svg'\n                                                        )}\n                                                    ></SVG>\n                                                </span>\n                                            </button>\n                                        )}\n                                        {!!onDelete && (\n                                            <button\n                                                className=\"btn btn-icon btn-light btn-hover-danger btn-sm\"\n                                                onClick={() =>\n                                                    handleDelete(\n                                                        row[tableRowKey]\n                                                    )\n                                                }\n                                            >\n                                                <span className=\"svg-icon svg-icon-md svg-icon-danger\">\n                                                    <SVG\n                                                        src={toAbsoluteUrl(\n                                                            '/media/svg/icons/General/Trash.svg'\n                                                        )}\n                                                    ></SVG>\n                                                </span>\n                                            </button>\n                                        )}\n                                    </TableCell>\n                                )}\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </div>\n\n            {!loading && page < lastpage && (\n                <Waypoint\n                    onEnter={handleWaypointEnter}\n                />\n            )}\n\n            {loading && <Loading absolute={false} hideLoadingText />}\n        </div>\n    );\n}\n\nWaypointTable.propTypes = {\n    className: PropTypes.string,\n    columns: PropTypes.array,\n    rows: PropTypes.array,\n    onPageChange: PropTypes.func,\n    onDelete: PropTypes.func,\n    onViewEdit: PropTypes.func,\n    page: PropTypes.number,\n    lastpage: PropTypes.number,\n    isPagination: PropTypes.bool,\n    isAction: PropTypes.bool,\n    isDelete: PropTypes.bool,\n    isViewEdit: PropTypes.bool,\n    additionalActions: PropTypes.array,\n    rowKey: PropTypes.any,\n    noSTT: PropTypes.bool\n};\n\nWaypointTable.defaultProps = {\n    className: '',\n    columns: [],\n    rows: [],\n    onPageChange: null,\n    onDelete: null,\n    onViewEdit: null,\n    page: 1,\n    lastpage: 1,\n    isPagination: true,\n    isAction: true,\n    isDelete: true,\n    isViewEdit: true,\n    additionalActions: [],\n    rowKey: undefined,\n    noSTT: false\n};\n\nexport default WaypointTable;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport useColumns from '../hooks/useColumns';\nimport { dashboardAction, fetchDashboardBoxes } from 'app/modules/Warehouse/warehouse-redux/dashboardSlice';\n\nimport { Card, CardBody } from '_metronic/_partials/controls';\nimport WaypointTable from 'app/components/WaypointTable';\n\nimport './index.scss';\n\nconst TableSKU = props => {\n\n    const boxes = useSelector(state => state.warehouse.dashboard.boxes);\n    const loading = useSelector(state => state.warehouse.dashboard.loading);\n    const pagination = useSelector(state => state.warehouse.dashboard.pagination);\n    const [columns] = useColumns();\n    const dispatch = useDispatch();\n\n    const handlePageChange = (page) => {\n        dispatch(dashboardAction.changePage(page));\n        dispatch(fetchDashboardBoxes());\n    }\n\n    return (\n        <Card className=\"table-dashboard-sku-section position-relative\">\n            <CardBody>\n                <WaypointTable\n                    rows={boxes}\n                    columns={columns}\n                    rowKey=\"id\"\n                    page={pagination.page}\n                    lastpage={pagination.lastPage}\n                    onPageChange={handlePageChange}\n                    loading={loading}\n                    noSTT\n                />\n            </CardBody>\n        </Card>\n    );\n};\n\nTableSKU.propTypes = {\n\n};\n\nexport default TableSKU;","import React, { useCallback, useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport formatNumber from 'helper/formatNumber';\nimport _, { find } from 'lodash';\nimport queryString from 'query-string';\nimport { useLocation } from 'react-router-dom';\nimport useTrans from 'helper/useTrans';\n\nexport default function useColumns() {\n    const columns = useSelector(state => state.warehouse.dashboard.columns);\n    const location = useLocation();\n    const [trans] = useTrans();\n\n    const locationSearch = useMemo(() => {\n        return queryString.parse(location.search);\n    }, [location]);\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const COLUMNS = [\n        {\n            id: 'id',\n            key: 'sku',\n            title: trans('warehouse.sku.title'),\n            render: (sku, row) => (\n                <div className=\"sku-info\">\n                    <div\n                        className=\"font-weight-bold sku cursor-pointer\"\n                        onClick={() => gotoPerformEntry(row)}\n                    >\n                        {sku}\n                    </div>\n                    <div className=\"sku-duplicate\">\n                        {trans('warehouse.quantity.total')}:{' '}\n                        <span className=\"font-weight-bold\">\n                            {formatNumber(row.duplicate)}\n                        </span>\n                    </div>\n                    <div className=\"sku-duplicate\">\n                        {trans('warehouse.quantity.in_stock')}:{' '}\n                        <span className=\"font-weight-bold\">\n                            {formatNumber(getQuantityBoxInWarehouse(row))}\n                        </span>\n                    </div>\n\n                    <div className=\"sku-info__extra-content\">\n                        <div className=\"sfa-id\">\n                            {trans('warehouse.sfa.title')}:{' '}\n                            <span className=\"font-weight-bold\">\n                                {row.sfa_id}\n                            </span>\n                        </div>\n                        <div className=\"tracking\">\n                            {trans('warehouse.tracking.title')}:{' '}\n                            <span className=\"font-weight-bold\">\n                                {row.sfa?.tracking}\n                            </span>\n                        </div>\n                        <div className=\"created_date\">\n                            {trans('common.created_at')}:{' '}\n                            <span className=\"font-weight-bold\">\n                                {row.created_at || '---'}\n                            </span>\n                        </div>\n                        {locationSearch['items.product_id'] && (\n                            <div className=\"search-jancode\">\n                                {trans('warehouse.jancode.title')} [\n                                {locationSearch['items.product_id']}]:{' '}\n                                <span className=\"font-weight-bold\">\n                                    {formatNumber(\n                                        getQuantityProductInBox(row).inWH\n                                    )}\n                                    /\n                                    {formatNumber(\n                                        getQuantityProductInBox(row).total\n                                    )}\n                                </span>\n                            </div>\n                        )}\n                    </div>\n                </div>\n            )\n        },\n        {\n            id: 'pivot_pallets',\n            key: 'pallets',\n            title: trans('common.storage'),\n            render: pivot_pallets => {\n                if (!pivot_pallets?.length)\n                    return (\n                        <span className=\"empty-text\">\n                            {trans('warehouse.sku.not_storage')}\n                        </span>\n                    );\n\n                return pivot_pallets.map((pivotPallet, idx) => (\n                    <div\n                        className=\"pallet-wrapper split-with-other-vertical\"\n                        key={`pallet-${idx}`}\n                    >\n                        <div className=\"d-flex align-items-center justify-content-between\">\n                            <div className=\"pallet-id\">\n                                {trans('warehouse.pallet.id')}:{' '}\n                                <span className=\"font-weight-bold\">\n                                    {pivotPallet.pallet.id}\n                                </span>\n                            </div>\n                            <div className=\"pallet-position\">\n                                {pivotPallet.pallet?.location?.floor\n                                    ? `F${pivotPallet.pallet?.location?.floor} x R${pivotPallet.pallet?.location?.row} x C${pivotPallet.pallet?.location?.column}`\n                                    : '---'}\n                            </div>\n                        </div>\n                        <div className=\"d-flex align-items-center justify-content-between mt-3\">\n                            <div className=\"pallet-quantity\">\n                                {trans(\n                                    'warehouse.quantity.on_pallet.shorthand'\n                                )}\n                                :{' '}\n                                <span className=\"font-weight-bold\">\n                                    {formatNumber(pivotPallet.current_quantity)}\n                                </span>\n                            </div>\n                            <div className=\"shelve-id\">\n                                {trans('warehouse.shelve.title')}:{' '}\n                                <span className=\"font-weight-bold\">\n                                    {pivotPallet?.pallet?.location?.shelve_id || '---'}\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n                ));\n            }\n        },\n        {\n            id: 'owners',\n            key: 'order',\n            title: trans('common.the_order'),\n            render: owners => {\n                if (!owners?.length)\n                    return (\n                        <span className=\"empty-text\">\n                            {trans('warehouse.sku.inventory_crate')}\n                        </span>\n                    );\n\n                return owners.map((owner, idx) => (\n                    <div\n                        className=\"owner-wrapper split-with-other-vertical\"\n                        key={`owner-${idx}`}\n                    >\n                        <div className=\"owner-type\">\n                            {owner.objectable_type === 'user'\n                                ? `${trans('common.customer')}`\n                                : `${trans('common.the_order')}:`}\n                            <span className=\"font-weight-bold ml-5\">\n                                {owner.objectable_id}\n                            </span>\n                        </div>\n                        <div className=\"owner-quantity\">\n                            {trans('common.quantity')}:{' '}\n                            <span className=\"font-weight-bold\">\n                                {formatNumber(owner.quantity)}\n                            </span>\n                        </div>\n                    </div>\n                ));\n            }\n        },\n        {\n            id: 'box_lading_bills',\n            key: 'lading_bills',\n            title: trans('warehouse.lading_bill.title'),\n            render: (boxLadingBills, { owners }) => {\n\n                const ladingBillsList = owners.reduce((prevValue, curOwner) => {\n                    if (!curOwner?.box_lading_bills?.length) return prevValue;\n\n                    let listLadingBillsOfCurOwner = curOwner.box_lading_bills.map(i => ({ ...i.lading_bill, quantity: i.quantity }));\n\n                    return [...prevValue, ...listLadingBillsOfCurOwner];\n                }, []);\n\n                if (!ladingBillsList?.length)\n                    return (\n                        <span className=\"empty-text\">\n                            {trans('warehouse.sku.not_have.lading_bill')}\n                        </span>\n                    );\n\n                return ladingBillsList.map((l_lb, idx) => (\n                    <div\n                        className=\"lading-bill-wrapper split-with-other-vertical\"\n                        key={`lading-bill-${idx}`}\n                    >\n                        <div className=\"lading-bill-info\">\n                            <div\n                                className=\"lading-bill-id cursor-pointer\"\n                                onClick={() => gotoLadingBill(l_lb)}\n                            >\n                                {trans('warehouse.lading_bill.id')}:{' '}\n                                <span className=\"font-weight-bold text-primary\">\n                                    {l_lb.id}\n                                </span>\n                            </div>\n                            <div className=\"lading-bill-quantity\">\n                                SL:{' '}\n                                <span className=\"font-weight-bold\">\n                                    {formatNumber(l_lb.quantity)}\n                                </span>\n                            </div>\n                        </div>\n\n                        <div className=\"container-list mt-3\">\n                            {l_lb.containers.map((container, cIdx) => (\n                                <div\n                                    className=\"container-wrapper\"\n                                    key={`container-${cIdx}`}\n                                >\n                                    <div\n                                        className=\"container-id cursor-pointer\"\n                                        onClick={() => gotoContainer(container)}\n                                    >\n                                        {trans('warehouse.invoice.title')}:{' '}\n                                        <span className=\"font-weight-bold text-primary\">\n                                            {container.id}\n                                        </span>\n                                    </div>\n                                    <div className=\"container-shipping_date\">\n                                        {container.shipping_date\n                                            ? `Ngày giao hàng: ${container.shipping_date}`\n                                            : '---'}\n                                    </div>\n                                </div>\n                            ))}\n                        </div>\n                    </div>\n                ));\n            }\n        }\n    ];\n\n    const getQuantityBoxInWarehouse = useCallback(row => {\n        return row.quantity_inventory;\n    }, []);\n\n    const getQuantityProductInBox = useCallback(row => {\n        let quantityProduct = 0;\n\n        if (row?.items?.length) {\n            quantityProduct =\n                find(row.items, [\n                    'product_id',\n                    locationSearch['items.product_id']\n                ])?.quantity || 0;\n        }\n\n        return {\n            total: quantityProduct * row.duplicate,\n            inWH: getQuantityBoxInWarehouse(row) * quantityProduct\n        };\n    }, [getQuantityBoxInWarehouse, locationSearch]);\n\n    const activeColumns = useMemo(() => {\n        return columns\n            .filter(c => c.show)\n            .map(c => {\n                const matchedColumn = _.find(COLUMNS, ['key', c.id]);\n\n                return matchedColumn;\n            });\n    }, [columns, COLUMNS]); // eslint-disable-line\n\n    const gotoPerformEntry = row => {\n        window.open(\n            `/warehouse/inbound/step-2/${row.sfa_id}/${row.id}`,\n            '_blank'\n        );\n    };\n\n    const gotoLadingBill = lading_bill => {\n        window.open(`/warehouse/lading-bills/${lading_bill.id}`, '_blank');\n    };\n\n    const gotoContainer = container => {\n        window.open(`/warehouse/container/detail/${container.id}`, '_blank');\n    };\n\n    return [activeColumns];\n}\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\n\nimport productApi from 'apis/product-api/productApi';\nimport queryString from 'query-string';\nimport _ from 'lodash';\n\nimport { Card, CardBody } from '_metronic/_partials/controls';\nimport Loading from 'app/components/Loading';\nimport EmptyData from 'app/components/EmptyData';\nimport formatNumber from 'helper/formatNumber';\n\nimport './index.scss';\n\nconst FilterJancodeExtraData = props => {\n\n    const [product, setProduct] = useState();\n    const [loading, setLoading] = useState(false);\n    const location = useLocation();\n\n    const locationSearch = useMemo(() => {\n        return queryString.parse(location.search);\n    }, [location]);\n\n    useEffect(() => {\n        if (locationSearch?.['items.product_id']) {\n            setLoading(true);\n            productApi.fetchProductById({ id: locationSearch?.['items.product_id'] })\n                .then(res => {\n                    setProduct(res);\n                })\n                .finally(() => {\n                    setLoading(false);\n                })\n        }\n    }, [locationSearch]);\n\n    const boxes = useSelector(state => state.warehouse.dashboard.boxes);\n\n    const getTotalItems = useMemo(() => {\n        const jancode = locationSearch['items.product_id'];\n\n        return boxes.reduce((prevV, curBox) => {\n            let itemInBox = _.find(curBox.items, ['product_id', jancode]);\n\n            if (!itemInBox) return prevV;\n\n            return prevV + (itemInBox.quantity * curBox.duplicate);\n        }, 0);\n    }, [locationSearch, boxes]);\n\n    const getQuantityBoxInWH = useCallback((box) => {\n        let quantityOutWH = 0;\n        if (box?.owners?.length) {\n            quantityOutWH = _.reduce(box?.owners, (oP, oC) => {\n                if (oC?.box_lading_bills?.length) {\n                    return oP + _.reduce(oC?.box_lading_bills, (prevV, curV) => {\n                        return prevV + curV.quantity;\n                    }, 0);\n                }\n\n                return oP;\n            }, 0);\n        }\n\n        return box.duplicate - quantityOutWH;\n    }, []);\n\n    const getQuantityItemsInWH = useMemo(() => {\n        const jancode = locationSearch['items.product_id'];\n\n        return boxes.reduce((prevV, curBox) => {\n            let itemInBox = _.find(curBox.items, ['product_id', jancode]);\n\n            if (!itemInBox) return prevV;\n\n            return prevV + (itemInBox.quantity * getQuantityBoxInWH(curBox));\n        }, 0);\n\n    }, [locationSearch, boxes, getQuantityBoxInWH]);\n\n    return (\n        <Card className=\"filter-jancode-extra-data\">\n            <CardBody className=\"position-relative\">\n                {loading && <Loading local />}\n                {!loading && !product && <EmptyData />}\n                {product && (\n                    <div className=\"d-flex\">\n                        <div className=\"product-identify\">\n                            <div className=\"product-id\">{product.id}</div>\n                            {product?.images?.url && (\n                                <div className=\"image-section\">\n                                    <img src={product?.images?.url} alt=\"Search product\" />\n                                </div>\n                            )}\n                        </div>\n\n                        <div className=\"product-content\">\n                            <div className=\"product-name\">{product?.name}</div>\n                            <div className=\"product-price\">Giá: {formatNumber(product?.price)}</div>\n                            <div className=\"product-ingredients\">Thành phần: {product?.ingredients}</div>\n                        </div>\n                    </div>\n                )}\n            </CardBody>\n            <div className=\"card-footer position-relative\">\n                {loading && <Loading local />}\n                <div>Tổng số lượng sản phẩm: {formatNumber(getTotalItems)}</div>\n                <div>Số lượng sản phẩm hiện tại trong kho: {formatNumber(getQuantityItemsInWH)}</div>\n            </div>\n        </Card>\n    );\n};\n\nFilterJancodeExtraData.propTypes = {\n\n};\n\nexport default FilterJancodeExtraData;","import React, {useMemo} from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport queryString from 'query-string';\n\nimport FilterJancodeExtraData from './FilterJancodeExtraData';\n\nimport './index.scss';\n\nconst FilterExtraData = props => {\n\n    const location = useLocation();\n\n    const locationSearch = useMemo(() => {\n        return queryString.parse(location.search);\n    }, [location]);\n\n    if(locationSearch['items.product_id']) return <FilterJancodeExtraData />\n\n    return <></>;\n};\n\nFilterExtraData.propTypes = {\n    \n};\n\nexport default FilterExtraData;","import React, { useCallback, useEffect, useState } from 'react';\n\nimport warehouseApi from 'apis/warehouse';\nimport moment from 'moment';\n\nimport { Card, CardBody } from '_metronic/_partials/controls';\nimport Loading from 'app/components/Loading';\n\nconst momentFormatter = \"YYYY-MM-DD\"\n\nconst SFACreatedToday = props => {\n\n    const [total, setTotal] = useState(0);\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        getDataSFA();\n    }, []); // eslint-disable-line\n\n    const getDataSFA = useCallback(() => {\n        setLoading(true);\n        return warehouseApi.SFA.fetchSFAs({\n            search: `created_at:${moment().format(momentFormatter)}`,\n            searchFields: `created_at:like`\n        }).then(res => {\n            setTotal(res.total);\n        }).finally(() => {\n            setLoading(false);\n        })\n    }, []); // eslint-disable-line\n\n    return (\n        <Card className=\"sfa-created-today dashboard-info-box wave wave-animate wave-primary\">\n            <CardBody>\n                {loading && <Loading local />}\n                <div className=\"title\">SFA đã tạo hôm nay</div>\n                <div className=\"total\">{total}</div>\n            </CardBody>\n        </Card>\n    );\n};\n\nexport default SFACreatedToday;","import React, { useCallback, useEffect, useState } from 'react';\n\nimport warehouseApi from 'apis/warehouse';\nimport moment from 'moment';\n\nimport { Card, CardBody } from '_metronic/_partials/controls';\nimport Loading from 'app/components/Loading';\n\nconst momentFormatter = \"YYYY-MM-DD\"\n\nconst BoxCreatedToday = props => {\n\n    const [total, setTotal] = useState(0);\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        getDataBox();\n    }, []); // eslint-disable-line\n\n    const getDataBox = useCallback(() => {\n        setLoading(true);\n        return warehouseApi.box.fetchBoxs({\n            search: `created_at:${moment().format(momentFormatter)}`,\n            searchFields: `created_at:like`\n        }).then(res => {\n            setTotal(res.total);\n        }).finally(() => {\n            setLoading(false);\n        })\n    }, []); // eslint-disable-line\n\n    return (\n        <Card className=\"box-created-today dashboard-info-box wave wave-animate wave-success\">\n            <CardBody>\n                {loading && <Loading local />}\n                <div className=\"title\">Thùng đã tạo hôm nay</div>\n                <div className=\"total\">{total}</div>\n            </CardBody>\n        </Card>\n    );\n};\n\nexport default BoxCreatedToday;","import React, { useCallback, useEffect, useState } from 'react';\n\nimport trackingApi from 'apis/order/trackingApi';\nimport moment from 'moment';\n\nimport { Card, CardBody } from '_metronic/_partials/controls';\nimport Loading from 'app/components/Loading';\n\nconst momentFormatter = \"YYYY-MM-DD\"\n\nconst TrackingWillComingToday = props => {\n\n    const [total, setTotal] = useState(0);\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        getDataBox();\n    }, []); // eslint-disable-line\n\n    const getDataBox = useCallback(() => {\n        setLoading(true);\n        return trackingApi.fetchTracking({\n            search: `expected_delivery:${moment().format(momentFormatter)}`,\n        }).then(res => {\n            setTotal(res.total);\n        }).finally(() => {\n            setLoading(false);\n        })\n    }, []); // eslint-disable-line\n\n    return (\n        <Card className=\"tracking-will-coming-today dashboard-info-box wave wave-animate-slow wave-warning\">\n            <CardBody>\n                {loading && <Loading local />}\n                <div className=\"title\">Tracking sẽ đến hôm nay</div>\n                <div className=\"total\">{total}</div>\n            </CardBody>\n        </Card>\n    );\n};\n\nexport default TrackingWillComingToday;","import React from 'react';\nimport { Card, CardBody, CardHeader } from '_metronic/_partials/controls';\n\nconst RequestPackingBox = props => {\n    return (\n        <Card>\n            <CardHeader title=\"Yêu cầu gộp thùng\"></CardHeader>\n            <CardBody></CardBody>\n        </Card>\n    );\n};\n\nexport default RequestPackingBox;","import React from 'react';\nimport { Card, CardBody, CardHeader } from '_metronic/_partials/controls';\n\nconst JobCheckingList = props => {\n    return (\n        <Card>\n            <CardHeader title=\"Danh sách việc cần làm\"></CardHeader>\n            <CardBody></CardBody>\n        </Card>\n    );\n};\n\nexport default JobCheckingList;","import React from 'react';\n\nimport FilterList from './FilterList';\nimport TableSKU from './TableSKU';\nimport FilterExtraData from './FilterExtraData';\nimport SFACreatedToday from './SFACreatedToday';\nimport BoxCreatedToday from './BoxCreatedToday';\nimport TrackingWillComingToday from './TrackingWillComingToday';\nimport RequestPackingBox from './RequestPackingBox';\nimport JobCheckingList from './JobCheckingList';\n\nimport './index.scss';\n\nconst WHDashboard = props => {\n    return (\n        <div className=\"p-4 wh-dashboard\">\n            <div className=\"row\">\n                <div className=\"col-lg-4 com-sm-12\">\n                    <SFACreatedToday />\n                </div>\n                <div className=\"col-lg-4 com-sm-12\">\n                    <BoxCreatedToday />\n                </div>\n                <div className=\"col-lg-4 com-sm-12\">\n                    <TrackingWillComingToday />\n                </div>\n            </div>\n\n            <div className=\"row\">\n                <div className=\"col-lg-6 col-sm-12\">\n                    <RequestPackingBox />\n                </div>\n                <div className=\"col-lg-6 col-sm-12\">\n                    <JobCheckingList />\n                </div>\n            </div>\n\n            <FilterList />\n            <FilterExtraData />\n            <TableSKU />\n        </div>\n    );\n};\n\nWHDashboard.propTypes = {\n\n};\n\nexport default WHDashboard;","const { createSelector } = require(\"reselect\");\n\nconst selectCurrentContainerIdx = state => state.warehouse.downContainer.currentContainer;\nconst selectListInvoices = state => state.warehouse.downContainer.listInvoices.data;\n\nconst getCurrentContainer = createSelector(\n    [selectCurrentContainerIdx, selectListInvoices],\n    (currentContainerIdx, listInvoices) => {\n        const currentContainer = listInvoices[currentContainerIdx];\n\n        return currentContainer;\n    }\n)\n\nexport default getCurrentContainer;","import getCurrentContainer from \"./getCurrentContainer\";\n\nconst { createSelector } = require(\"reselect\");\n\nconst getTargetBoxes = createSelector(\n    [getCurrentContainer],\n    (currentContainer) => {\n        let targetBoxes = {};\n\n        if (!currentContainer) return targetBoxes;\n\n        currentContainer.lading_bills.forEach(ladingBill => {\n            targetBoxes = ladingBill.box_lading_bills.reduce((prevV, curV) => {\n                if (prevV[curV.owning_box.box_id]) prevV[curV.owning_box.box_id].quantity += curV.quantity;\n                else prevV[curV.owning_box.box_id] = {\n                    quantity: curV.quantity,\n                    count: 0,\n                    out: 0\n                }\n\n                return prevV;\n            }, { ...targetBoxes });\n        });\n\n        targetBoxes = currentContainer.in_pickers.reduce((prevV, curV) => {\n            if (prevV[curV.box_id]) prevV[curV.box_id].count += curV.quantity;\n            else prevV[curV.box_id] = {\n                count: curV.quantity,\n                quantity: 0,\n                out: 0\n            }\n\n            return prevV;\n        }, { ...targetBoxes });\n\n        targetBoxes = currentContainer.out_pickers.reduce((prevV, curV) => {\n            if (prevV[curV.box_id]) prevV[curV.box_id].out += curV.quantity;\n            else prevV[curV.box_id] = {\n                out: curV.quantity,\n            }\n\n            return prevV;\n        }, { ...targetBoxes });\n\n        return targetBoxes;\n    }\n)\n\nexport default getTargetBoxes;","import React from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { addInvoice } from 'app/modules/Warehouse/warehouse-redux/downContainerSlice';\nimport SelectInvoice from 'app/components/Select/SelectInvoice';\n\nconst InputAddInvoice = props => {\n\n    const dispatch = useDispatch();\n\n    const handleSelectInvoice = (v) => {\n        dispatch(addInvoice({ id: v }));\n    }\n\n    return (\n        <SelectInvoice onChange={handleSelectInvoice} showLabel={false} />\n    );\n};\n\nInputAddInvoice.propTypes = {\n\n};\n\nexport default InputAddInvoice;","import React, { useMemo } from 'react';\n\nimport clsx from 'clsx';\nimport formatNumber from 'helper/formatNumber';\nimport _ from 'lodash';\n\nimport './index.scss';\n\nconst listColors = [\"#f5222d\", \"#fa541c\", \"#fa8c16\", \"#faad14\", \"#d4b106\", \"#a0d911\", \"#52c41a\", \"#13c2c2\", \"#1890ff\", \"#2f54eb\", \"#722ed1\", \"#eb2f96\", \"#bfbfbf\"]\n\nconst TargetBoxes = ({\n    targetBoxes = {},\n    currentContainer,\n    countRendering = (v) => `${formatNumber(v.count || 0)} / ${formatNumber(v.quantity)}`,\n    labelPrefix = \"Invoice\",\n    onRemoveTarget\n}) => {\n\n    const shuffleColorList = useMemo(() => {\n        return _.shuffle(listColors);\n    }, []);\n\n    const getBGColor = (idx) => {\n        const rIdx = idx % listColors.length;\n\n        return hexToRgba(shuffleColorList[rIdx]) || shuffleColorList[rIdx];\n    }\n\n    function hexToRgba(hex) {\n        var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n\n        if (result)\n            return `rgba(${parseInt(result[1], 16)}, ${parseInt(result[2], 16)}, ${parseInt(result[3], 16)}, .5)`;\n\n        return null;\n    }\n\n    const handleRemoveInvoice = (c) => {\n        onRemoveTarget && onRemoveTarget(c);\n    }\n\n    if (!currentContainer) return <></>;\n\n    return (\n        <div className=\"target-boxes shadow-sm\">\n            <div className=\"invoice-item\" style={{ background: getBGColor(currentContainer.id) }}>\n                <div className=\"invoice-item-head\">\n                    - {labelPrefix} {currentContainer.id} -\n                    {onRemoveTarget && (\n                        <span aria-hidden=\"true\" className=\"remove-btn\" onClick={() => handleRemoveInvoice(currentContainer)}>&times;</span>\n                    )}\n                </div>\n                <div className=\"list-boxes\">\n                    {Object.entries(targetBoxes).map(([boxId, v], bIdx) => (\n                        <div className={clsx(`box-data`, !v.quantity && 'warning')} key={`box-data-${bIdx}`}>\n                            <div className=\"box-id\">{boxId}</div>\n                            <div className=\"count\">{countRendering(v)}</div>\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nTargetBoxes.propTypes = {\n\n};\n\nexport default TargetBoxes;","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { downContainerAction } from 'app/modules/Warehouse/warehouse-redux/downContainerSlice';\nimport getTargetBoxes from 'app/modules/Warehouse/selector/DownContainer/targetBoxesSelector';\nimport formatNumber from 'helper/formatNumber';\nimport getCurrentContainer from 'app/modules/Warehouse/selector/DownContainer/getCurrentContainer';\n\nimport { Card } from '_metronic/_partials/controls';\nimport InputAddInvoice from './InputAddInvoice';\nimport TargetBoxes from 'app/modules/Warehouse/components/WarehouseIO/TargetBoxes';\n\nimport './index.scss';\n\nconst TargetSection = props => {\n    const targetBoxes = useSelector(getTargetBoxes);\n    const currentContainer = useSelector(getCurrentContainer);\n    const dispatch = useDispatch();\n\n    const handleRemoveInvoice = (c) => {\n        dispatch(downContainerAction.removeInvoiceByIdx(c));\n    }\n\n    return (\n        <Card className=\"target-section\">\n            <InputAddInvoice />\n            <TargetBoxes\n                targetBoxes={targetBoxes}\n                currentContainer={currentContainer}\n                onRemoveTarget={handleRemoveInvoice}\n                countRendering={(v) => `${formatNumber(v.out || 0)} / ${formatNumber(v.count || 0)} / ${formatNumber(v.quantity)}`}\n            />\n        </Card>\n    );\n};\n\nTargetSection.propTypes = {\n\n};\n\nexport default TargetSection;","import getCurrentContainer from \"./getCurrentContainer\";\nconst { createSelector } = require(\"reselect\");\n\nconst getAllMessage = state => state.warehouse.downContainer.process.message;\n\nconst getDownContMessages = createSelector(\n    [getCurrentContainer, getAllMessage],\n    (currentContainer, allMessages) => {\n\n        if (!currentContainer || !allMessages.length) return [];\n\n        return allMessages.filter(m => m.container.id === currentContainer.id);\n    }\n)\n\nexport default getDownContMessages;","const { createSelector } = require(\"reselect\");\n\nconst selectCurrentPalletIdx = state => state.warehouse.downContainer.currentPallet;\nconst selectListPallets = state => state.warehouse.downContainer.listPallets.data;\n\nconst getcurrentPallet = createSelector(\n    [selectCurrentPalletIdx, selectListPallets],\n    (currentPalletIdx, listPallets) => {\n        const currentPallet = listPallets[currentPalletIdx];\n\n        return currentPallet;\n    }\n)\n\nexport default getcurrentPallet;","/**\n * Lấy list máy in\n * --> Chọn máy in\n * --> Gửi data tới máy in\n * --> Printer running\n * --> Notify result\n */\n\n/** Data máy in sẽ nhận được */\n\nconst TEMPLATE_DATA = {\n    type: \"\",\n    pageSize: \"2990\",\n    palletId: \"undefined\",\n    tracking: \"undefined\",\n    jancode: \"undefined\",\n    sfaId: \"undefined\",\n    quantity: \"1\",\n    region: \"Tokyo\",\n    sku: \"undefined\",\n    map: \"undefined\",\n    startIndex: \"1\",\n    locationId: \"undefined\",\n    floor: \"undefined\",\n    row: \"undefined\",\n    column: \"undefined\",\n    createdDate: \"undefined\",\n    itemQuantity: \"undefined\",\n    sfaQuantity: \"undefined\"\n}\n\nexport const getTemplateData = (type, data) => {\n\n    console.log({\n        ...applyDataToTemplate(data),\n        type,\n    }, 'templateData')\n\n    return JSON.stringify({\n        ...applyDataToTemplate(data),\n        type,\n    });\n}\n\nconst applyDataToTemplate = (obj) => {\n    let newObj = { ...TEMPLATE_DATA };\n    Object.entries(obj).forEach(([k, v]) => {\n        if (newObj[k] && v !== undefined && v !== null) newObj[k] = v.toString();\n    });\n\n    return newObj;\n}\n\n/**\n * Reference:\n * 1: https://stackoverflow.com/questions/37744569/how-nodejs-send-p-touch-template-command-to-ql-720nw\n * 2: https://github.com/KingWu/NodePrinterExample/blob/master/app.js\n */","import React, { useMemo, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport useTrans from 'helper/useTrans';\n\nimport { isPalletCode, isSKUCode, useScanBarcode } from 'helper/useScanBarcode';\nimport getCurrentContainer from 'app/modules/Warehouse/selector/DownContainer/getCurrentContainer';\nimport useInputAdd from './useInputAdd';\n\nimport Button from 'app/components/Button';\n\nimport './index.scss';\nimport usePermission from 'app/components/NeedPermission/usePermission';\n\nconst InputAddData = props => {\n\n    const inputRef = useRef();\n    const currentContainer = useSelector(getCurrentContainer);\n    const [trans] = useTrans();\n    const canDownCont = usePermission(['out-container-pickers.create']);\n\n    const { loadBox, addPallet, addNewPallet } = useInputAdd();\n\n    useScanBarcode({\n        condition: () => canDownCont,\n        onEnter: (v) => handleScanEnter(v),\n    });\n\n    const handleScanEnter = (value) => {\n\n        setTimeout(() => {\n            inputRef.current.value = '';\n        }, 100);\n\n        if (!value || !value?.length) return;\n\n        if (isSKUCode(value)) loadBox(value);\n        else if (isPalletCode(value)) addPallet(value);\n    }\n\n    const handleEnterInput = (e) => {\n        if (e.charCode === 13) {\n            handleScanEnter(e.target.value);\n        }\n    }\n\n    const isDisabledInput = useMemo(() => {\n        return !currentContainer || !canDownCont;\n    }, [currentContainer, canDownCont]);\n\n    return (\n        <div className=\"input-add-data\">\n            <input\n                className=\"form-control\"\n                placeholder={trans(\"warehouse.container.input.barcode\")}\n                ref={inputRef}\n                onKeyPress={handleEnterInput}\n                disabled={isDisabledInput}\n            />\n\n            {!!currentContainer && (\n                <div className=\"d-flex align-items-center justify-content-end\">\n                    {trans(\"warehouse.pallet.empty\")}?\n                    <Button type=\"link\" onClick={addNewPallet} need={['pallets.create']}>{trans(\"warehouse.pallet.create.title\")}</Button>\n                </div>\n            )}\n        </div>\n    );\n};\n\nInputAddData.propTypes = {\n\n};\n\nexport default InputAddData;","import { useEffect } from 'react';\nimport useTrans from 'helper/useTrans';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport getCurrentContainer from 'app/modules/Warehouse/selector/DownContainer/getCurrentContainer';\nimport getcurrentPallet from 'app/modules/Warehouse/selector/DownContainer/getCurrentPallet';\nimport {\n    downContainerAction,\n    loadUpBox\n} from 'app/modules/Warehouse/warehouse-redux/downContainerSlice';\n\nimport warehouseApi from 'apis/warehouse';\nimport { startPrinter } from 'app/components/PrinterModal';\nimport { getTemplateData } from 'helper/printerTemplateData';\n\nimport { dialog } from 'app/components/DialogNotify';\nimport { fetchPalletTypes } from 'app/modules/Warehouse/warehouse-redux/palletTypeSlice';\n\nexport default function useInputAdd() {\n    const listPalletType = useSelector(state => state.warehouse.palletType.list.data);\n    const currentPallet = useSelector(getcurrentPallet);\n    const currentContainer = useSelector(getCurrentContainer);\n    const [trans] = useTrans();\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (!listPalletType?.length) dispatch(fetchPalletTypes());\n    }, []); // eslint-disable-line\n\n    const loadBox = box_id => {\n        /** Nếu chưa có container --> WARNING */\n        if (!currentContainer) {\n            dialog.warning(trans('warehouse.container.warning.less_invoice'));\n\n            return;\n        }\n\n        /** Chưa có pallet được chọn --> WARNING */\n        if (!currentPallet) {\n            dialog.warning(trans('warehouse.container.warning.less_pallet'));\n\n            return;\n        }\n\n        /** Gọi api load-out box */\n        dispatch(loadUpBox({ id: box_id, pallet_id: currentPallet.id })).then(res => {\n            if (!res.type.includes('fulfilled')) {\n                dialog.error(\n                    trans('warehouse.container.add_box.failure', {\n                        data: box_id\n                    })\n                );\n            }\n        });\n    };\n\n    // const addBoxToPallet = data => {\n    //     dispatch(downContainerAction.addBoxToPalletBoxes(data.box_id));\n    // };\n\n    /** Pick chọn pallet ID */\n    const addPallet = palletId => {\n        warehouseApi.pallet\n            .fetchPallet(palletId, { with: 'location.shelve.area;pivotBoxes' })\n            .then(res => {\n                dispatch(downContainerAction.addPallet(res));\n                dialog.success(trans('warehouse.pallet.select.success'));\n            })\n            .catch(() => {\n                dialog.error(trans('warehouse.pallet.add.failure'));\n            });\n    };\n\n    /** Thêm mới pallet */\n    const addNewPallet = (e) => {\n        e && e.target.blur();\n\n        warehouseApi.pallet\n            .create({ type_id: listPalletType?.[0]?.id })\n            .then(res => {\n                startPrinter(\n                    getTemplateData('PALLET', { ...res, palletId: res.id, quantity: 2 })\n                );\n                dialog.success(trans('warehouse.pallet.select.success'));\n\n                addPallet(res.id);\n            })\n            .catch(() => {\n                dialog.error(\n                    trans('warehouse.pallet.add.empty_pallet.failure')\n                );\n            });\n    };\n\n    return { loadBox, addPallet, addNewPallet };\n}\n","import React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { fetchLocations } from 'app/modules/Warehouse/warehouse-redux/locationSlice';\nimport { isLocationCode, useScanBarcode } from 'helper/useScanBarcode';\nimport useTrans from 'helper/useTrans';\n\nimport TMNBaseSelect from '../BaseSelect';\n\nimport './index.scss';\n\nconst SelectLocation = ({ onChange, value, showLabel = true, defaultQuery = {}, ...props }) => {\n    const locationList = useSelector(state => state.warehouse.location.list.data);\n    const loading = useSelector(state => state.warehouse.location.list.loading);\n    const dispatch = useDispatch();\n    const [trans] = useTrans();\n\n    const makeOption = useCallback((i) => ({\n        value: i?.id,\n        label: trans(\"warehouse.location.option_label\", {\n            id: i?.id,\n            shelve_info: i?.shelve?.id ? `${i?.shelve?.id} (F${i?.floor} . R${i?.row} . C${i?.column})` : '---',\n            area_name: i?.shelve?.area?.name || '---'\n        })\n    }), [trans]);\n\n    const locationOptions = locationList?.map(item => makeOption(item));\n\n    useScanBarcode({\n        condition: isLocationCode,\n        onEnter: (v) => { onChange(v) }\n    });\n\n    const getParams = useCallback((myParams) => {\n        let params = { ...defaultQuery };\n\n        Object.entries(myParams).forEach(([key, value]) => {\n            if (params[key]) params[key] += `;${value}`;\n            else params[key] = value;\n        });\n\n        return params;\n    }, [defaultQuery]);\n\n    const handleSelect = option => {\n        onChange && onChange(option.value);\n    };\n\n    const fetchData = (params) => {\n        dispatch(fetchLocations(getParams({ ...params, with: 'shelve.area' })));\n    }\n\n    return (\n        <TMNBaseSelect\n            value={value}\n            label={showLabel && trans(\"warehouse.location.title\")}\n            className=\"select-location\"\n            placeholder={trans(\"warehouse.location.find\")}\n            options={locationOptions}\n            onChange={handleSelect}\n            loading={loading}\n            onFetchData={fetchData}\n            {...props}\n        />\n    );\n};\n\nSelectLocation.propTypes = {\n    onChange: PropTypes.func,\n    value: PropTypes.any,\n    showLabel: PropTypes.bool,\n    defaultQuery: PropTypes.any\n};\n\nexport default SelectLocation;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport clsx from 'clsx';\n\nimport SelectLocation from './index';\nimport { useField, useFormikContext } from \"formik\";\n\nconst SelectLocationForm = ({ name, ...props }) => {\n\n    const [field, meta] = useField(name);\n    const { setFieldTouched, setFieldValue } = useFormikContext();\n    const { error, touched } = meta;\n\n    const handleClick = () => {\n        setFieldTouched(field.name);\n    }\n\n    const handleChange = (v) => {\n        setFieldValue(name, v);\n    }\n\n    return (\n        <div className={clsx(touched && error && 'is-invalid')}>\n            <SelectLocation\n                value={field.value}\n                onChange={handleChange}\n                onClick={handleClick}\n                {...props}\n            />\n\n            {touched && error && (\n                <div className=\"invalid-feedback d-block\">{error}</div>\n            )}\n        </div>\n    );\n};\n\nSelectLocationForm.propTypes = {\n    value: PropTypes.any,\n    onChange: PropTypes.func,\n    withFeedbackLabel: PropTypes.bool\n};\n\nexport default SelectLocationForm;","import React from 'react';\n\nimport warehouseApi from 'apis/warehouse';\nimport handleApiError from 'helper/handleApiError';\n\nimport { Form, Formik } from 'formik';\nimport { Button, Modal } from 'react-bootstrap';\nimport * as Yup from 'yup';\nimport SelectLocationForm from 'app/components/Select/SelectLocation/SelectLocationForm';\nimport useTrans from 'helper/useTrans';\n\nexport const savePalletSchema = Yup.object().shape({\n    location_id: Yup.string().required('Required')\n});\n\nconst FormSelectLocation = ({ setLoading, closeModal, onSuccess, id, toggleFormSelected }, ref) => {\n\n    const [trans] = useTrans();\n\n    const handleSavePallet = (values, form) => {\n        setLoading(true);\n        warehouseApi.pallet.update(id, values)\n            .then((res) => {\n                onSuccess && onSuccess(res);\n                closeModal();\n            })\n            .catch((err) => {\n                handleApiError(err, form);\n            })\n            .finally(() => {\n                setLoading(false);\n            })\n    }\n\n    return (\n        <Formik\n            initialValues={{\n                location_id: ''\n            }}\n            enableReinitialize\n            validationSchema={savePalletSchema}\n            onSubmit={handleSavePallet}\n            innerRef={ref}\n        >\n            {({ handleSubmit }) => (\n                <div className=\"modal-save-pallet\">\n                    <Modal.Body>\n                        <Form>\n                            <SelectLocationForm name=\"location_id\" defaultQuery={{ criteria: 'PalletEmpty' }} />\n                            <small>{trans(\"warehouse.location.no_have_position\")} ? <button className=\"btn btn-link\" onClick={toggleFormSelected}>{trans(\"warehouse.location.create.title\")}</button></small>\n                        </Form>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={closeModal} className=\"btn-large\">{trans(\"common.cancel\")}</Button>\n                        <Button variant=\"primary\" onClick={handleSubmit} className=\"btn-large\">{trans(\"common.save\")}</Button>\n                    </Modal.Footer>\n                </div>\n            )}\n        </Formik>\n    );\n};\n\nexport default React.forwardRef(FormSelectLocation);","import React, { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport _ from 'lodash';\nimport clsx from 'clsx';\n\nimport Select from 'react-select';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchShelves } from 'app/modules/Warehouse/warehouse-redux/shelveSlice';\nimport { useFormikContext, useField } from 'formik';\n\nimport './CustomShelveSelect.scss';\n\nconst CustomShelveSelect = ({ label, ...props }) => {\n    const [inputValue, setInputValue] = useState('');\n    const [field, meta] = useField(props);\n    const { values, setFieldValue } = useFormikContext();\n    const { data } = useSelector(state => state.warehouse.shelve.list);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (values.area_id) {\n\n            let params = { search: `area_id:${values.area_id}`, searchJoin: 'and', searchField: `area_id:=` };\n\n            if (inputValue) {\n                params.search += `;id:${inputValue}`;\n                params.searchField += `;id:like`;\n            }\n\n            dispatch(fetchShelves(params));\n        }\n    }, [values.area_id, inputValue]); // eslint-disable-line\n\n    const options = useMemo(() => {\n        return data.map(shelve => {\n            return { value: shelve.id, label: shelve.id };\n        })\n    }, [data]);\n\n    const handleInputValueChange = (v) => {\n        dispatchToState(v);\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const dispatchToState = useCallback(_.debounce((v) => {\n        setInputValue(v)\n    }, 700), []); // eslint-disable-line\n\n    const onChange = (selectedOption) => {\n        setFieldValue(field.name, selectedOption.value);\n    }\n\n    const selectValue = useMemo(() => {\n        if (values[field.name])\n            return { value: values[field.name], label: values[field.name] }\n\n        return undefined;\n    }, [values, field]);\n\n    return (\n        <div className=\"w-100 custom-shelve-select\">\n            <label className={clsx(meta.error && \"is-invalid\", 'w-100')}>\n                {label}\n                <Select className=\"react-cm-select\" value={selectValue} options={options} onInputChange={handleInputValueChange} onChange={onChange} />\n            </label>\n            {meta.error ? (\n                <div className=\"invalid-feedback\">{meta.error}</div>\n            ) : null}\n        </div>\n    );\n};\n\nCustomShelveSelect.propTypes = {\n\n};\n\nexport default CustomShelveSelect;","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { fetchAreas } from 'app/modules/Warehouse/warehouse-redux/areaSlice';\nimport _ from 'lodash';\n\nimport { Select, Input } from '_metronic/_partials/controls';\nimport CustomShelveSelect from './CustomShelveSelect';\nimport { FastField, Form, Formik } from 'formik';\nimport FormStatus from '../FormStatus';\nimport useTrans from 'helper/useTrans';\nimport * as Yup from 'yup';\n\nimport './index.scss';\n\nconst FormAddLocation = ({\n    onSubmit,\n    initialValues = {\n        area_id: '',\n        shelve_id: '',\n        floor: 1,\n        row: 1,\n        column: 1\n    }\n}, ref) => {\n    const areaList = useSelector(state => state.warehouse.area.list);\n    const dispatch = useDispatch();\n    const [trans] = useTrans();\n\n    const validationSchema = Yup.object().shape({\n        shelve_id: Yup.string().required(trans(\"validation.message.required\")),\n        floor: Yup.number().min(1, trans(\"validation.message.min\", { min: 1 })),\n        row: Yup.number().min(1, trans(\"validation.message.min\", { min: 1 })),\n        column: Yup.number().min(1, trans(\"validation.message.min\", { min: 1 }))\n    });\n\n    useEffect(() => {\n        if (!areaList.length) {\n            dispatch(fetchAreas());\n        }\n    }, []); // eslint-disable-line\n\n    const handleSubmit = (values, form) => {\n        onSubmit && onSubmit(_.omit(values, 'area_id'), form);\n    }\n\n    return (\n        <Formik\n            initialValues={initialValues}\n            enableReinitialize\n            validationSchema={validationSchema}\n            onSubmit={handleSubmit}\n            innerRef={ref}\n        >\n            <Form className=\"form-add-location\">\n                <div className=\"row\">\n                    <div className=\"col-lg-6 col-sm-12\">\n                        <Select\n                            name=\"area_id\"\n                            placeholder={trans(\"warehouse.area.title\")}\n                            label={trans(\"warehouse.area.title\")}\n                        >\n                            {areaList.map((area, idx) => (\n                                <option value={area.id} key={`select-option-${idx}`}>\n                                    {area.name}\n                                </option>\n                            ))}\n                        </Select>\n                    </div>\n                    <div className=\"col-lg-6 col-sm-12\">\n                        <CustomShelveSelect name=\"shelve_id\" label={trans(\"warehouse.shelve.title\")} />\n                    </div>\n                </div>\n\n                <div className=\"row\">\n                    <div className=\"col-lg-4 col-sm-12\">\n                        <FastField\n                            name=\"floor\"\n                            label={trans(\"common.floor\")}\n                            component={Input}\n                            type=\"number\"\n                        />\n                    </div>\n                    <div className=\"col-lg-4 col-sm-12\">\n                        <FastField\n                            name=\"row\"\n                            label={trans(\"common.row\")}\n                            component={Input}\n                            type=\"number\"\n                        />\n                    </div>\n                    <div className=\"col-lg-4 col-sm-12\">\n                        <FastField\n                            name=\"column\"\n                            label={trans(\"common.column\")}\n                            component={Input}\n                            type=\"number\"\n                        />\n                    </div>\n                </div>\n\n                <FormStatus />\n            </Form>\n        </Formik>\n    );\n};\n\nexport default React.forwardRef(FormAddLocation);","import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport warehouseApi from 'apis/warehouse';\nimport handleApiError from 'helper/handleApiError';\nimport { fetchLocations } from 'app/modules/Warehouse/warehouse-redux/locationSlice';\n\nimport { Button, Modal } from 'react-bootstrap';\nimport FormAddLocation from '../../../Form/FormAddLocation';\nimport { startPrinter } from 'app/components/PrinterModal';\nimport { getTemplateData } from 'helper/printerTemplateData';\nimport useTrans from 'helper/useTrans';\n\nconst FormCreateLocation = ({ setLoading, onSuccess, toggleFormSelected }) => {\n\n    const areaList = useSelector(state => state.warehouse.area.list);\n    const dispatch = useDispatch();\n    const formRef = useRef();\n    const [trans] = useTrans();\n\n    const handleSaveLocation = (values, form) => {\n        setLoading(true);\n        warehouseApi.location.create(values)\n            .then((res) => {\n\n                startPrinter(getTemplateData('LOCATION', {\n                    locationId: res.id,\n                    floor: res.floor,\n                    row: res.row,\n                    column: res.column,\n                    quantity: 2\n                }));\n\n                dispatch(fetchLocations({ with: 'shelve.area', orderBy: 'updated_at', sortedBy: 'asc', })).then(() => {\n                    onSuccess && onSuccess(res);\n                });\n            })\n            .catch((err) => {\n                handleApiError(err, form);\n            })\n            .finally(() => {\n                setLoading(false);\n            })\n    }\n\n    const triggerSubmit = () => {\n        formRef.current.submitForm();\n    }\n\n    return (\n        <div className=\"modal-create-location\">\n            <Modal.Body>\n                <FormAddLocation\n                    initialValues={{\n                        area_id: areaList?.[0]?.id,\n                        shelve_id: '',\n                        floor: 1,\n                        row: 1,\n                        column: 1\n                    }}\n                    onSubmit={handleSaveLocation}\n                    ref={formRef}\n                />\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={toggleFormSelected} className=\"btn-large\">{trans(\"common.back\")}</Button>\n                <Button variant=\"primary\" onClick={triggerSubmit} className=\"btn-large\">{trans(\"common.save\")}</Button>\n            </Modal.Footer>\n        </div>\n    );\n};\n\nFormCreateLocation.propTypes = {\n    setLoading: PropTypes.func,\n    onSuccess: PropTypes.func,\n    toggleFormSelected: PropTypes.func\n};\n\nexport default FormCreateLocation;","import React, { useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\n\nimport CustomModal from 'app/components/CustomModal';\nimport FormSelectLocation from './FormSelectLocation';\nimport FormCreateLocation from './FormCreateLocation';\n\nimport './index.scss';\nimport clsx from 'clsx';\nimport useTrans from 'helper/useTrans';\n\nconst ModalSavePallet = ({ show, onSuccess, id, onHide }) => {\n\n    const [formSelected, setFormSelected] = useState('select-location')\n    const [loading, setLoading] = useState(false);\n    const history = useHistory();\n    const formSelectLocationRef = useRef();\n    const [trans] = useTrans();\n\n    const toggleFormSelected = (e) => {\n        e && e.preventDefault();\n        setFormSelected(formSelected === 'select-location' ? 'create-location' : 'select-location');\n    }\n\n    const closeModal = () => {\n        setFormSelected('select-location');\n\n        if(!onHide) {\n            history.goBack();\n        } else {\n            onHide();\n        }\n    }\n\n    const onCreateLocationSuccess = (data) => {\n        formSelectLocationRef.current.setValues({ 'location_id': data.id });\n        toggleFormSelected();\n    }\n\n    return (\n        <CustomModal\n            show={show}\n            onHide={closeModal}\n            title={trans(\"warehouse.pallet.save.title\")}\n            actionsLoading={loading}\n        >\n            <div className={clsx(formSelected !== 'select-location' && 'd-none')}>\n                <FormSelectLocation\n                    setLoading={setLoading}\n                    onSuccess={onSuccess}\n                    closeModal={closeModal}\n                    id={id}\n                    toggleFormSelected={toggleFormSelected}\n                    ref={formSelectLocationRef}\n                />\n            </div>\n\n            <div className={clsx(formSelected === 'select-location' && 'd-none')}>\n                <FormCreateLocation\n                    setLoading={setLoading}\n                    onSuccess={onCreateLocationSuccess}\n                    toggleFormSelected={toggleFormSelected}\n                />\n            </div>\n        </CustomModal>\n    );\n};\n\nModalSavePallet.propTypes = {\n    id: PropTypes.any,\n    show: PropTypes.bool,\n    onSuccess: PropTypes.func\n};\n\nexport default ModalSavePallet;","import React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { fetchPalletTypes } from 'app/modules/Warehouse/warehouse-redux/palletTypeSlice';\nimport useTrans from 'helper/useTrans';\n\nimport TMNBaseSelect from '../BaseSelect';\n\nimport './index.scss';\n\nconst SelectPalletType = ({ onChange, value, showLabel = true, ...props }) => {\n    const palletTypeList = useSelector(state => state.warehouse.palletType.list.data);\n    const loading = useSelector(state => state.warehouse.palletType.list.loading);\n    const dispatch = useDispatch();\n    const [trans] = useTrans();\n\n    const makeOption = useCallback((item) => ({\n        value: item.id,\n        label: trans(\"warehouse.pallet_type.option_label\", {\n            id: item.id,\n            max_volume: item.max_volume,\n            max_weight: item.max_weight\n        })\n    }), [trans]);\n\n    const palletTypeOptions = palletTypeList?.map(item => makeOption(item));\n\n    const handleSelectPalletType = option => {\n        onChange && onChange(option.value);\n    };\n\n    const fetchData = (params) => {\n        dispatch(fetchPalletTypes(params));\n    }\n\n    return (\n        <TMNBaseSelect\n            value={value}\n            label={showLabel && trans(\"warehouse.pallet_type.title\")}\n            className=\"select-pallet-type\"\n            placeholder={trans(\"common.select_here\")}\n            options={palletTypeOptions}\n            onChange={handleSelectPalletType}\n            loading={loading}\n            onFetchData={fetchData}\n            typeSearch='name'\n            {...props}\n        />\n    );\n};\n\nSelectPalletType.propTypes = {\n    onChange: PropTypes.func,\n    value: PropTypes.any,\n    showLabel: PropTypes.bool\n};\n\nexport default SelectPalletType;\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport clsx from 'clsx';\nimport { toAbsoluteUrl } from '_metronic/_helpers';\nimport useTrans from 'helper/useTrans';\nimport { downContainerAction } from 'app/modules/Warehouse/warehouse-redux/downContainerSlice';\nimport getCurrentContainer from 'app/modules/Warehouse/selector/DownContainer/getCurrentContainer';\nimport getcurrentPallet from 'app/modules/Warehouse/selector/DownContainer/getCurrentPallet';\nimport warehouseApi from 'apis/warehouse';\n\nimport SVG from 'react-inlinesvg';\nimport ModalSavePallet from 'app/modules/Warehouse/components/List/ListPallet/ModalSavePallet';\nimport SelectPalletType from 'app/components/Select/SelectPalletType';\nimport { ProgressBar } from 'react-bootstrap';\n\nimport './index.scss';\nimport { dialog } from 'app/components/DialogNotify';\n\nconst ListPallet = props => {\n\n    const [modalSavePallet, setModalSavePallet] = useState({\n        show: false,\n        id: ''\n    });\n    const listPallets = useSelector(state => state.warehouse.downContainer.listPallets.data);\n    const currentPallet = useSelector(getcurrentPallet);\n    const currentContainer = useSelector(getCurrentContainer);\n    const [trans] = useTrans();\n    const dispatch = useDispatch();\n\n    const savePallet = (pallet_id) => {\n        setModalSavePallet({\n            show: true,\n            id: pallet_id\n        });\n    }\n\n    const hideModalSavePallet = () => {\n        setModalSavePallet({\n            show: false,\n            id: ''\n        });\n    }\n\n    const handleChangePalletType = (type_id, pallet) => {\n        warehouseApi.pallet.update(pallet.id, { type_id })\n            .then(() => {\n                dialog.success(trans(\"warehouse.pallet.update.success\"));\n\n                return warehouseApi.pallet\n                    .fetchPallet(pallet.id, { with: 'location.shelve.area;pivotBoxes' })\n            })\n            .then(res => {\n                dispatch(downContainerAction.addPallet(res));\n            })\n            .catch((err) => {\n                console.error(err);\n\n                dialog.error(trans(\"warehouse.pallet.update.failure\"))\n            })\n    }\n\n    if (!currentContainer || !listPallets.length) return <></>;\n\n    return (\n        <div className=\"container-load-down-pallets\">\n            <ModalSavePallet\n                {...modalSavePallet}\n                onHide={hideModalSavePallet}\n            />\n\n            <div className=\"list-pallet\">\n                {listPallets.map((pallet) => (\n                    <div className={clsx(\"pallet-item\", currentPallet?.id === pallet.id && \"selected\")} key={`pallet-item-${pallet.id}`}>\n                        <div className=\"d-flex align-items-center\">\n                            <span onClick={() => savePallet(pallet.id)} className=\"save-location-icon\">\n                                <SVG\n                                    src={toAbsoluteUrl(\n                                        '/media/svg/icons/Navigation/Route.svg'\n                                    )}\n                                ></SVG>\n                            </span>\n\n                            <div className=\"pallet-item--info\">\n                                <div className=\"pallet-item--id\">\n                                    {pallet.id}\n                                </div>\n                                <div className=\"pallet-item--quantity_box\">{trans(\"warehouse.sku.quantity\")}: {pallet.quantity_boxes || 0}</div>\n                            </div>\n\n                            <SelectPalletType showLabel={false} value={pallet?.type_id} onChange={(type_id) => handleChangePalletType(type_id, pallet)} />\n\n                        </div>\n                        <div className=\"progress-pallet\">\n                            <div className=\"progress-pallet--item\">\n                                <span className=\"text-success\">V: </span>\n                                <ProgressBar variant=\"success\" now={pallet?.boxes_volume} max={pallet?.type?.max_volume} />\n                            </div>\n\n                            <div className=\"progress-pallet--item\">\n                                <span className=\"text-primary\">W: </span>\n                                <ProgressBar variant=\"info\" now={pallet?.boxes_weight} max={pallet?.type?.max_weight} />\n                            </div>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nListPallet.propTypes = {\n\n};\n\nexport default ListPallet;","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport useTrans from 'helper/useTrans';\n\nconst MessageTypePallet = ({ message }) => {\n\n    const [trans] = useTrans();\n\n    const messageString = useMemo(() => {\n        if (message.status === 'error') return <div className=\"message-string error\">{trans(\"warehouse.container.add_pallet.failure\", { data: message.pallet_id || '' })}</div>;\n\n        return (\n            <div className=\"message-string success have-submess\">\n                <div className=\"submess\">{trans(\"warehouse.container.add_pallet.success\", { data: message.pallet_id })}</div>\n            </div>\n        )\n    }, [message, trans]);\n\n    return (\n        <div className=\"message-type-pallet message-wrapper\">\n            <div className=\"time\">[{message.time}] {!!message.container && `[Cont - ${message.container.id}]`}</div>\n            {messageString}\n        </div>\n    );\n};\n\nMessageTypePallet.propTypes = {\n    message: PropTypes.any\n};\n\nexport default MessageTypePallet;","import React, { useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { toAbsoluteUrl } from '_metronic/_helpers';\n\nimport SVG from 'react-inlinesvg';\n\nimport './index.scss';\nimport clsx from 'clsx';\n\nconst EditableText = ({ value, onChange, text, suffix, ...props }) => {\n\n    const [isEdit, setIsEdit] = useState(false);\n    const inputRef = useRef();\n\n    useEffect(() => {\n        if (inputRef?.current) inputRef.current.focus();\n    }, [inputRef, isEdit]);\n\n    const toggleEdit = () => setIsEdit(!isEdit);\n\n    const dispatchInputChange = (e) => {\n        if (e.charCode === 13) {\n            if (e.target.value !== value) onChange && onChange(e.target.value);\n\n            toggleEdit();\n        }\n    }\n\n    return !isEdit ? (\n        <span className=\"ediable-text\">\n            {text || value}\n            <span className=\"svg-icon svg-icon-md svg-icon-primary cursor-pointer\" onClick={toggleEdit}>\n                <SVG\n                    src={toAbsoluteUrl(\n                        '/media/svg/icons/Communication/Write.svg'\n                    )}\n                ></SVG>\n            </span>\n        </span>\n    ) : (\n        <span className={clsx(\"editable-input\", suffix && \"has-suffix\")}>\n            <input\n                defaultValue={value || ''}\n                className=\"form-control ediable-text-input\"\n                onKeyPress={dispatchInputChange}\n                ref={inputRef}\n                {...props}\n            />\n            {!!suffix && (\n                <span className=\"suffix\">\n                    {suffix}\n                </span>\n            )}\n        </span>\n    )\n};\n\nEditableText.propTypes = {\n    value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    onChange: PropTypes.func\n};\n\nexport default EditableText;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport useTrans from 'helper/useTrans';\nimport { toAbsoluteUrl } from '_metronic/_helpers';\n\nimport SVG from 'react-inlinesvg';\nimport EditableText from 'app/components/EditableText';\n\nconst MessageTypeNotify = ({ message, onRemove, onEdit, isCanUpdate, isCanDelete }) => {\n    const [trans] = useTrans();\n\n    const handleDeleteMessage = () => {\n        onRemove && onRemove(message)\n    }\n\n    const handleEditQuantity = (v) => {\n        if (v !== message.quantity) {\n            onEdit && onEdit({ ...message, newQuantity: v });\n        }\n    }\n\n    return (\n        <div className=\"message-type-notify message-wrapper\">\n            <div className=\"time\">[{message.time}] {!!message.container && `[Cont - ${message.container.id}]`}</div>\n            <div className=\"message-string warning\">{trans(message.transObj.id, message.transObj.value)}</div>\n            {message.id && (\n                <>\n                    {isCanUpdate && (\n                        <EditableText\n                            value={message.quantity}\n                            onChange={handleEditQuantity}\n                            text=\" \"\n                            type=\"number\"\n                            min={1}\n                        />\n                    )}\n\n                    {isCanDelete && (\n                        <div className=\"delete-message svg-icon svg-icon-danger\" onClick={handleDeleteMessage}>\n                            <SVG\n                                src={toAbsoluteUrl(\n                                    '/media/svg/icons/General/Trash.svg'\n                                )}\n                            ></SVG>\n                        </div>\n                    )}\n                </>\n            )}\n        </div>\n    );\n};\n\nMessageTypeNotify.propTypes = {\n    message: PropTypes.any\n};\n\nexport default MessageTypeNotify;","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useTrans from 'helper/useTrans';\nimport { toAbsoluteUrl } from '_metronic/_helpers';\n\nimport SVG from 'react-inlinesvg';\nimport EditableText from 'app/components/EditableText';\n\nconst MessageTypeBox = ({ message, onRemove, onEdit, isCanUpdate, isCanDelete }) => {\n    const [trans] = useTrans();\n\n    const messageString = useMemo(() => {\n        if (message.status === 'error') return <div className=\"message-string error\">{trans(\"warehouse.container.add_box.failure\", { data: message.box_id || '' })}</div>;\n\n        return <div className=\"message-string success\">\n            {trans(\"warehouse.container.add_box.success\", {\n                quantity: message?.quantity || 1, box_id: message.box_id\n            })}\n        </div>;\n    }, [message, trans]);\n\n    const handleDeleteMessage = () => {\n        onRemove && onRemove(message);\n    }\n\n    const handleEditQuantity = (v) => {\n        if (v !== message.quantity) {\n            onEdit && onEdit({ ...message, newQuantity: v });\n        }\n    }\n\n    return (\n        <div className=\"message-type-box message-wrapper\">\n            <div className=\"time\">[{message.time}] {!!message.container && `[Cont - ${message.container.id}]`} {message.palletId && `[Pallet - ${message.palletId}]`}</div>\n            {messageString}\n            {message.id && (\n                <>\n                    {!!onEdit && isCanUpdate && (\n                        <EditableText\n                            value={message.quantity}\n                            onChange={handleEditQuantity}\n                            text=\" \"\n                            type=\"number\"\n                            min={1}\n                        />\n                    )}\n                    {!!onRemove && isCanDelete && (\n                        <div className=\"delete-message svg-icon svg-icon-danger\" onClick={handleDeleteMessage}>\n                            <SVG\n                                src={toAbsoluteUrl(\n                                    '/media/svg/icons/General/Trash.svg'\n                                )}\n                            ></SVG>\n                        </div>\n                    )}\n                </>\n            )}\n        </div>\n    );\n};\n\nMessageTypeBox.propTypes = {\n    message: PropTypes.any\n};\n\nexport default MessageTypeBox;","import React, { useMemo } from 'react';\n\nimport MessageTypePallet from './MessageTypePallet';\nimport MessageTypeNotify from './MessageTypeNotify';\nimport MessageTypeBox from './MessageTypeBox';\n\nimport './index.scss';\nimport usePermission from 'app/components/NeedPermission/usePermission';\n\nconst IOMessage = ({\n    messages = [],\n    onDelete,\n    onEdit,\n    permissions\n}) => {\n\n    const isCanUpdate = usePermission(permissions.update);\n    const isCanDelete = usePermission(permissions.delete);\n\n    const messageItems = useMemo(() => {\n        return messages.map((m, idx) => {\n            return (\n                <div className=\"message\" key={`message-${idx}`}>\n                    {m.type === 'PALLET' && <MessageTypePallet message={m} />}\n                    {m.type === 'NOTIFY' && <MessageTypeNotify message={m} onRemove={onDelete} isCanUpdate={isCanUpdate} isCanDelete={isCanDelete} onEdit={onEdit} />}\n                    {m.type === 'BOX' && <MessageTypeBox message={m} onRemove={onDelete} isCanUpdate={isCanUpdate} isCanDelete={isCanDelete} onEdit={onEdit} />}\n                </div>\n            );\n        })\n    }, [messages, onDelete, onEdit, isCanUpdate, isCanDelete]);\n\n    return (\n        <div className=\"io-message-wrapper\">\n            <div className=\"io-message-box shadow-sm\">\n                {messageItems}\n            </div>\n        </div>\n    );\n};\n\nexport default IOMessage;","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { downContainerAction } from 'app/modules/Warehouse/warehouse-redux/downContainerSlice';\nimport useTrans from 'helper/useTrans';\nimport warehouseApi from 'apis/warehouse';\nimport getCurrentContainer from 'app/modules/Warehouse/selector/DownContainer/getCurrentContainer';\nimport getDownContMessages from 'app/modules/Warehouse/selector/DownContainer/getDownContMessages';\n\nimport { Card } from '_metronic/_partials/controls';\nimport InputAddData from './InputAddData';\nimport ListPallet from './ListPallet';\nimport IOMessage from 'app/modules/Warehouse/components/WarehouseIO/IOMessages';\nimport { dialog } from 'app/components/DialogNotify';\n\nimport './index.scss';\n\nconst ProcessSection = props => {\n\n    const message = useSelector(getDownContMessages);\n    const currentContainer = useSelector(getCurrentContainer);\n    const dispatch = useDispatch();\n    const [trans] = useTrans();\n\n    const handleDeleteMessage = (message) => {\n        warehouseApi.outContainerPicker.delete(message.id)\n            .then(() => {\n                dialog.success(trans(\"warehouse.io.delete.success\"));\n                dispatch(downContainerAction.removeBoxByPickerId(message.id));\n            })\n            .catch(() => {\n                dialog.error(trans(\"warehouse.io.delete.failure\"));\n            })\n    }\n\n    const handleEditQuantity = ({ newQuantity, ...message }) => {\n        if (Number(newQuantity) > 0)\n            warehouseApi.outContainerPicker.update(message.id, { quantity: Number(newQuantity) })\n                .then(() => {\n                    dialog.success(trans(\"warehouse.io.update.success\"));\n                    dispatch(downContainerAction.updateBoxQuantity({ newQuantity: Number(newQuantity), ...message }));\n                })\n                .catch(() => {\n                    dialog.error(trans(\"warehouse.io.update.failure\"));\n                })\n    }\n\n    return (\n        <Card className=\"process-section\">\n            <InputAddData />\n            <ListPallet />\n            <IOMessage\n                messages={message}\n                messageKey={currentContainer?.id}\n                onDelete={handleDeleteMessage}\n                onEdit={handleEditQuantity}\n                permissions={{\n                    update: ['out-container-pickers.update'],\n                    delete: ['out-container-pickers.delete']\n                }}\n            />\n        </Card>\n    );\n};\n\nProcessSection.propTypes = {\n\n};\n\nexport default ProcessSection;","import React, { useCallback, useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport formatNumber from 'helper/formatNumber';\nimport { downContainerAction } from 'app/modules/Warehouse/warehouse-redux/downContainerSlice';\nimport { toAbsoluteUrl } from '_metronic/_helpers';\nimport _ from 'lodash';\nimport getCurrentContainer from 'app/modules/Warehouse/selector/DownContainer/getCurrentContainer';\nimport useTrans from 'helper/useTrans';\nimport warehouseApi from 'apis/warehouse';\n\nimport SVG from 'react-inlinesvg';\nimport { Card, CardBody } from '_metronic/_partials/controls';\nimport ProgressBar from 'react-bootstrap/ProgressBar'\nimport Select from 'react-select';\nimport Button from 'app/components/Button';\n\nimport './index.scss';\n\nconst makeOption = (c) => ({ value: c.id, label: `Invoice ${c.id}` });\n\nconst M3toCM3 = 1;\nconst TANtoKG = 1000;\n\nconst ContainerStatus = props => {\n\n    const listInvoices = useSelector(state => state.warehouse.downContainer.listInvoices.data);\n    const listPallets = useSelector(state => state.warehouse.downContainer.listPallets.data);\n    const currentContainer = useSelector(getCurrentContainer);\n    const dispatch = useDispatch();\n    const [trans] = useTrans();\n\n    useEffect(() => {\n        if (listInvoices.length && !currentContainer) {\n            dispatch(downContainerAction.setCurrentContainer(listInvoices[0]));\n        }\n    }, [listInvoices, currentContainer]); // eslint-disable-line\n\n    /** Thể tích container khi đóng cont */\n    const cutOffVolumeInContainer = useMemo(() => {\n        if (!currentContainer) return 0;\n\n        return currentContainer.in_pickers.reduce((prevV, curV) => {\n            return prevV + curV.volume || 0;\n        }, 0);\n    }, [currentContainer]); // eslint-disable-line\n\n    /** Trọng lượng container khi đóng cont */\n    const cutOffWeightInContainer = useMemo(() => {\n        if (!currentContainer) return 0;\n\n        return currentContainer.in_pickers.reduce((prevV, curV) => {\n            return prevV + (curV?.box?.weight_per_box || 0) * curV.quantity;\n        }, 0);\n    }, [currentContainer]);  // eslint-disable-line\n\n    /** Thể tích container hiện tại */\n    const currentVolumeInContainer = useMemo(() => {\n        if (!currentContainer) return 0;\n\n        let outVolume = currentContainer.out_pickers.reduce((prevV, curV) => {\n            return prevV + curV?.volume || 0;\n        }, 0);\n\n        return cutOffVolumeInContainer - outVolume;\n    }, [currentContainer, cutOffVolumeInContainer]); // eslint-disable-line\n\n    /** Trọng lượng container hiện tại */\n    const currentWeightInContainer = useMemo(() => {\n        if (!currentContainer) return 0;\n\n        let outWeight = currentContainer.out_pickers.reduce((prevV, curV) => {\n            return prevV + (curV?.box?.weight_per_box || 0) * curV.quantity;\n        }, 0);\n\n        return cutOffWeightInContainer - outWeight;\n    }, [currentContainer, cutOffWeightInContainer]); // eslint-disable-line\n\n    const handleReset = () => {\n        dispatch(downContainerAction.resetSlice());\n    }\n\n    const handleSelectContainer = ({ value }) => {\n\n        const selectedInvoice = _.find(listInvoices, ['id', value]);\n\n        if (selectedInvoice)\n            dispatch(downContainerAction.setCurrentContainer(selectedInvoice));\n    }\n\n    const getValueSelect = useMemo(() => {\n        return currentContainer ? makeOption(currentContainer) : '';\n    }, [currentContainer]);\n\n    const handleCutOff = useCallback((e) => {\n        e.target.style.display = 'none';\n        listPallets.forEach((pallet) => {\n            pallet.pivot_boxes.forEach((pivotBox) => {\n                if (pivotBox.id) updatePivotBox(pivotBox);\n                else createPivotBox({ ...pivotBox, pallet_id: pallet.id });\n            })\n        });\n    }, [listPallets]);\n\n    const updatePivotBox = (pivotBox) => {\n        warehouseApi.palletBoxes.update(pivotBox.id, { quantity: pivotBox.quantity });\n    }\n\n    const createPivotBox = (pivotBox) => {\n        warehouseApi.palletBoxes.create(pivotBox);\n    }\n\n    if (!listInvoices.length) return <></>;\n\n    return (\n        <Card className=\"container-status\">\n\n            <div className=\"container-status-head card-header\">\n                <div className=\"d-flex align-items-center\">\n                    <div className=\"select-current-container\">\n                        <Select\n                            value={getValueSelect}\n                            options={listInvoices.map(v => makeOption(v))}\n                            onChange={handleSelectContainer}\n                        />\n                    </div>\n\n                    <Button type=\"primary\" className=\"ml-3\" need={['out-container-pickers.create', 'out-container-pickers.update']} permissionJoin=\"and\" onClick={handleCutOff}>\n                        {trans(\"warehouse.container.close_container\")}\n                    </Button>\n                </div>\n\n                <button className=\"btn btn-link\" onClick={handleReset}>\n                    <SVG\n                        src={toAbsoluteUrl(\n                            '/media/svg/icons/Media/Shuffle.svg'\n                        )}\n                        className=\"mr-3\"\n                    ></SVG>\n                    {trans(\"warehouse.container.reset_data\")}\n                </button>\n            </div>\n\n            <CardBody>\n\n                <div className=\"point-data d-flex\">\n                    <div className=\"invoice-data\">\n                        <div className=\"d-flex\">\n                            <div className=\"progress-section-title\">{trans(\"warehouse.container.theoretical_volume\")}: </div>\n                            <div className=\"invoice-volume invoice-value\">{formatNumber(currentContainer?.volume)}</div>\n                        </div>\n\n                        <div className=\"d-flex\">\n                            <div className=\"progress-section-title\">{trans(\"warehouse.container.theoretical_weight\")}: </div>\n                            <div className=\"invoice-weight invoice-value\">{formatNumber(currentContainer?.weight)}</div>\n                        </div>\n                    </div>\n\n                    <div className=\"load-up-cont-data\">\n                        <div className=\"d-flex\">\n                            <div className=\"progress-section-title\">{trans(\"warehouse.container.cut_off_volume\")}: </div>\n                            <div className=\"invoice-volume invoice-value\">{formatNumber(cutOffVolumeInContainer)}</div>\n                        </div>\n\n                        <div className=\"d-flex\">\n                            <div className=\"progress-section-title\">{trans(\"warehouse.container.cut_off_weight\")}: </div>\n                            <div className=\"invoice-weight invoice-value\">{formatNumber(cutOffWeightInContainer)}</div>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"container-status-progress\">\n                    <div className=\"progress-section\">\n                        <div className=\"progress-section-title mt-5\">{trans(\"warehouse.container.current_volume\")}: </div>\n                        <div className=\"status-percent\">\n                            <ProgressBar\n                                animated\n                                max={currentContainer?.type?.volume * M3toCM3}\n                                now={currentVolumeInContainer}\n                                label={<div className=\"progress-lable\">{formatNumber(currentVolumeInContainer)} / {formatNumber(currentContainer?.type?.volume * M3toCM3)}</div>}\n                                variant=\"primary\"\n                            />\n                        </div>\n                    </div>\n\n                    <div className=\"progress-section\">\n                        <div className=\"progress-section-title mt-5\">{trans(\"warehouse.container.current_weight\")}: </div>\n                        <div className=\"status-percent\">\n                            <ProgressBar\n                                animated\n                                max={currentContainer?.type?.weight * TANtoKG}\n                                now={currentWeightInContainer}\n                                label={<div className=\"progress-lable\">{formatNumber(currentWeightInContainer)} / {formatNumber(currentContainer?.type?.weight * TANtoKG)}</div>}\n                                variant=\"primary\"\n                            />\n                        </div>\n                    </div>\n                </div>\n            </CardBody>\n        </Card>\n    );\n};\n\nContainerStatus.propTypes = {\n\n};\n\nexport default ContainerStatus;","import React from 'react';\n\nimport Layout from 'app/modules/Warehouse/components/Layout';\nimport TargetSection from './TargetSection';\nimport ProcessSection from './ProcessSection';\nimport ContainerStatus from './ContainerStatus';\nimport useTrans from 'helper/useTrans';\n\nconst DownContainer = props => {\n    const [trans] = useTrans();\n\n    return (\n        <Layout title={trans(\"MENU.WAREHOUSE.DOWN_CONTAINER\")}>\n            <div className=\"down-container\">\n                <ContainerStatus />\n                <div className=\"row\">\n                    <div className=\"col-lg-4 col-md-5 col-sm-12\">\n                        <TargetSection />\n                    </div>\n                    <div className=\"col-lg-8 col-md-7 col-sm-12\">\n                        <ProcessSection />\n                    </div>\n                </div>\n            </div>\n        </Layout>\n    );\n};\n\nDownContainer.propTypes = {\n\n};\n\nexport default DownContainer;","import { fetchGoodsDelivery } from \"app/modules/Warehouse/warehouse-redux/goodsDeliverySlice\";\nimport { useDispatch } from \"react-redux\"\nimport { useParams } from \"react-router\";\n\nexport default function useGoodsDeliveryDetail() {\n\n    const dispatch = useDispatch();\n    const params = useParams();\n\n    const getGoodsDeliveryDetail = (data) => {\n        dispatch(fetchGoodsDelivery({ id: params?.id, with: \"pivotBoxes.boxLadingBill.owningBox\", ...data }))\n    }\n\n    return getGoodsDeliveryDetail;\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport useTrans from 'helper/useTrans';\n\nGrBtnEdit.propTypes = {\n    isEdit: PropTypes.bool,\n    onSubmit: PropTypes.func,\n    onEdit: PropTypes.func,\n    onCancel: PropTypes.func\n};\n\nfunction GrBtnEdit({ isEdit, onSubmit, onEdit, onCancel }) {\n\n    const [trans] = useTrans();\n\n    return (\n        <div>\n            {isEdit ? (\n                <>\n                    <button\n                        className=\"btn btn-secondary\"\n                        onClick={onCancel}\n                    >\n                        {trans(\"common.cancel\")}\n                    </button>\n\n                    <button className=\"btn btn-primary ml-3\" onClick={onSubmit}>\n                        {trans(\"common.save\")}\n                    </button>\n                </>\n            ) : (\n                <button className=\"btn btn-primary\" onClick={onEdit}>\n                    {trans(\"common.edit\")}\n                </button>\n            )}\n        </div>\n    );\n}\n\nexport default GrBtnEdit;\n","import React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { fetchDeliveryPartners } from 'app/modules/Warehouse/warehouse-redux/deliveryPartnerSlice';\nimport useTrans from 'helper/useTrans';\n\nimport TMNBaseSelect from '../BaseSelect';\n\nimport './index.scss';\n\nconst SelectDeliveryPartners = ({ onChange, value, showLabel = true, ...props }) => {\n    const deliveries = useSelector(state => state.warehouse.deliveryPartner.list.data);\n    const loading = useSelector(state => state.warehouse.deliveryPartner.list.loading);\n    const dispatch = useDispatch();\n    const [trans] = useTrans();\n\n    const makeOption = useCallback((i) => ({\n        value: i.id,\n        label: i.name\n    }), []);\n\n    const options = deliveries?.map(item => makeOption(item));\n\n    const handleSelect = option => {\n        onChange && onChange(option.value);\n    };\n\n    const fetchData = (params) => {\n        dispatch(fetchDeliveryPartners(params));\n    }\n\n    return (\n        <TMNBaseSelect\n            value={value}\n            label={showLabel && trans(\"warehouse.delivery_partner.title\")}\n            placeholder={trans(\"warehouse.delivery_partner.find\")}\n            options={options}\n            onChange={handleSelect}\n            loading={loading}\n            onFetchData={fetchData}\n            className=\"select-delivery-partner\"\n            typeSearch={'name'}\n            {...props}\n        />\n    );\n};\n\nSelectDeliveryPartners.propTypes = {\n    onChange: PropTypes.func,\n    value: PropTypes.any,\n    showLabel: PropTypes.bool\n};\n\nexport default SelectDeliveryPartners;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport clsx from 'clsx';\n\nimport SelectDeliveryPartner from './index';\nimport { useField, useFormikContext } from \"formik\";\n\nconst SelectDeliveryPartnerForm = ({ name, ...props }) => {\n\n    const [field, meta] = useField(name);\n    const { setFieldTouched, setFieldValue } = useFormikContext();\n    const { error, touched } = meta;\n\n    const handleClick = () => {\n        setFieldTouched(field.name);\n    }\n\n    const handleChange = (v) => {\n        setFieldValue(name, v);\n    }\n\n    return (\n        <div className={clsx(touched && error && 'is-invalid')}>\n            <SelectDeliveryPartner\n                value={field.value}\n                onChange={handleChange}\n                onClick={handleClick}\n                {...props}\n            />\n\n            {touched && error && (\n                <div className=\"invalid-feedback d-block\">{error}</div>\n            )}\n        </div>\n    );\n};\n\nSelectDeliveryPartnerForm.propTypes = {\n    value: PropTypes.any,\n    onChange: PropTypes.func,\n    withFeedbackLabel: PropTypes.bool\n};\n\nexport default SelectDeliveryPartnerForm;","import React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { fetchGoodsDeliveryStatuses } from 'app/modules/Warehouse/warehouse-redux/goodsDeliveryStatusSlice';\nimport useTrans from 'helper/useTrans';\n\nimport TMNBaseSelect from '../BaseSelect';\n\nimport './index.scss';\n\nconst SelectGoodsDeliveryStatus = ({ onChange, value, showLabel = true, ...props }) => {\n    const listGoodsDeliveryStatus = useSelector(state => state.warehouse.goodsDeliveryStatus.list.data);\n    const loading = useSelector(state => state.warehouse.goodsDeliveryStatus.list.loading);\n    const dispatch = useDispatch();\n    const [trans] = useTrans();\n\n    const makeOption = useCallback((i) => ({\n        value: i.id,\n        label: i.name\n    }), []);\n\n    const options = listGoodsDeliveryStatus?.map(item => makeOption(item));\n\n    const handleSelect = option => {\n        onChange && onChange(option.value);\n    };\n\n    const fetchData = (params) => {\n        dispatch(fetchGoodsDeliveryStatuses(params));\n    }\n\n    return (\n        <TMNBaseSelect\n            value={value}\n            label={showLabel && trans(\"warehouse.goods_delivery_status.title\")}\n            className=\"select-delivery-partner\"\n            placeholder={trans(\"warehouse.goods_delivery_status.find\")}\n            options={options}\n            onChange={handleSelect}\n            loading={loading}\n            onFetchData={fetchData}\n            typeSearch='name'\n            {...props}\n        />\n    );\n};\n\nSelectGoodsDeliveryStatus.propTypes = {\n    onChange: PropTypes.func,\n    value: PropTypes.any,\n    showLabel: PropTypes.bool\n};\n\nexport default SelectGoodsDeliveryStatus;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport clsx from 'clsx';\n\nimport SelectGoodsDeliveryStatus from './index';\nimport { useField, useFormikContext } from \"formik\";\n\nconst SelectGoodsDeliveryStatusForm = ({ name, ...props }) => {\n\n    const [field, meta] = useField(name);\n    const { setFieldTouched, setFieldValue } = useFormikContext();\n    const { error, touched } = meta;\n\n    const handleClick = () => {\n        setFieldTouched(field.name);\n    }\n\n    const handleChange = (v) => {\n        setFieldValue(name, v);\n    }\n\n    return (\n        <div className={clsx(touched && error && 'is-invalid')}>\n            <SelectGoodsDeliveryStatus\n                value={field.value}\n                onChange={handleChange}\n                onClick={handleClick}\n                {...props}\n            />\n\n            {touched && error && (\n                <div className=\"invalid-feedback d-block\">{error}</div>\n            )}\n        </div>\n    );\n};\n\nSelectGoodsDeliveryStatusForm.propTypes = {\n    value: PropTypes.any,\n    onChange: PropTypes.func,\n    withFeedbackLabel: PropTypes.bool\n};\n\nexport default SelectGoodsDeliveryStatusForm;","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { fetchShipmentInfo } from 'app/modules/Order/order-redux/shipmentInfoSlice';\nimport useTrans from 'helper/useTrans';\n\nimport TMNBaseSelect from '../BaseSelect';\n\nimport './index.scss';\n\nconst makeOption = (item) => {\n    return {\n        value: item.id,\n        label: `${item.consignee} - ${item.address}`\n    }\n}\n\nconst SelectShipmentInfo = ({ onChange, value, customer_id, ...props }) => {\n    const shipmentInfoList = useSelector(state => state.order.shipmentInfo.shipmentInfoList)\n    const isLoading = useSelector(state => state.order.shipmentInfo.isLoading)\n    const dispatch = useDispatch();\n    const [trans] = useTrans();\n\n    const options = useMemo(() => {\n        return shipmentInfoList.map(item => {\n            return makeOption(item);\n        })\n    }, [shipmentInfoList]);\n\n    const handleSelectShipmentInfo = (option) => {\n        onChange && onChange(option.value);\n    }\n\n    const fetchData = (params) => {\n        dispatch(fetchShipmentInfo(params));\n    }\n\n    return (\n        <TMNBaseSelect\n            value={value}\n            label={trans(\"warehouse.shipment_info.title\")}\n            className=\"select-shipment-info\"\n            placeholder={trans(\"common.select_here\")}\n            options={options}\n            onChange={handleSelectShipmentInfo}\n            loading={isLoading}\n            onFetchData={fetchData}\n            typeSearch='consignee'\n            {...props}\n        />\n    );\n};\n\nSelectShipmentInfo.propTypes = {\n    onChange: PropTypes.func,\n    value: PropTypes.any,\n    customer_id: PropTypes.any\n};\n\nexport default SelectShipmentInfo;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport clsx from 'clsx';\n\nimport SelectShipmentInfo from './index';\nimport { useField, useFormikContext } from \"formik\";\n\nconst SelectShipmentInfoForm = ({ value, isDisabled, customer_id, ...props }) => {\n\n    const [field, meta, helpers] = useField(props);\n    const { setFieldTouched } = useFormikContext();\n    const { error, touched } = meta;\n\n    const handleClick = () => {\n        setFieldTouched(field.name);\n    }\n\n    const onChange = (v) => {\n        helpers.setValue(v);\n    }\n\n    return (\n        <div className={clsx(touched && error && 'is-invalid')}>\n            <SelectShipmentInfo\n                value={field.value}\n                onChange={onChange}\n                isDisabled={isDisabled}\n                customer_id={customer_id}\n                onClick={handleClick}\n            />\n\n            {touched && error && (\n                <div className=\"invalid-feedback d-block\">{error}</div>\n            )}\n        </div>\n    );\n};\n\nSelectShipmentInfoForm.propTypes = {\n    value: PropTypes.any,\n    onChange: PropTypes.func,\n    withFeedbackLabel: PropTypes.bool\n};\n\nexport default SelectShipmentInfoForm;","import React from 'react';\n\nimport { FastField, Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport useTrans from 'helper/useTrans';\n\nimport './index.scss';\nimport { Input } from '_metronic/_partials/controls';\nimport SelectDeliveryPartnersForm from 'app/components/Select/SelectDeliveryPartner/SelectDeliveryPartnerForm';\nimport SelectGoodsDeliveryStatusForm from 'app/components/Select/SelectGoodsDeliveryStatus/SelectGoodsDeliveryStatusForm';\nimport SelectShipmentInfoForm from 'app/components/Select/SelectShipmentInfo/SelectShipmentInfoForm';\n\nconst FormAddGoodsDelivery = ({\n    onSubmit,\n    initialValues = {\n        partner_id: '',\n        status_id: '',\n        shipping_cost: 0,\n        shipment_info_id: ''\n    },\n    isEdit = true,\n    formItemClassName = \"col-lg-6 col-sm-12\",\n    showStatus = true\n}, ref) => {\n\n    const [trans] = useTrans();\n\n    const validationSchema = Yup.object().shape({\n        status_id: Yup.string().required(trans(\"validation.message.required\")),\n        shipping_cost: Yup.number().required(trans(\"validation.message.required\")),\n        shipment_info_id: Yup.string().required(trans(\"validation.message.required\"))\n    });\n\n    return (\n        <Formik\n            enableReinitialize\n            initialValues={initialValues}\n            validationSchema={validationSchema}\n            onSubmit={onSubmit}\n            innerRef={ref}\n        >\n            <Form className=\"form form-add-goods-delivery row\">\n                <div className={formItemClassName}>\n                    <SelectDeliveryPartnersForm name=\"partner_id\" isDisabled={!isEdit} />\n                </div>\n                {showStatus && (\n                    <div className={formItemClassName}>\n                        <SelectGoodsDeliveryStatusForm name=\"status_id\" isDisabled={!isEdit} />\n                    </div>\n                )}\n                <div className={formItemClassName}>\n                    <SelectShipmentInfoForm name=\"shipment_info_id\" isDisabled={!isEdit} />\n                </div>\n\n                <div className={formItemClassName}>\n                    <FastField\n                        name=\"shipping_cost\"\n                        component={Input}\n                        placeholder={trans(\"warehouse.cost.shipping\")}\n                        type=\"number\"\n                        label={trans(\"warehouse.cost.shipping\")}\n                        shouldUpdate={() => true}\n                        disabled={!isEdit}\n                    />\n                </div>\n            </Form>\n        </Formik>\n    );\n};\n\nexport default React.forwardRef(FormAddGoodsDelivery);\n","import React, { useRef, useState } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport useTrans from 'helper/useTrans';\nimport warehouseApi from 'apis/warehouse';\nimport _ from 'lodash';\nimport useGoodsDeliveryDetail from '../hooks/useGoodsDeliveryDetail';\n\nimport { Card, CardBody, CardHeader, CardHeaderToolbar } from '_metronic/_partials/controls';\nimport GrBtnEdit from 'app/modules/Warehouse/components/GrBtnEdit';\nimport FormAddGoodsDelivery from 'app/modules/Warehouse/components/Form/FormAddGoodsDelivery';\nimport Loading from 'app/components/Loading';\nimport { dialog } from 'app/components/DialogNotify';\nimport handleApiError from 'helper/handleApiError';\nimport NeedPermission from 'app/components/NeedPermission';\n\nconst GoodsDeliveryInfo = props => {\n\n    const { data, loading } = useSelector(state => state.warehouse.goodsDelivery.detail)\n    const [isEdit, setIsEdit] = useState(false);\n    const [trans] = useTrans();\n    const formRef = useRef();\n    const getGoodsDeliveryDetail = useGoodsDeliveryDetail();\n\n    const startEdit = () => {\n        setIsEdit(true);\n    }\n\n    const handleCancel = () => {\n        setIsEdit(false);\n\n        formRef.current.resetForm();\n    }\n\n    const triggerSubmit = () => {\n        formRef.current.submitForm();\n    }\n\n    const handleSaveUpdate = (values, form) => {\n        warehouseApi.goodsDelivery.update(data.id, _.pick(values, ['partner_id', 'status_id', 'shipping_cost']))\n            .then(() => {\n                dialog.success(trans(\"warehouse.goods_delivery.update.success\"));\n\n                setIsEdit(false);\n                getGoodsDeliveryDetail();\n            })\n            .catch((err) => {\n                console.error(err);\n                handleApiError(err, form);\n\n                dialog.error(trans(\"warehouse.goods_delivery.update.failure\"));\n            })\n    }\n\n    return (\n        <Card className=\"goods-delivery-info\">\n            <CardHeader title={trans(\"warehouse.goods_delivery.info.title\")}>\n                <NeedPermission need={['goods-deliveries.update']}>\n                    <CardHeaderToolbar>\n                        <GrBtnEdit\n                            isEdit={isEdit}\n                            onEdit={startEdit}\n                            onSubmit={triggerSubmit}\n                            onCancel={handleCancel}\n                        />\n                    </CardHeaderToolbar>\n                </NeedPermission>\n            </CardHeader>\n            <CardBody className=\"position-relative\">\n                {loading && <Loading local />}\n                <FormAddGoodsDelivery\n                    ref={formRef}\n                    onSubmit={handleSaveUpdate}\n                    initialValues={data}\n                    isEdit={isEdit}\n                    formItemClassName=\"col-lg-4 col-sm-12\"\n                />\n            </CardBody>\n        </Card>\n    );\n};\n\nGoodsDeliveryInfo.propTypes = {\n\n};\n\nexport default GoodsDeliveryInfo;","import React from 'react';\n\nimport {\n    Card,\n    CardBody,\n} from '_metronic/_partials/controls';\n\nimport './index.scss';\n\nconst NotFound = props => {\n    return (\n        <Card className=\"not-found\">\n            <CardBody>\n                <div className=\"not-found-text\">No - content - founded</div>\n            </CardBody>\n        </Card>\n    );\n};\n\nNotFound.propTypes = {\n    \n};\n\nexport default NotFound;","import {\n    Box,\n    makeStyles,\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableRow,\n    TableSortLabel\n} from '@material-ui/core';\nimport { Pagination } from '@material-ui/lab';\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React, { useMemo, useState } from 'react';\nimport SVG from 'react-inlinesvg';\nimport { toAbsoluteUrl } from '_metronic/_helpers';\nimport NeedPermission from '../NeedPermission';\n\nimport './index.scss';\n\nconst useStyles = makeStyles(theme => ({\n    root: {},\n    pagination: {\n        display: 'flex',\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n        justifyContent: 'flex-end'\n    },\n    visuallyHidden: {\n        border: 0,\n        clip: 'rect(0 0 0 0)',\n        height: 1,\n        margin: -1,\n        overflow: 'hidden',\n        padding: 0,\n        position: 'absolute',\n        top: 20,\n        width: 1\n    }\n}));\n\nfunction CustomTable(props) {\n    const {\n        columns,\n        rows,\n        page,\n        lastpage,\n        onPageChange,\n        onDelete,\n        onViewEdit,\n        isPagination,\n        isAction,\n        isDelete,\n        isViewEdit,\n        additionalActions,\n        onSort = null,\n        rowKey,\n        className,\n        noSTT,\n        permissions\n    } = props;\n    const classes = useStyles();\n\n    const handlePageChange = (e, newPage) => {\n        if (onPageChange) onPageChange(newPage);\n    };\n\n    const handleDelete = id => {\n        if (onDelete) onDelete(id);\n    };\n\n    const handleViewEdit = (id, row) => {\n        if (onViewEdit) onViewEdit(id, row);\n    };\n\n    const getCellElement = (row, column) => {\n        if (column.render) return column.render(_.get(row, column.id), row);\n\n        return _.get(row, column.id);\n    };\n\n    const [order, setOrder] = React.useState('asc');\n    const [orderBy, setOrderBy] = useState('');\n\n    const handleSort = property => {\n        const isAsc = orderBy === property && order === 'asc';\n        const orderByTemp = isAsc ? 'desc' : 'asc';\n        setOrder(orderByTemp);\n        setOrderBy(property);\n        if (onSort) onSort(property, orderByTemp);\n    };\n\n    const tableRowKey = useMemo(() => {\n        return rowKey || columns[0].id;\n    }, [columns, rowKey]);\n\n    return (\n        <div className=\"tmn-custom-table\">\n            <div className=\"tmn-custom-table__wrapper\">\n                <Box minWidth={1050}>\n                    <Table className={className}>\n                        <TableHead>\n                            <TableRow>\n                                {!noSTT && (\n                                    <TableCell>\n                                        <span>STT</span>\n                                    </TableCell>\n                                )}\n\n                                {columns.map(column => (\n                                    <TableCell key={column.id}>\n                                        {column.isSort ? (\n                                            <TableSortLabel\n                                                active={orderBy === column.id}\n                                                direction={\n                                                    orderBy === column.id\n                                                        ? order\n                                                        : 'asc'\n                                                }\n                                                onClick={() =>\n                                                    handleSort(column.id)\n                                                }\n                                            >\n                                                {column.title}\n                                                {orderBy === column.id &&\n                                                    column.disablePadding ? (\n                                                    <span\n                                                        className={\n                                                            classes.visuallyHidden\n                                                        }\n                                                    >\n                                                        {order === 'desc'\n                                                            ? 'sorted descending'\n                                                            : 'sorted ascending'}\n                                                    </span>\n                                                ) : null}\n                                            </TableSortLabel>\n                                        ) : (\n                                            column.title\n                                        )}\n                                    </TableCell>\n                                ))}\n\n                                {isAction && (\n                                    <TableCell className=\"text-center\">\n                                        <span className={classes.title}>#</span>\n                                    </TableCell>\n                                )}\n                            </TableRow>\n                        </TableHead>\n\n                        <TableBody>\n                            {rows.map((row, index) => (\n                                <TableRow hover key={index}>\n                                    {!noSTT && (<TableCell>{index + 1}</TableCell>)}\n\n                                    {columns.map(column => (\n                                        <TableCell key={column.id}>\n                                            {getCellElement(row, column)}\n                                        </TableCell>\n                                    ))}\n\n                                    {isAction && (\n                                        <TableCell style={{ width: '12%' }}>\n                                            {additionalActions.map(\n                                                (action, idx) => (\n                                                    <React.Fragment\n                                                        key={`action-item-${idx}`}\n                                                    >\n                                                        {action(row)}\n                                                    </React.Fragment>\n                                                )\n                                            )}\n                                            {isViewEdit && (\n                                                <NeedPermission need={permissions?.update}>\n                                                    <button\n                                                        className=\"btn btn-icon btn-light btn-hover-primary btn-sm mx-3\"\n                                                        onClick={() =>\n                                                            handleViewEdit(\n                                                                row[tableRowKey],\n                                                                row\n                                                            )\n                                                        }\n                                                    >\n                                                        <span className=\"svg-icon svg-icon-md svg-icon-primary\">\n                                                            <SVG\n                                                                src={toAbsoluteUrl(\n                                                                    '/media/svg/icons/Communication/Write.svg'\n                                                                )}\n                                                            ></SVG>\n                                                        </span>\n                                                    </button>\n                                                </NeedPermission>\n                                            )}\n                                            {isDelete && (\n                                                <NeedPermission need={permissions?.delete}>\n                                                    <button\n                                                        className=\"btn btn-icon btn-light btn-hover-danger btn-sm\"\n                                                        onClick={() =>\n                                                            handleDelete(\n                                                                row[tableRowKey]\n                                                            )\n                                                        }\n                                                    >\n                                                        <span className=\"svg-icon svg-icon-md svg-icon-danger\">\n                                                            <SVG\n                                                                src={toAbsoluteUrl(\n                                                                    '/media/svg/icons/General/Trash.svg'\n                                                                )}\n                                                            ></SVG>\n                                                        </span>\n                                                    </button>\n                                                </NeedPermission>\n                                            )}\n                                        </TableCell>\n                                    )}\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </Box>\n            </div>\n\n            {isPagination && (\n                <Pagination\n                    className={classes.pagination}\n                    count={lastpage}\n                    page={page}\n                    shape=\"rounded\"\n                    onChange={handlePageChange}\n                />\n            )}\n        </div>\n    );\n}\n\nCustomTable.propTypes = {\n    className: PropTypes.string,\n    columns: PropTypes.array,\n    rows: PropTypes.array,\n    onPageChange: PropTypes.func,\n    onDelete: PropTypes.func,\n    onViewEdit: PropTypes.func,\n    page: PropTypes.number,\n    lastpage: PropTypes.number,\n    isPagination: PropTypes.bool,\n    isAction: PropTypes.bool,\n    isDelete: PropTypes.bool,\n    isViewEdit: PropTypes.bool,\n    additionalActions: PropTypes.array,\n    rowKey: PropTypes.any,\n    noSTT: PropTypes.bool,\n    permissions: PropTypes.any\n};\n\nCustomTable.defaultProps = {\n    className: '',\n    columns: [],\n    rows: [],\n    onPageChange: null,\n    onDelete: null,\n    onViewEdit: null,\n    page: 1,\n    lastpage: 1,\n    isPagination: true,\n    isAction: true,\n    isDelete: true,\n    isViewEdit: true,\n    additionalActions: [],\n    rowKey: undefined,\n    noSTT: false,\n    permissions: {}\n};\n\nexport default CustomTable;\n","import useTrans from 'helper/useTrans';\nimport React, { useImperativeHandle, useState } from 'react';\n\nimport { Modal } from 'react-bootstrap';\n\nconst ModalConfirm = ({ onHide, onOk, ...props }, ref) => {\n    const [show, setShow] = useState(false);\n    const [data, setData] = useState();\n    const [trans] = useTrans();\n    const [title, setTitle] = useState(trans(\"common.confirm\"));\n\n    useImperativeHandle(ref, () => ({\n        open: ({ title, ...refData }) => {\n            setShow(true);\n            setData(refData);\n            setTitle(title);\n        }\n    }));\n\n    const handleConfirmed = () => {\n        setShow(false);\n        onOk && onOk(data);\n    }\n\n    const handleHide = () => {\n        setShow(false);\n        onHide && onHide(data);\n    }\n\n    return (\n        <Modal\n            show={show}\n            onHide={handleHide}\n            aria-labelledby=\"example-modal-sizes-title-lg\"\n            {...props}\n        >\n            <Modal.Header closeButton>\n                <Modal.Title id=\"example-modal-sizes-title-lg\">\n                    {title}\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Footer>\n                <div>\n                    <button\n                        type=\"button\"\n                        onClick={handleHide}\n                        className=\"btn btn-light btn-elevate\"\n                    >\n                        {trans(\"common.skip\")}\n                </button>\n                    <> </>\n                    <button\n                        type=\"button\"\n                        onClick={handleConfirmed}\n                        className=\"btn btn-primary btn-elevate\"\n                    >\n                        {trans(\"common.confirm\")}\n                </button>\n                </div>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default React.forwardRef(ModalConfirm);\n","import React, { useCallback, useEffect, useMemo, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\n\nimport _ from 'lodash';\nimport warehouseApi from 'apis/warehouse';\nimport { dialog } from 'app/components/DialogNotify';\nimport { toAbsoluteUrl } from '_metronic/_helpers';\nimport useTrans from 'helper/useTrans';\n\nimport SVG from 'react-inlinesvg';\nimport NeedPermission from 'app/components/NeedPermission';\n\nexport default function useColumns({ onRefresh }) {\n    const dataTable = useSelector(state => state.warehouse.goodsDelivery.detail.data?.pivot_boxes);\n    const params = useParams();\n    const modalConfirmRef = useRef();\n    const inputQuantityRef = useRef([]);\n    const [trans] = useTrans();\n\n    useEffect(() => {\n        if (dataTable?.length) {\n            dataTable.forEach(d => {\n                if (inputQuantityRef.current[d.id]) inputQuantityRef.current[d.id].value = d?.quantity;\n            });\n        }\n    }, [dataTable]);\n\n    const handleChangeQuantity = (e, row) => {\n        if (e.charCode === 13) dispatchUpdateQuantity(e.target.value, row)\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const dispatchUpdateQuantity = useCallback(_.debounce((quantity, row) => {\n        if (!params?.id) return;\n\n        let availableQuantity = row.quantity + row.box_lading_bill.quantity_avaliable_in_goods_delivery;\n\n        if (quantity > availableQuantity) {\n            dialog.warning(trans(\"validation.message.max_sku_quantity_available\", { max: availableQuantity }));\n\n            if (inputQuantityRef?.current?.[row.id]) inputQuantityRef.current[row.id].value = row.quantity;\n\n            return;\n        }\n\n        warehouseApi.goodsDeliveryBoxes.update(row?.id, { quantity })\n            .then(() => {\n                onRefresh && onRefresh();\n                dialog.success(trans(\"warehouse.sku.pivot.lading_bill.update_quantity.success\"));\n            })\n            .catch((err) => {\n                let errMessage = trans(\"warehouse.sku.pivot.lading_bill.update_quantity.failure\");\n\n                if (err?.response?.data?.errors?.message) errMessage = err.response.data.errors.message;\n                dialog.error(errMessage);\n            })\n    }, 700), []);\n\n    const confirmDeleteBoxItem = (row) => {\n        modalConfirmRef.current.open({\n            title: `${trans(\"warehouse.sku.pivot.lading_bill.update_quantity.title\")}?`,\n            ...row\n        });\n    }\n\n    const columns = useMemo(() => ([\n        { id: [\"box_lading_bill\", \"owning_box\", \"box_id\"], title: trans(\"warehouse.sku.title\") },\n        {\n            id: [\"box_lading_bill\", \"owning_box\", \"objectable_id\"], title: trans(\"warehouse.sku.owner.title\"), render: (objectable_id, { box_lading_bill }) => (\n                <div className=\"owner-object\">\n                    <span className=\"object-type\">{box_lading_bill.owning_box.objectable_type === 'user' ? trans(\"common.customer\") : trans(\"common.the_order\")}</span>\n                    <span> - </span>\n                    <span className=\"object-id\">{trans(\"common.code\")}: {objectable_id}</span>\n                </div>\n            )\n        },\n        {\n            id: ['quantity'], title: trans(\"common.quantity\"), render: (quantity, row) => {\n                return (\n                    <NeedPermission need={['goods-deliveries.update']} fallback={quantity}>\n                        <input\n                            name={row.id}\n                            ref={ref => inputQuantityRef.current[row.id] = ref}\n                            className=\"form-control\"\n                            type=\"number\"\n                            onKeyPress={(e) => handleChangeQuantity(e, row)}\n                        />\n                    </NeedPermission>\n                )\n            }\n        },\n        {\n            id: 'id',\n            render: (id, row) => (\n                <NeedPermission need={['goods-deliveries.update']}>\n                    <button\n                        className=\"btn btn-icon btn-light btn-hover-danger btn-sm\"\n                        onClick={() =>\n                            confirmDeleteBoxItem(row)\n                        }\n                    >\n                        <span className=\"svg-icon svg-icon-md svg-icon-danger\">\n                            <SVG\n                                src={toAbsoluteUrl(\n                                    '/media/svg/icons/General/Trash.svg'\n                                )}\n                            ></SVG>\n                        </span>\n                    </button>\n                </NeedPermission>\n            )\n        }\n    ]), []); // eslint-disable-line\n\n    return [columns, modalConfirmRef];\n}","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport warehouseApi from 'apis/warehouse';\nimport { dialog } from 'app/components/DialogNotify';\n\nimport CustomTable from 'app/components/CustomTable';\nimport EmptyData from 'app/components/EmptyData';\nimport ModalConfirm from 'app/modules/Warehouse/components/ModalConfirm';\nimport useTrans from 'helper/useTrans';\nimport useColumns from './useColumns';\n\nimport './index.scss';\n\nfunction TableGoodsDeliveryBoxes({ onRefresh }) {\n\n    const dataTable = useSelector(state => state.warehouse.goodsDelivery.detail.data?.pivot_boxes);\n\n    const [trans] = useTrans();\n    const [columns, modalConfirmRef] = useColumns({ onRefresh });\n\n    const deleteBox = ({id }) => {\n        warehouseApi.goodsDeliveryBoxes.delete(id)\n            .then(() => {\n                onRefresh && onRefresh();\n                dialog.success(trans(\"warehouse.goods_delivery.pivot.box_lading_bill.delete.success\"));\n            })\n            .catch(() => {\n                dialog.error(trans(\"warehouse.goods_delivery.pivot.box_lading_bill.delete.failure\"));\n            })\n    }\n\n    if (!dataTable?.length) return <EmptyData emptyText={trans(\"warehouse.goods_delivery.pivot.box_lading_bill.empty\")} />\n\n    return (\n        <div>\n            <ModalConfirm ref={modalConfirmRef} onOk={deleteBox} />\n            <CustomTable\n                columns={columns}\n                rows={dataTable}\n                isViewEdit={false}\n                isDelete={false}\n                isAction={false}\n                className=\"table-list-box-in-goods-delivery\"\n            />\n        </div>\n    );\n}\n\nexport default TableGoodsDeliveryBoxes;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport clsx from 'clsx';\n\nimport SelectLadingBill from './index';\nimport { useField, useFormikContext } from \"formik\";\n\nconst SelectLadingBillForm = ({ name, ...props }) => {\n\n    const [field, meta] = useField(name);\n    const { setFieldTouched, setFieldValue } = useFormikContext();\n    const { error, touched } = meta;\n\n    const handleClick = () => {\n        setFieldTouched(field.name);\n    }\n\n    const handleChange = (v) => {\n        setFieldValue(name, v);\n    }\n\n    return (\n        <div className={clsx(touched && error && 'is-invalid')}>\n            <SelectLadingBill\n                value={field.value}\n                onChange={handleChange}\n                onClick={handleClick}\n                {...props}\n            />\n\n            {touched && error && (\n                <div className=\"invalid-feedback d-block\">{error}</div>\n            )}\n        </div>\n    );\n};\n\nSelectLadingBillForm.propTypes = {\n    value: PropTypes.any,\n    onChange: PropTypes.func,\n    withFeedbackLabel: PropTypes.bool\n};\n\nexport default SelectLadingBillForm;","import React, { useCallback } from 'react';\n\nimport { toAbsoluteUrl } from '_metronic/_helpers';\nimport _ from 'lodash';\nimport clsx from 'clsx';\nimport useTrans from 'helper/useTrans';\nimport { useFormikContext } from 'formik';\n\nimport SVG from 'react-inlinesvg';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { Pagination } from '@material-ui/lab';\nimport Loading from 'app/components/Loading';\n\nimport './ListBox.scss';\nimport EmptyData from 'app/components/EmptyData';\n\nconst ListBox = ({ boxes = [], pagination, onChangePage, loading }) => {\n\n    const { values, setFieldValue } = useFormikContext();\n    const [trans] = useTrans();\n\n    const handlePageChange = (e, page) => {\n        onChangePage && onChangePage(page);\n    }\n\n    const boxIdxInListChecked = useCallback((v) => {\n        return _.findIndex(values.boxes, ({ id }) => id == v.id); // eslint-disable-line\n    }, [values.boxes]); // eslint-disable-line\n\n    const handleToggle = (value) => () => {\n        const currentIndex = boxIdxInListChecked(value);\n        const newChecked = [...values.boxes];\n\n        if (currentIndex === -1) {\n            newChecked.push({ ...value, quantity: value?.quantity || 1 });\n        } else {\n            newChecked.splice(currentIndex, 1);\n        }\n\n        setFieldValue(\"boxes\", newChecked);\n    };\n\n    const handleQuantityChange = (e) => {\n        const boxIdx = boxIdxInListChecked({ id: e.target.name });\n\n        let newChecked = [...values.boxes];\n        newChecked[boxIdx] = { ...newChecked[boxIdx], quantity: e.target.value };\n\n        setFieldValue(\"boxes\", newChecked);\n    };\n\n    if(!boxes.length) return <EmptyData />;\n\n    return (\n        <div className=\"list-box-for-form-add-goods-delivery-boxes\">\n            <div className=\"position-relative boxes-list\">\n                {loading && <Loading local />}\n                <List className=\"row list-items\">\n                    {boxes.map((item) => {\n                        const labelId = `checkbox-list-label-${item.id}`;\n\n                        return (\n                            <div className=\"col-lg-6 col-sm-12\" key={item.id}>\n                                <ListItem role={undefined} dense button onClick={handleToggle(item)}>\n                                    <ListItemIcon>\n                                        <Checkbox\n                                            edge=\"start\"\n                                            checked={boxIdxInListChecked(item) !== -1}\n                                            tabIndex={-1}\n                                            disableRipple\n                                            inputProps={{ 'aria-labelledby': labelId }}\n                                        />\n                                    </ListItemIcon>\n                                    <div className=\"item-box\">\n                                        <SVG\n                                            src={toAbsoluteUrl(\n                                                '/media/svg/icons/Shopping/Box4.svg'\n                                            )}\n                                        ></SVG> <span className=\"item-box-id\">{item?.owning_box?.box_id}</span>\n                                    </div>\n                                </ListItem>\n                                <div className={clsx(\"item-quantity\", boxIdxInListChecked(item) !== -1 ? '' : 'd-none')}>\n                                    {trans(\"common.quantity\")}: <input name={item.id} className=\"ml-3 form-control\" defaultValue={item?.quantity || 1} min={1} type=\"number\" max={item?.quantity} onChange={handleQuantityChange} />\n                                </div>\n                            </div>\n                        );\n                    })}\n                </List>\n            </div>\n\n            {pagination && (\n                <Pagination\n                    className=\"mt-3\"\n                    count={pagination.lastPage}\n                    page={pagination.page}\n                    shape=\"rounded\"\n                    onChange={handlePageChange}\n                />\n            )}\n        </div>\n    );\n};\n\nListBox.propTypes = {\n\n};\n\nexport default ListBox;","import React from 'react';\nimport { Form, useFormikContext } from 'formik';\nimport SelectLadingBillForm from 'app/components/Select/SelectLadingBill/SelectLadingBillForm';\nimport ListBox from './ListBox';\nimport useBoxLadingBill from './useBoxLadingBill';\n\nconst FormContent = props => {\n\n    const { values } = useFormikContext();\n    const { pagination, loading, boxes, setPage } = useBoxLadingBill(values.lading_bill_id);\n\n    return (\n        <Form className=\"form form-add-box-to-lading-bill\">\n            <SelectLadingBillForm name=\"lading_bill_id\" />\n\n            <ListBox boxes={boxes} loading={loading} pagination={pagination} onChangePage={setPage} />\n        </Form>\n    );\n};\n\nFormContent.propTypes = {\n\n};\n\nexport default FormContent;","import { useEffect, useState } from \"react\";\n\nimport warehouseApi from 'apis/warehouse';\nimport useTrans from \"helper/useTrans\";\n\nimport { dialog } from \"app/components/DialogNotify\";\n\nexport default function useBoxLadingBill(ladingBillId) {\n    const [boxes, setBoxes] = useState([]);\n    const [pagination, setPagination] = useState({ page: 1, lastPage: 0 });\n    const [loading, setLoading] = useState(false);\n    const [trans] = useTrans();\n\n    useEffect(() => {\n        if (ladingBillId) {\n            getBoxLadingBills();\n        }\n    }, [ladingBillId, pagination.page]); // eslint-disable-line\n\n    const getBoxLadingBills = () => {\n        setLoading(true);\n        warehouseApi.boxLadingBill.fetchBoxLadingBills({\n            search: `lading_bill_id:${ladingBillId}`,\n            searchFields: `lading_bill_id:=`,\n            page: pagination.page,\n            with: \"owningBox\"\n        }).then((res) => {\n            setBoxes(res.data);\n            setPagination({ page: 1, lastPage: res.last_page });\n        }).catch((err) => {\n            console.error(err);\n\n            setBoxes([]);\n\n            dialog.error(trans(\"common.fetch.failure\"))\n        }).finally(() => {\n            setLoading(false);\n        });\n    }\n\n    const setPage = (page) => {\n        setPagination({\n            ...pagination,\n            page\n        });\n    }\n\n    return { boxes, pagination, loading, setPage };\n}","import React from 'react';\nimport { Formik } from 'formik';\nimport FormContent from './FormContent';\n\nconst FormAddBoxToGoodsDelivery = ({\n    onSubmit,\n    initialValues = {\n        lading_bill_id: '',\n        boxes: []\n    }\n}, ref) => {\n    return (\n       <Formik\n            onSubmit={onSubmit}\n            initialValues={initialValues}\n            innerRef={ref}\n       >\n           <FormContent />\n       </Formik>\n    );\n};\n\nexport default React.forwardRef(FormAddBoxToGoodsDelivery);","import React, { useRef, useState } from 'react';\nimport { useHistory, useParams } from 'react-router';\nimport PropTypes from 'prop-types';\n\nimport warehouseApi from 'apis/warehouse';\nimport useTrans from 'helper/useTrans';\n\nimport CustomModal from 'app/components/CustomModal';\nimport { Modal } from 'react-bootstrap';\nimport FormAddBoxToGoodsDelivery from 'app/modules/Warehouse/components/Form/FormAddBoxToGoodsDelivery';\nimport { dialog } from 'app/components/DialogNotify';\nimport Button from 'app/components/Button';\n\nconst AddBoxToGoodsDelivery = ({ onSuccess, show }) => {\n\n    const [loading, setLoading] = useState(false);\n    const history = useHistory();\n    const [trans] = useTrans();\n    const formRef = useRef();\n    const params = useParams();\n\n    const closeModal = () => {\n        history.goBack();\n    }\n\n    const triggerSubmit = () => {\n        formRef.current.submitForm();\n    }\n\n    const handleAddBox = (values) => {\n        if (!values.boxes.length) return;\n\n        setLoading(true);\n        return Promise.all(values.boxes.map(({ id: box_lading_bill_id, quantity }) => {\n            return warehouseApi.goodsDeliveryBoxes.create({ goods_delivery_id: params?.id, box_lading_bill_id, quantity })\n        })).then((res) => {\n            dialog.success(trans(\"warehouse.goods_delivery.pivot.box_lading_bill.create.success\"));\n\n            onSuccess && onSuccess();\n            history.goBack();\n        }).catch((err) => {\n            console.error(err);\n\n            dialog.error(trans(\"warehouse.goods_delivery.pivot.box_lading_bill.create.failure\"));\n        }).finally(() => {\n            setLoading(false);\n        });\n    }\n\n    return (\n        <CustomModal\n            show={show}\n            title={trans(\"warehouse.goods_delivery.pivot.box_lading_bill.create.title\")}\n            onHide={closeModal}\n            actionsLoading={loading}\n        >\n            <Modal.Body>\n                <FormAddBoxToGoodsDelivery onSubmit={handleAddBox} ref={formRef} />\n            </Modal.Body>\n            <Modal.Footer>\n                <Button type=\"secondary\" loading={loading} onClick={closeModal}>\n                    {trans(\"common.cancel\")}\n                </Button>\n                <Button type=\"primary\" loading={loading} onClick={triggerSubmit}>\n                    {trans(\"common.save\")}\n                </Button>\n            </Modal.Footer>\n        </CustomModal>\n    );\n};\n\nAddBoxToGoodsDelivery.propTypes = {\n    onSuccess: PropTypes.func,\n    show: PropTypes.bool\n};\n\nexport default AddBoxToGoodsDelivery;","import React from 'react';\n\nimport useTrans from 'helper/useTrans';\n\nimport { Card, CardBody, CardHeader, CardHeaderToolbar } from '_metronic/_partials/controls';\nimport TableGoodsDeliveryBoxes from 'app/modules/Warehouse/components/Table/TableGoodsDeliveryBoxes';\nimport useGoodsDeliveryDetail from '../hooks/useGoodsDeliveryDetail';\nimport { Route, useHistory, useRouteMatch } from 'react-router';\nimport AddBoxToGoodsDelivery from './AddBoxToGoodsDelivery';\nimport NeedPermission from 'app/components/NeedPermission';\n\nconst GoodsDeliveryBoxes = props => {\n\n    const [trans] = useTrans();\n    const getGoodsDeliveryDetail = useGoodsDeliveryDetail();\n    const history = useHistory();\n    const match = useRouteMatch();\n\n    const openModalAddBox = () => {\n        history.push(`${match.url}/add-box-to-goods-delivery`);\n    }\n\n    return (\n        <>\n            <NeedPermission need={['goods-deliveries.update']}>\n                <Route path={`${match.path}/add-box-to-goods-delivery`}>\n                    {({ match }) => (\n                        <AddBoxToGoodsDelivery\n                            show={match !== null}\n                            onSuccess={getGoodsDeliveryDetail}\n                        />\n                    )}\n                </Route>\n            </NeedPermission>\n\n            <Card>\n                <CardHeader title={trans(\"warehouse.sku.list.title\")}>\n                    <NeedPermission need={['goods-deliveries.update']}>\n                        <CardHeaderToolbar>\n                            <button className=\"btn btn-primary\" onClick={openModalAddBox}>\n                                {trans(\"warehouse.goods_delivery.pivot.box_lading_bill.create.title\")}\n                            </button>\n                        </CardHeaderToolbar>\n                    </NeedPermission>\n                </CardHeader>\n\n                <CardBody>\n                    <TableGoodsDeliveryBoxes onRefresh={getGoodsDeliveryDetail} />\n                </CardBody>\n            </Card>\n        </>\n    );\n};\n\nGoodsDeliveryBoxes.propTypes = {\n\n};\n\nexport default GoodsDeliveryBoxes;","import React, { useEffect } from 'react';\nimport { useParams } from 'react-router';\nimport { useSelector } from 'react-redux';\n\nimport useTrans from 'helper/useTrans';\nimport useGoodsDeliveryDetail from '../hooks/useGoodsDeliveryDetail';\n\nimport Layout from 'app/modules/Warehouse/components/Layout';\nimport GoodsDeliveryInfo from './GoodsDeliveryInfo';\nimport NotFound from 'app/components/NotFound';\nimport GoodsDeliveryBoxes from './GoodsDeliveryBoxes';\n\nconst GoodsDeliveryDetail = props => {\n\n    const { data, loading } = useSelector(state => state.warehouse.goodsDelivery.detail)\n    const [trans] = useTrans();\n    const params = useParams();\n    const getGoodsDeliveryDetail = useGoodsDeliveryDetail();\n\n    useEffect(() => {\n        if (params?.id) {\n            getGoodsDeliveryDetail();\n        }\n    }, [params?.id]); // eslint-disable-line\n\n    if(!data && !loading) return <NotFound />\n\n    return (\n        <Layout title={`${trans(\"warehouse.goods_delivery.title\")} - ${params.id}`}>\n            <GoodsDeliveryInfo />\n            <GoodsDeliveryBoxes />\n        </Layout>\n    );\n};\n\nGoodsDeliveryDetail.propTypes = {\n\n};\n\nexport default GoodsDeliveryDetail;","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Route, useHistory, useRouteMatch } from 'react-router';\n\nimport useTrans from 'helper/useTrans';\nimport useColumns from './useColumns';\nimport { goodsDeliveryAction } from 'app/modules/Warehouse/warehouse-redux/goodsDeliverySlice';\nimport warehouseApi from 'apis/warehouse';\n\nimport CustomTable from 'app/components/CustomTable';\nimport EmptyData from 'app/components/EmptyData';\nimport { dialog } from 'app/components/DialogNotify';\nimport ModalConfirmDelete from '../../ModalConfirmDelete';\n\nimport './index.scss';\n\nconst TableGoodsDeliveries = ({ onRefresh }) => {\n    const { data: dataTable, pagination } = useSelector(\n        state => state.warehouse.goodsDelivery.list\n    );\n    const columns = useColumns();\n    const [trans] = useTrans();\n    const history = useHistory();\n    const match = useRouteMatch();\n    const dispatch = useDispatch();\n\n    const handleConfirmDelete = (id) => {\n        history.push(`${match.url}/delete-goods-delivery/${id}`);\n    }\n\n    const handleViewEditRow = (id) => {\n        history.push(`/warehouse/goods-delivery/detail/${id}`);\n    }\n\n    const handleChangePage = (page) => {\n        dispatch(goodsDeliveryAction.setPage(page));\n    }\n\n    const handleDelete = (id) => {\n        warehouseApi.goodsDelivery.delete(id)\n            .then(() => {\n                onRefresh && onRefresh();\n\n                dialog.success(trans(\"warehouse.goods_delivery.delete.success\"));\n            })\n            .catch((err) => {\n                console.error(err);\n\n                dialog.error(trans(\"warehouse.goods_delivery.delete.failure\"));\n            })\n    }\n\n    if (!dataTable.length) return <EmptyData emptyText={trans(\"warehouse.goods_delivery.list.empty\")} />;\n\n    return (\n        <div className=\"table-goods-deliveries\">\n\n            <Route path={`${match.path}/delete-goods-delivery/:goods_delivery_id`}>\n                {({ history, match }) => (\n                    <ModalConfirmDelete\n                        id={match?.params?.goods_delivery_id}\n                        show={match != null}\n                        onConfirmed={handleDelete}\n                        title={trans(\"warehouse.goods_delivery.delete.title\")}\n                    />\n                )}\n            </Route>\n\n            <CustomTable\n                columns={columns}\n                rows={dataTable}\n                onDelete={handleConfirmDelete}\n                onViewEdit={handleViewEditRow}\n                onPageChange={handleChangePage}\n                page={pagination.page}\n                lastpage={pagination.lastPage}\n                rowKey=\"id\"\n                permissions={{\n                    delete: ['goods-deliveries.delete']\n                }}\n            />\n        </div>\n    );\n};\n\nTableGoodsDeliveries.propTypes = {\n    onRefresh: PropTypes.func\n};\n\nexport default TableGoodsDeliveries;\n","import formatNumber from 'helper/formatNumber';\nimport useTrans from 'helper/useTrans';\n\nexport default function useColumns() {\n\n    const [trans] = useTrans();\n\n    return [\n        {\n            id: [\"delivery_partner\", \"name\"],\n            title: trans(\"warehouse.delivery_partner.title\"),\n            render: (partner_name) => partner_name || '---'\n        },\n        {\n            id: [\"goods_delivery_status\", \"name\"],\n            title: trans(\"warehouse.goods_delivery_status.title\"),\n        },\n        {\n            id: 'shipping_cost',\n            title: trans(\"warehouse.cost.shipping\"),\n            render: (shipping_cost) => formatNumber(shipping_cost)\n        },\n        {\n            id: \"box_lading_bills\",\n            title: trans(\"warehouse.sku.quantity\"),\n            render: (box_lading_bills) => {\n                let totalQuantity = 0;\n\n                if (box_lading_bills) {\n                    box_lading_bills.reduce((prevV, curV) => {\n                        return prevV + (curV?.pivot?.quantity || 0);\n                    }, 0);\n                }\n\n                return formatNumber(totalQuantity);\n            }\n        }\n    ]\n}","import React, { useCallback, useState, forwardRef, useImperativeHandle, useMemo } from 'react';\n\nimport _ from 'lodash';\nimport useTrans from 'helper/useTrans';\nimport SelectDeliveryPartners from 'app/components/Select/SelectDeliveryPartner';\nimport SelectGoodsDeliveryStatus from 'app/components/Select/SelectGoodsDeliveryStatus';\n\nconst GoodsDeliveryFilter = ({ onSearch, searchAll = true }, ref) => {\n\n    const [trans] = useTrans();\n\n    const fields = [\n        { id: 'partner_id', title: trans(\"warehouse.delivery_partner.title\") },\n        { id: 'status_id', title: trans(\"warehouse.goods_delivery_status.title\") },\n    ]\n\n    const [searchField, setSearchField] = useState(searchAll ? '' : fields?.[0]?.id);\n    const [searchText, setSearchText] = useState('');\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const dispatchSearch = useCallback(_.debounce((_searchText, _searchField) => {\n        if (_searchField.length && _searchText.length) {\n            onSearch && onSearch({ search: `${_searchField}:${_searchText}`, searchFields: `${_searchField}:like` });\n        } else {\n            onSearch && onSearch({ search: _searchText });\n        }\n    }, 700), []);\n\n    useImperativeHandle(ref, () => ({\n        reset: () => {\n            setSearchText('');\n            setSearchField(searchAll ? '' : fields?.[0]?.id);\n        }\n    }))\n\n    const handleSearchTextChange = (e) => {\n        setSearchText(e.target.value);\n\n        dispatchSearch(e.target.value, searchField);\n    }\n\n    const handleSearchFieldChange = (e) => {\n        setSearchField(e.target.value);\n\n        if (searchText.length) {\n            setSearchText('');\n            dispatchSearch('', e.target.value);\n        }\n    }\n\n    const handleCustomerChange = (customer_id) => {\n        setSearchText(customer_id);\n\n        dispatchSearch(customer_id, searchField);\n    }\n\n    const getSearchFieldCpn = useMemo(() => {\n        if (searchField === 'partner_id')\n            return <SelectDeliveryPartners showLabel={false} onChange={handleCustomerChange} value={searchText} />\n\n        if (searchField === 'status_id')\n            return <SelectGoodsDeliveryStatus value={searchText} onChange={handleCustomerChange} showLabel={false} />\n\n        return (\n            <input\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"Search\"\n                onChange={handleSearchTextChange}\n                value={searchText}\n            />\n        )\n    }, [searchField, searchText]); // eslint-disable-line\n\n    return (\n        <div className=\"form-group row custom-filter-warehouse\">\n            <div className=\"col-lg-4 col-md-4 col-sm-4 p-3\">\n                <select name=\"searchField\" id=\"searchField\" className=\"form-control\" onChange={handleSearchFieldChange} value={searchField}>\n                    {searchAll ? (<option value=\"\">{trans(\"common.all\")}</option>) : ''}\n                    {(fields || []).map((f, idx) => (\n                        <option value={f.id} key={`search-field-${idx}`}>{f.title}</option>\n                    ))}\n                </select>\n            </div>\n            <div className=\"col-lg-4 col-md-6 col-sm-8 p-3\">\n                {getSearchFieldCpn}\n            </div>\n        </div>\n    );\n};\n\nexport default forwardRef(GoodsDeliveryFilter);","import React, { useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router';\n\nimport useTrans from 'helper/useTrans';\nimport warehouseApi from 'apis/warehouse';\nimport handleApiError from 'helper/handleApiError';\n\nimport CustomModal from 'app/components/CustomModal';\nimport { Modal } from 'react-bootstrap';\nimport { dialog } from 'app/components/DialogNotify';\nimport FormAddGoodsDelivery from 'app/modules/Warehouse/components/Form/FormAddGoodsDelivery';\nimport Button from 'app/components/Button';\n\nconst CreateGoodsDelivery = ({ onSuccess, show }) => {\n\n    const [loading, setLoading] = useState(false);\n    const [trans] = useTrans();\n    const history = useHistory();\n    const formRef = useRef();\n\n    const closeModal = () => {\n        history.goBack();\n    }\n\n    const triggerSubmit = () => {\n        formRef.current.submitForm();\n    }\n\n    const createGoodsDelivery = (values, form) => {\n        setLoading(true);\n\n        warehouseApi.goodsDelivery.create(values)\n            .then(res => {\n                dialog.success(trans(\"warehouse.goods_delivery.create.success\"));\n\n                onSuccess && onSuccess(res);\n            })\n            .catch((err) => {\n                console.error(err);\n\n                handleApiError(err, form);\n            })\n            .finally(() => {\n                setLoading(false);\n            })\n    }\n\n    return (\n        <CustomModal\n            show={show}\n            onHide={closeModal}\n            title={trans(\"warehouse.goods_delivery.create.title\")}\n            actionsLoading={loading}\n        >\n\n            <Modal.Body>\n                <FormAddGoodsDelivery\n                    onSubmit={createGoodsDelivery}\n                    ref={formRef}\n                    initialValues={{\n                        status_id: 'waiting_shipment',\n                        partner_id: '',\n                        shipping_cost: 0,\n                        shipment_info_id: ''\n                    }}\n                    showStatus={false}\n                />\n            </Modal.Body>\n            <Modal.Footer>\n                <Button type=\"secondary\" loading={loading} onClick={closeModal}>\n                    {trans(\"common.cancel\")}\n                </Button>\n                <Button type=\"primary\" loading={loading} onClick={triggerSubmit}>\n                    {trans(\"common.save\")}\n                </Button>\n            </Modal.Footer>\n        </CustomModal>\n    );\n};\n\nCreateGoodsDelivery.propTypes = {\n    onSuccess: PropTypes.func,\n    show: PropTypes.bool\n};\n\nexport default CreateGoodsDelivery;","import React, { useRef } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport useTrans from 'helper/useTrans';\nimport useGoodsDeliveryList from '../hooks/useGoodsDeliveryList';\n\nimport { Card, CardBody, CardHeader, CardHeaderToolbar } from '_metronic/_partials/controls';\nimport Loading from 'app/components/Loading';\nimport TableGoodsDeliveries from 'app/modules/Warehouse/components/Table/TableGoodsDeliveries';\nimport GoodsDeliveryFilter from 'app/modules/Warehouse/components/Filter/GoodsDeliveryFilter';\nimport { Route, useHistory, useRouteMatch } from 'react-router';\nimport CreateGoodsDelivery from './CreateGoodsDelivery';\nimport NeedPermission from 'app/components/NeedPermission';\n\nconst ListGoodsDelivery = props => {\n\n    const { loading } = useSelector(state => state.warehouse.goodsDelivery.list)\n    const [trans] = useTrans();\n    const filterRef = useRef();\n    const getDataGoodsDelivery = useGoodsDeliveryList();\n    const history = useHistory();\n    const match = useRouteMatch();\n\n    const handleSearchSubmit = search => {\n        getDataGoodsDelivery(search);\n    };\n\n    const openCreateModal = () => {\n        history.push(`${match.url}/create-goods-delivery`)\n    }\n\n    const createLadingBillSuccess = (data) => {\n        getDataGoodsDelivery();\n\n        history.push(`/warehouse/goods-delivery/detail/${data.id}`)\n    }\n\n    return (\n        <>\n            <NeedPermission need={[\"goods-deliveries.create\"]}>\n                <Route path={`${match.path}/create-goods-delivery`}>\n                    {({ match }) => (\n                        <CreateGoodsDelivery\n                            show={match !== null}\n                            onSuccess={createLadingBillSuccess}\n                        />\n                    )}\n                </Route>\n            </NeedPermission>\n\n            <Card>\n                <CardHeader title={trans(\"warehouse.goods_delivery.list.title\")}>\n                    <NeedPermission need={[\"goods-deliveries.create\"]}>\n                        <CardHeaderToolbar>\n                            <button className=\"btn btn-primary\" onClick={openCreateModal}>\n                                {trans(\"warehouse.goods_delivery.create.title\")}\n                            </button>\n                        </CardHeaderToolbar>\n                    </NeedPermission>\n                </CardHeader>\n                <CardBody className=\"position-relative\">\n                    {loading && <Loading local />}\n\n                    <GoodsDeliveryFilter ref={filterRef} onSearch={handleSearchSubmit} />\n                    <TableGoodsDeliveries onRefresh={getDataGoodsDelivery} />\n                </CardBody>\n            </Card>\n        </>\n    );\n};\n\nListGoodsDelivery.propTypes = {\n\n};\n\nexport default ListGoodsDelivery;","import { useEffect } from \"react\";\nimport { fetchGoodsDeliveries } from \"app/modules/Warehouse/warehouse-redux/goodsDeliverySlice\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nexport default function useGoodsDeliveryList() {\n\n    const pagination = useSelector(state => state.warehouse.goodsDelivery.list.pagination);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        getDataGoodsDelivery();\n    }, [pagination.page]); // eslint-disable-line\n\n    const getDataGoodsDelivery = (params) => {\n        dispatch(fetchGoodsDeliveries({ page: pagination.page, with: \"deliveryPartner;goodsDeliveryStatus\", ...params }));\n    }\n\n    return getDataGoodsDelivery;\n}","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\nimport './index.scss';\n\nexport const TabPanel = (props) => {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div\n            style={value !== index ? { display: 'none' } : {}}\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`simple-tabpanel-${index}`}\n            aria-labelledby={`simple-tab-${index}`}\n            {...other}\n        >\n            {children}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any,\n    value: PropTypes.any,\n};\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`,\n    };\n}\n\n/**\n * \n * @param {*} labels: label hiển thị trên tab head, Exg: ['Tab 1', 'Tab 2'] \n * @param {*} children: Một list các TabPanel, Exg: (\n *      <TabPanel>... Tab content 1 ...</TabPanel>\n *      <TabPanel>... Tab content 2 ...</TabPanel>\n * )\n * \n * @returns \n */\nexport default function SimpleTabs({ labels = [], children }) {\n    const [value, setValue] = React.useState(0);\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    const tabContent = useMemo(() => {\n        return React.Children.map(children, (child, cIdx) => {\n            return React.cloneElement(child, {\n                ...child.props,\n                value,\n                index: cIdx\n            })\n        })\n    }, [children, value]);\n\n    return (\n        <div className=\"simple-tabs\">\n            <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\">\n                {labels.map((label) => (\n                    <Tab label={label} {...a11yProps(0)} key={`tab-label-${label}`} />\n                ))}\n            </Tabs>\n            {tabContent}\n        </div>\n    );\n}\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Route, useHistory, useRouteMatch } from 'react-router';\n\nimport useTrans from 'helper/useTrans';\nimport useColumns from './useColumns';\nimport warehouseApi from 'apis/warehouse';\nimport { deliveryPartnerAction } from 'app/modules/Warehouse/warehouse-redux/deliveryPartnerSlice';\n\nimport CustomTable from 'app/components/CustomTable';\nimport EmptyData from 'app/components/EmptyData';\nimport { dialog } from 'app/components/DialogNotify';\nimport ModalConfirmDelete from '../../ModalConfirmDelete';\n\nimport './index.scss';\n\nconst TableDeliveryPartner = ({ onRefresh, onViewEdit }) => {\n    const dataTable = useSelector(\n        state => state.warehouse.deliveryPartner.list.data\n    );\n    const pagination = useSelector(\n        state => state.warehouse.deliveryPartner.list.pagination\n    );\n    const columns = useColumns();\n    const [trans] = useTrans();\n    const history = useHistory();\n    const match = useRouteMatch();\n    const dispatch = useDispatch();\n\n    const handleConfirmDelete = (id) => {\n        history.push(`${match.url}/delete-delivery-partner/${id}`);\n    }\n\n    const handleDelete = (id) => {\n        warehouseApi.deliveryPartner.delete(id)\n            .then(() => {\n                onRefresh && onRefresh();\n\n                dialog.success(trans(\"warehouse.delivery_partner.delete.success\"));\n            })\n            .catch((err) => {\n                console.error(err);\n\n                dialog.error(trans(\"warehouse.delivery_partner.delete.failure\"));\n            })\n    }\n\n    const handlePageChange = useCallback((page) => {\n        dispatch(deliveryPartnerAction.setPage(page));\n    }, [dispatch]);\n\n    if (!dataTable.length) return <EmptyData emptyText={trans(\"warehouse.delivery_partner.list.empty\")} />;\n\n    return (\n        <div className=\"table-delivery-partner\">\n\n            <Route path={`${match.path}/delete-delivery-partner/:delivery_partner_id`}>\n                {({ match }) => (\n                    <ModalConfirmDelete\n                        id={match?.params?.delivery_partner_id}\n                        show={match != null}\n                        onConfirmed={handleDelete}\n                        title={trans(\"warehouse.delivery_partner.delete.title\")}\n                    />\n                )}\n            </Route>\n\n            <CustomTable\n                columns={columns}\n                rows={dataTable}\n                onDelete={handleConfirmDelete}\n                onViewEdit={onViewEdit}\n                page={pagination.page}\n                lastpage={pagination.lastPage}\n                onPageChange={handlePageChange}\n                rowKey=\"id\"\n                noSTT\n                permissions={{\n                    update: ['delivery-partners.update'],\n                    delete: ['delivery-partners.delete']\n                }}\n            />\n        </div>\n    );\n};\n\nTableDeliveryPartner.propTypes = {\n    onRefresh: PropTypes.func\n};\n\nexport default TableDeliveryPartner;\n","import useTrans from 'helper/useTrans';\n\nexport default function useColumns() {\n\n    const [trans] = useTrans();\n\n    return [\n        {\n            id: 'id',\n            title: trans(\"warehouse.delivery_partner.id\"),\n        },\n        {\n            id: 'name',\n            title: trans(\"warehouse.delivery_partner.name\")\n        },\n    ]\n}","import React from 'react';\n\nimport { FastField, Formik } from 'formik';\nimport { Input } from '_metronic/_partials/controls';\nimport * as Yup from 'yup';\nimport FormStatus from '../FormStatus';\nimport Form from '../FormEnterIndex';\nimport useTrans from 'helper/useTrans';\n\nimport './index.scss';\n\nfunction FormAddArea({\n    initialValues = {\n        name: '',\n        id: ''\n    },\n    onSubmit,\n}, ref) {\n    const [trans] = useTrans();\n\n    const validationSchema = Yup.object().shape({\n        id: Yup.number()\n            .required(trans(\"validation.message.required\")),\n\n        name: Yup.string()\n            .required(trans(\"validation.message.required\")),\n    });\n\n    return (\n        <Formik\n            enableReinitialize\n            initialValues={initialValues}\n            onSubmit={onSubmit}\n            innerRef={ref}\n            validationSchema={validationSchema}\n        >\n            <Form className=\"form form-label-right form-add-delivery-partner\">\n                <div className=\"p-3\">\n                    <FastField\n                        name=\"id\"\n                        component={Input}\n                        label={trans(\"warehouse.delivery_partner.id\")}\n                        placeholder={trans(\"warehouse.delivery_partner.id\")}\n                        autoComplete=\"off\"\n                        type=\"number\"\n                    />\n                </div>\n\n                <div className=\"p-3\">\n                    <FastField\n                        name=\"name\"\n                        component={Input}\n                        label={trans(\"warehouse.delivery_partner.name\")}\n                        placeholder={trans(\"warehouse.delivery_partner.name\")}\n                        autoComplete=\"off\"\n                    />\n                </div>\n\n                <FormStatus />\n            </Form>\n        </Formik>\n    );\n}\n\nexport default React.forwardRef(FormAddArea);\n","import React, { useImperativeHandle, useRef, useState } from 'react';\nimport { useHistory } from 'react-router';\n\nimport useTrans from 'helper/useTrans';\nimport warehouseApi from 'apis/warehouse';\n\nimport CustomModal from 'app/components/CustomModal';\nimport { Modal } from 'react-bootstrap';\nimport { dialog } from 'app/components/DialogNotify';\nimport handleApiError from 'helper/handleApiError';\nimport FormAddDeliveryPartner from 'app/modules/Warehouse/components/Form/FormAddDeliveryPartner';\nimport Button from 'app/components/Button';\n\nconst ModalCreateDeliveryPartner = ({ show, onHide, onSuccess, editMode = false, id }, ref) => {\n\n    const [loading, setLoading] = useState();\n    const [initialValues, setInitialValues] = useState();\n    const [trans] = useTrans();\n    const history = useHistory();\n    const formRef = useRef();\n\n    useImperativeHandle(ref, () => ({\n        setInitialData: (data) => {\n            setInitialValues(data)\n        }\n    }));\n\n    const closeModal = () => {\n        if (onHide) onHide();\n        else history.goBack();\n    }\n\n    const handleSubmit = (values, form) => {\n        if (editMode) updateDeliveryPartner(values, form);\n        else createDeliveryPartner(values, form);\n    }\n\n    const createDeliveryPartner = (values, form) => {\n\n        setLoading(true);\n\n        warehouseApi.deliveryPartner.create(values)\n            .then(() => {\n                dialog.success(trans(\"warehouse.delivery_partner.create.success\"));\n\n                onSuccess && onSuccess();\n                closeModal();\n            })\n            .catch((err) => {\n                dialog.error(trans(\"warehouse.delivery_partner.create.failure\"));\n\n                handleApiError(err, form);\n            })\n            .finally(() => {\n                setLoading(false);\n            })\n    }\n\n    const updateDeliveryPartner = (values, form) => {\n\n        setLoading(true);\n\n        warehouseApi.deliveryPartner.update(id, values)\n            .then(() => {\n                dialog.success(trans(\"warehouse.delivery_partner.update.success\"));\n\n                onSuccess && onSuccess();\n                closeModal();\n            })\n            .catch((err) => {\n                dialog.error(trans(\"warehouse.delivery_partner.update.failure\"));\n\n                handleApiError(err, form);\n            })\n            .finally(() => {\n                setLoading(false);\n            })\n    }\n\n    const triggerSubmit = () => {\n        formRef.current.submitForm();\n    }\n\n    return (\n        <CustomModal\n            show={show}\n            onHide={closeModal}\n            title={!editMode ? trans(\"warehouse.delivery_partner.create.title\") : trans(\"warehouse.delivery_partner.update.title\")}\n            actionsLoading={loading}\n        >\n            <Modal.Body>\n                <FormAddDeliveryPartner\n                    formItemClass=\"col-lg-4 col-md-6 col-sm-12\"\n                    ref={formRef}\n                    onSubmit={handleSubmit}\n                    initialValues={initialValues}\n                />\n            </Modal.Body>\n            <Modal.Footer>\n                <Button type=\"secondary\" loading={loading} onClick={closeModal}>{trans(\"common.cancel\")}</Button>\n                <Button type=\"primary\" loading={loading} onClick={triggerSubmit}>{trans(\"common.save\")}</Button>\n            </Modal.Footer>\n        </CustomModal>\n    );\n};\n\nexport default React.forwardRef(ModalCreateDeliveryPartner);","import React, { useCallback, useEffect, useRef } from 'react';\nimport { Route, useHistory, useRouteMatch } from 'react-router';\nimport { useDispatch } from 'react-redux';\n\nimport useTrans from 'helper/useTrans';\n\nimport { Card, CardBody, CardHeader, CardHeaderToolbar } from '_metronic/_partials/controls';\nimport Button from 'app/components/Button';\nimport TableDeliveryPartner from 'app/modules/Warehouse/components/Table/TableDeliveryPartner';\nimport { fetchDeliveryPartners } from 'app/modules/Warehouse/warehouse-redux/deliveryPartnerSlice';\nimport ModalCreateDeliveryPartner from './ModalCreateDeliveryPartner';\nimport NeedPermission from 'app/components/NeedPermission';\n\nconst DeliveryPartners = props => {\n\n    const [trans] = useTrans();\n    const history = useHistory();\n    const match = useRouteMatch();\n    const dispatch = useDispatch();\n    const modalEditRef = useRef();\n\n    useEffect(() => {\n        f5Data();\n    }, []); // eslint-disable-line\n\n    const openModalCreate = useCallback(() => {\n        history.push(`${match.url}/create-delivery-partner`);\n    }, [history, match.url]);\n\n    const openModalUpdate = useCallback((id, row) => {\n\n        modalEditRef.current.setInitialData(row);\n\n        history.push(`${match.url}/update-delivery-partner/${id}`);\n    }, [history, match.url]);\n\n    const f5Data = useCallback(() => {\n        dispatch(fetchDeliveryPartners());\n    }, [dispatch]);\n\n    return (\n        <>\n            <NeedPermission need={['delivery-partners.create']}>\n                <Route path={`${match.path}/create-delivery-partner`}>\n                    {({ match }) => (\n                        <ModalCreateDeliveryPartner\n                            show={match !== null}\n                            onSuccess={f5Data}\n                        />\n                    )}\n                </Route>\n            </NeedPermission>\n\n            <NeedPermission need={['delivery-partners.update']}>\n                <Route path={`${match.path}/update-delivery-partner/:id`}>\n                    {({ match }) => (\n                        <ModalCreateDeliveryPartner\n                            ref={modalEditRef}\n                            id={match?.params?.id}\n                            show={match !== null}\n                            onSuccess={f5Data}\n                            editMode\n                        />\n                    )}\n                </Route>\n            </NeedPermission>\n\n            <Card className=\"delivery-partners\">\n                <CardHeader title={trans(\"warehouse.delivery_partner.title\")}>\n                    <NeedPermission need={['delivery-partners.create']}>\n                        <CardHeaderToolbar>\n                            <Button type=\"primary\" onClick={openModalCreate}>{trans(\"warehouse.delivery_partner.create.title\")}</Button>\n                        </CardHeaderToolbar>\n                    </NeedPermission>\n                </CardHeader>\n                <CardBody>\n                    <TableDeliveryPartner\n                        onRefresh={f5Data}\n                        onViewEdit={openModalUpdate}\n                    />\n                </CardBody>\n            </Card>\n        </>\n    );\n};\n\nDeliveryPartners.propTypes = {\n\n};\n\nexport default DeliveryPartners;","import React from 'react';\n\nimport useTrans from 'helper/useTrans';\n\nimport Layout from 'app/modules/Warehouse/components/Layout';\nimport ListGoodsDelivery from '../ListGoodsDelivery';\nimport SimpleTabs, { TabPanel } from 'app/components/Tabs/Simple';\nimport DeliveryPartners from '../DeliveryPartners';\nimport NeedPermission from 'app/components/NeedPermission';\n\nconst GDTabContent = props => {\n\n    const [trans] = useTrans();\n\n    return (\n        <Layout title={trans(\"MENU.WAREHOUSE.GOODS_DELIVERY\")}>\n            <SimpleTabs labels={[\n                trans(\"MENU.WAREHOUSE.GOODS_DELIVERY\"),\n                trans(\"warehouse.delivery_partner.title\")\n            ]}>\n                <TabPanel>\n                    <NeedPermission need={[\"goods-deliveries.index\"]}>\n                        <ListGoodsDelivery />\n                    </NeedPermission>\n                </TabPanel>\n\n                <TabPanel>\n                    <NeedPermission need={[\"delivery-partners.index\"]}>\n                        <DeliveryPartners />\n                    </NeedPermission>\n                </TabPanel>\n            </SimpleTabs>\n        </Layout>\n    );\n};\n\nGDTabContent.propTypes = {\n\n};\n\nexport default GDTabContent;","import React from 'react';\nimport { Route, Redirect, Switch, useRouteMatch } from 'react-router-dom';\n\nimport GoodsDeliveryDetail from './GoodsDeliveryDetail';\nimport GDTabContent from './GDTabContent';\nimport NeedPermission from 'app/components/NeedPermission';\n\nconst GoodsDelivery = props => {\n\n    const match = useRouteMatch();\n\n    return (\n        <Switch>\n            <Redirect exact={true} from=\"/warehouse/goods-delivery\" to=\"/warehouse/goods-delivery/list\" />\n\n            <Route path={`${match.path}/list`}>\n                <GDTabContent />\n            </Route>\n\n            <NeedPermission need=\"goods-deliveries.update\">\n                <Route path={`${match.path}/detail/:id`}>\n                    <GoodsDeliveryDetail />\n                </Route>\n            </NeedPermission>\n        </Switch>\n    );\n};\n\nGoodsDelivery.propTypes = {\n\n};\n\nexport default GoodsDelivery;","export const currenyUnit = '¥';","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { toAbsoluteUrl } from '_metronic/_helpers';\nimport clsx from 'clsx';\nimport formatNumber from 'helper/formatNumber';\nimport { currenyUnit } from 'config/currency';\nimport useTrans from 'helper/useTrans';\n\nimport SVG from 'react-inlinesvg';\nimport { Card, CardBody } from '_metronic/_partials/controls';\nimport { Divider } from '@material-ui/core';\nimport CustomTable from 'app/components/CustomTable';\n\nimport './InboundPlanItem.scss';\n\nconst productItemColumns = [\n    { id: 'id', title: <span>Jancode</span> },\n    { id: 'quantity', title: <span>Số lượng</span>, render: (quantity) => formatNumber(quantity) },\n    { id: 'order_id', title: <span>\bMã đặt hàng</span> },\n    { id: 'amount', title: <span>Tổng tiền</span>, render: (amount) => `${formatNumber(amount)} ${currenyUnit}` },\n    {\n        id: 'is_box', title: <span>Đóng gói</span>, render: (is_box) => {\n            if (is_box) return <span className=\"isbox-badge packbox\">Có</span>\n            return <span className=\"isbox-badge unpackbox\">Không</span>\n        }\n    },\n]\n\nconst InboundPlanItem = ({ data }) => {\n\n    const [trans] = useTrans();\n\n    const iconUrl = useMemo(() => {\n        if (data.checked) return '/media/svg/icons/Shopping/delivery-truck-shipped.svg';\n\n        return '/media/svg/icons/Shopping/delivery-truck.svg';\n    }, [data.checked]);\n\n    if(!data?.code) return <></>;\n\n    return (\n        <Card className=\"inbound-plan-item position-relative\">\n            <CardBody>\n                <div className=\"info-section\">\n                    <div className=\"content-wrapper\">\n                        <div className={clsx(data?.checked ? 'received' : 'pending', 'is-checked custom-box status-box')}>\n                            {data?.checked ?\n                                trans(\"warehouse.inbound_plan.arive_status.arrived\") :\n                                trans(\"warehouse.inbound_plan.arive_status.not_yet\")\n                            }\n                        </div>\n                        <div className=\"code custom-box\">\n                            <div className=\"code-label\">{trans(\"warehouse.tracking.id\")}</div>\n                            <div className=\"code-value\">{data?.code}</div>\n                        </div>\n                    </div>\n\n                    <div className={clsx(\"icon-wrapper\", !data?.checked && \"not_yet\")}>\n                        <SVG src={toAbsoluteUrl(iconUrl)} />\n                    </div>\n                </div>\n\n                {data?.order_items?.length ? <Divider /> : ''}\n\n                <div className=\"items-wrapper\">\n                    {data?.order_items?.length ? (\n                        <CustomTable\n                            columns={productItemColumns}\n                            rows={data?.order_items || []}\n                            isAction={false}\n                            className=\"table-tracking-products\"\n                            isPagination={false}\n                        />\n                    ) : ''}\n                </div>\n            </CardBody>\n        </Card>\n    );\n};\n\nInboundPlanItem.propTypes = {\n    data: PropTypes.any\n};\n\nexport default InboundPlanItem;","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport InboundPlanItem from './InboundPlanItem';\nimport Loading from 'app/components/Loading';\nimport EmptyData from 'app/components/EmptyData';\n\nimport './index.scss';\n\nconst ListInboundPlan = ({ data, loading }) => {\n\n    const checkedData = useMemo(() => {\n        return data.filter(d => d.code);\n    }, [data]);\n\n    return (\n        <div className=\"list-inbound-plan position-relative\">\n            {loading && <Loading local />}\n            {!data?.length ? (\n                <EmptyData />\n            ) : ''}\n            {checkedData.map((trackingItem, idx) => (\n                <div className=\"col-lg-6 col-sm-12\" key={`tracking-item-${idx}`}>\n                    <InboundPlanItem data={trackingItem} />\n                </div>\n            ))}\n        </div>\n    );\n};\n\nListInboundPlan.propTypes = {\n    data: PropTypes.array,\n    loading: PropTypes.bool,\n};\n\nexport default ListInboundPlan;","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport ListInboundPlan from '../../components/List/ListInboundPlan';\n\nconst ListTracking = props => {\n\n    const { isLoading, trackingList } = useSelector(state => state.purchase.tracking); // eslint-disable-line\n\n    return (\n        <ListInboundPlan\n            data={trackingList}\n            loading={isLoading}\n        />\n    );\n};\n\nListTracking.propTypes = {\n\n};\n\nexport default ListTracking;","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport moment from 'moment';\nimport { fetchTracking } from 'app/modules/Purchase/redux/trackingSlice';\nimport useTrans from 'helper/useTrans';\n\nimport DatePicker from \"react-datepicker\";\nimport { Card, CardBody } from '_metronic/_partials/controls';\nimport { Pagination } from '@material-ui/lab';\n\nimport './index.scss';\n\nconst ListTrackingFilter = props => {\n\n    const { pagination } = useSelector(state => state.purchase.tracking);\n    const [selectedDate, setSelectedDate] = useState(new Date());\n    const [params, setParams] = useState({\n        page: 1,\n        search: `expected_delivery:${moment().format('YYYY-MM-DD')}`, \n        searchField: undefined,\n        with: 'orderItems;purchaseItems'\n    });\n    const dispatch = useDispatch();\n    const [trans] = useTrans();\n\n    useEffect(() => {\n        dispatch(fetchTracking(params));\n    }, [params]); // eslint-disable-line\n\n    const dateChange = (val) => {\n        setSelectedDate(val);\n        setParams({ ...params, search: `expected_delivery:${moment(val).format('YYYY-MM-DD')}` })\n    }\n\n    const handlePageChange = (e, page) => {\n        setParams({ ...params, page });\n    }\n\n    return (\n        <Card className=\"list-tracking-filter\">\n            <CardBody>\n                <div className=\"select-date\">\n                    <label htmlFor=\"\">{trans(\"warehouse.inbound_plan.received_date\")}</label>\n                    <DatePicker\n                        className=\"form-control\"\n                        style={{ width: \"100%\" }}\n                        selected={selectedDate}\n                        onChange={dateChange}\n                        popperPlacement=\"bottom\"\n                    />\n                </div>\n                <div className=\"pagination\">\n                    <Pagination\n                        count={pagination.lastPage}\n                        page={params.page}\n                        shape=\"rounded\"\n                        onChange={handlePageChange}\n                    />\n                </div>\n            </CardBody>\n        </Card>\n    );\n};\n\nListTrackingFilter.propTypes = {\n\n};\n\nexport default ListTrackingFilter;","import moment from 'moment';\n\nconst convertObjectDateToString = (obj, formater = 'YYYY-MM-DD') => {\n\n    const result = {};\n\n    Object.entries(obj).forEach(([key, value]) => {\n        let tempV = value;\n        if (value instanceof Date || value instanceof moment) tempV = moment(value).format(formater);\n\n        result[key] = tempV;\n    });\n\n    return result;\n}\n\nexport default convertObjectDateToString;","import React from 'react';\n\nimport { toAbsoluteUrl } from '_metronic/_helpers';\nimport trackingApi from 'apis/order/trackingApi';\n\nimport SVG from 'react-inlinesvg';\nimport { Button } from 'react-bootstrap';\nimport Popover from '@material-ui/core/Popover';\nimport { dialog } from 'app/components/DialogNotify';\nimport { useFormikContext } from 'formik';\nimport { startPrinter } from 'app/components/PrinterModal';\nimport { getTemplateData } from 'helper/printerTemplateData';\nimport useTrans from 'helper/useTrans';\n\nconst TrackingLabel = props => {\n\n    const { setFieldValue, values } = useFormikContext();\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const open = Boolean(anchorEl);\n    const [trans] = useTrans();\n\n    const handleClick = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const handleCreateTracking = () => {\n        trackingApi.createTracking()\n            .then((response) => {\n                dialog.success(trans(\"warehouse.tracking.create.success\"));\n                setFieldValue('tracking', response.id);\n\n                startPrinter(getTemplateData('TRACKING', { tracking: response.id, quantity: 2, sfaQuantity: values.quantity }));\n\n                setAnchorEl(null);\n            })\n            .catch(() => {\n                dialog.error(trans(\"warehouse.tracking.create.failure\"));\n            })\n    }\n\n\n    return (\n        <div className=\"tracking-label\">\n           {trans(\"ORDER.CODE_TRACKING\")}\n\n            <Button variant=\"link\" onClick={handleClick} className=\"p-0\">\n                <SVG\n                    src={toAbsoluteUrl(\n                        '/media/svg/icons/Code/Info-circle.svg'\n                    )}\n                ></SVG>\n            </Button>\n\n            <Popover\n                open={open}\n                anchorEl={anchorEl}\n                onClose={handleClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n            >\n                <div className=\"p-3\">\n                    {trans(\"warehouse.tracking.no_code\")} <Button variant=\"link\" onClick={handleCreateTracking}>{trans(\"warehouse.tracking.create.title\")}</Button>\n                </div>\n            </Popover>\n        </div>\n    );\n};\n\nTrackingLabel.propTypes = {\n\n};\n\nexport default TrackingLabel;","import React from 'react';\n\nimport { FastField, Formik } from 'formik';\nimport { Input } from '_metronic/_partials/controls';\nimport * as Yup from 'yup';\nimport FormStatus from '../FormStatus';\nimport Form from '../FormEnterIndex';\nimport useTrans from 'helper/useTrans';\n\nimport './index.scss';\n\nconst phoneRegExp = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/\n\nfunction FormAddAgency({\n    formItemClass = 'col-lg-12 col-md-12 col-sm-12',\n    initialValues = {\n        name: '',\n        address: '',\n        tel: '',\n    },\n    onSubmit,\n}, ref) {\n    const [trans] = useTrans();\n\n    const validationSchema = Yup.object().shape({\n        name: Yup.string()\n            .required(trans(\"validation.message.required\")),\n        address: Yup.string()\n            .required(trans(\"validation.message.required\")),\n        tel: Yup.string()\n            .matches(phoneRegExp, trans(\"validation.message.invalid_phone_number\"))\n            .required(trans(\"validation.message.required\")),\n    });\n\n    return (\n        <Formik\n            enableReinitialize\n            initialValues={initialValues}\n            onSubmit={onSubmit}\n            innerRef={ref}\n            validationSchema={validationSchema}\n        >\n            <Form className=\"form form-label-right form-add-agency\">\n                <div className=\"form-group row\">\n                    <div className={formItemClass}>\n                        <FastField\n                            name=\"name\"\n                            component={Input}\n                            label={trans(\"warehouse.agency.name\")}\n                            placeholder={trans(\"warehouse.agency.name\")}\n                            autoComplete=\"off\"\n                        />\n                    </div>\n\n                    <div className={formItemClass}>\n                        <FastField\n                            name=\"address\"\n                            component={Input}\n                            label={trans(\"warehouse.agency.address\")}\n                            placeholder={trans(\"warehouse.agency.address\")}\n                            autoComplete=\"off\"\n                        />\n                    </div>\n\n                    <div className={formItemClass}>\n                        <FastField\n                            name=\"tel\"\n                            component={Input}\n                            label={trans(\"warehouse.agency.tel\")}\n                            placeholder={trans(\"warehouse.agency.tel\")}\n                            autoComplete=\"off\"\n                        />\n                    </div>\n                </div>\n                \n                <FormStatus />\n            </Form>\n        </Formik>\n    );\n}\n\nexport default React.forwardRef(FormAddAgency);\n","import React, { useState, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { toAbsoluteUrl } from '_metronic/_helpers';\nimport warehouseApi from 'apis/warehouse';\nimport { useFormikContext } from 'formik';\nimport useTrans from 'helper/useTrans';\nimport { fetchAgencies } from 'app/modules/Warehouse/warehouse-redux/agencySlice';\n\nimport SVG from 'react-inlinesvg';\nimport Button from 'app/components/Button';\nimport Popover from '@material-ui/core/Popover';\nimport { dialog } from 'app/components/DialogNotify';\nimport CustomModal from 'app/components/CustomModal';\nimport FormAddAgency from '../FormAddAgency';\nimport { Modal } from 'react-bootstrap';\nimport handleApiError from 'helper/handleApiError';\n\nconst AgencyLabel = props => {\n\n    const { setFieldValue } = useFormikContext();\n    /** Popover props */\n    const [anchorEl, setAnchorEl] = useState(null);\n    const open = Boolean(anchorEl);\n\n    /** Modal props */\n    const [showModal, setShowModal] = useState(false);\n    const [loadingModal, setLoadingModal] = useState(false);\n    const formRef = useRef();\n\n    const [trans] = useTrans();\n    const dispatch = useDispatch();\n\n    const toggleModal = () => {\n        setShowModal(!showModal);\n    }\n\n    const handleClick = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const triggerForm = () => {\n        formRef.current.submitForm();\n    }\n\n    const handleCreateAgency = (values, form) => {\n        setLoadingModal(true);\n        warehouseApi.agency.create(values)\n            .then((response) => {\n                dialog.success(trans(\"warehouse.agency.create.success\"));\n                setFieldValue('agency_id', response.id);\n                dispatch(fetchAgencies());\n                \n                setAnchorEl(null);\n                toggleModal();\n            })\n            .catch((err) => {\n                handleApiError(err, form)\n                dialog.error(trans(\"warehouse.agency.create.failure\"));\n            })\n            .finally(() => {\n                setLoadingModal(false);\n            })\n    }\n\n    const openModalCreate = () => {\n        toggleModal();\n        handleClose();\n    }\n\n    return (\n        <div className=\"agency-label\">\n            {trans(\"warehouse.agency.title\")}\n\n            <Button type=\"link\" onClick={handleClick} className=\"p-0\">\n                <SVG\n                    src={toAbsoluteUrl(\n                        '/media/svg/icons/Code/Info-circle.svg'\n                    )}\n                ></SVG>\n            </Button>\n\n            <Popover\n                open={open}\n                anchorEl={anchorEl}\n                onClose={handleClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n            >\n                <div className=\"p-3\">\n                    {trans(\"warehouse.agency.empty\")} <Button type=\"link\" onClick={openModalCreate}>{trans(\"warehouse.agency.create.title\")}</Button>\n                </div>\n            </Popover>\n\n            <CustomModal\n                show={showModal}\n                title={trans(\"warehouse.agency.create.title\")}\n                onHide={toggleModal}\n                actionsLoading={loadingModal}\n            >\n                <Modal.Body>\n                    <FormAddAgency\n                        ref={formRef}\n                        onSubmit={handleCreateAgency}\n                    />\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button type=\"secondary\" onClick={toggleModal}>{trans(\"common.cancel\")}</Button>\n                    <Button loading={loadingModal} type=\"primary\" onClick={triggerForm}>{trans(\"common.save\")}</Button>\n                </Modal.Footer>\n            </CustomModal>\n        </div>\n    );\n};\n\nAgencyLabel.propTypes = {\n\n};\n\nexport default AgencyLabel;","import React, { useState } from 'react';\n\nimport useTrans from 'helper/useTrans';\n\nimport { Input, BarcodeInput } from '_metronic/_partials/controls';\nimport Button from 'app/components/Button';\n\nconst TrackingInput = props => {\n\n    const { form, field, disabled } = props;\n    const [isScanTracking, setIsScanTracking] = useState(true);\n    const [trans] = useTrans();\n\n    const toggleIsScanTracking = () => setIsScanTracking(!isScanTracking);\n\n    const clickToggle = (e) => {\n        e.target.blur();\n        form.setFieldValue(field.name, '');\n\n        toggleIsScanTracking();\n    }\n\n    if (isScanTracking) {\n        return (\n            <div className=\"tracking-input barcode-input\">\n                <BarcodeInput {...props} canTypeOnInput={false} />\n\n                <Button type=\"primary\" onClick={clickToggle} disabled={disabled}>\n                    {trans(\"warehouse.tracking.type_tracking\")}\n                </Button>\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"tracking-input normal-input\">\n            <Input {...props} />\n\n            <Button type=\"primary\" onClick={clickToggle} disabled={disabled}>\n                {trans(\"warehouse.tracking.scan_tracking\")}\n            </Button>\n        </div>\n    );\n};\n\nTrackingInput.propTypes = {\n\n};\n\nexport default TrackingInput;","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport useTrans from 'helper/useTrans';\n\nimport { FastField, Formik } from 'formik';\nimport { Input, Select, DatePickerField } from '_metronic/_partials/controls';\nimport * as Yup from 'yup';\nimport FormStatus from '../FormStatus';\nimport TrackingLabel from './TrackingLabel';\nimport Form from '../FormEnterIndex';\nimport AgencyLabel from './AgencyLabel';\nimport TrackingInput from './TrackingInput';\n\nimport './index.scss';\n\nfunction FormCreateSFA({\n    editMode = false,\n    formItemClass = 'col-lg-6 col-md-12',\n    initialValues = {\n        tracking: '',\n        quantity: 0,\n        shipping_inside: 0,\n        arrival_date: new Date()\n    },\n    onSubmit,\n    autoFocus = true\n}, ref) {\n    const agencies = useSelector(state => state.warehouse.agency.list);\n    const [trans] = useTrans();\n\n    const validationSchema = Yup.object().shape({\n        tracking: Yup.string()\n            .required(trans(\"validation.message.required\")),\n        quantity: Yup.number()\n            .min(1, trans(\"validation.message.min\", { min: 1 }))\n            .required(trans(\"validation.message.required\")),\n        shipping_inside: Yup.number()\n            .min(0, trans(\"validation.message.min\", { min: 0 })),\n    });\n\n    return (\n        <Formik\n            enableReinitialize\n            initialValues={initialValues}\n            onSubmit={onSubmit}\n            innerRef={ref}\n            validationSchema={validationSchema}\n        >\n            <Form className=\"form form-label-right form-create-sfa\">\n                <div className=\"form-group row\">\n                    <div className={formItemClass}>\n                        <FastField\n                            name=\"quantity\"\n                            component={Input}\n                            label={trans(\"common.quantity\")}\n                            placeholder={trans(\"common.quantity\")}\n                            type=\"number\"\n                            shouldUpdate={(np, p) => true}\n                            autoComplete=\"off\"\n                            autoFocus={autoFocus}\n                            min={0}\n                        />\n                    </div>\n\n                    <div className={formItemClass}>\n                        <FastField\n                            name=\"tracking\"\n                            component={TrackingInput}\n                            label={!editMode ? (<TrackingLabel />) : trans(\"ORDER.CODE_TRACKING\")}\n                            placeholder={trans(\"ORDER.CODE_TRACKING\")}\n                            shouldUpdate={(np, p) => true}\n                            autoComplete=\"off\"\n                            disabled={editMode}\n                        />\n                    </div>\n\n                    <div className={formItemClass}>\n                        <FastField\n                            name=\"shipping_inside\"\n                            component={Input}\n                            label={trans(\"warehouse.cost.shipping_inside\")}\n                            placeholder={trans(\"warehouse.cost.shipping_inside\")}\n                            type=\"number\"\n                            shouldUpdate={(np, p) => true}\n                            autoComplete=\"off\"\n                            min={0}\n                        />\n                    </div>\n                    <div className={formItemClass}>\n                        <FastField\n                            name=\"coupon\"\n                            component={Input}\n                            label={trans(\"common.coupon_code\")}\n                            placeholder={trans(\"common.coupon_code\")}\n                            shouldUpdate={(np, p) => true}\n                            autoComplete=\"off\"\n                        />\n                    </div>\n                    <div className={formItemClass}>\n                        <Select\n                            name=\"agency_id\"\n                            label={<AgencyLabel />}\n                            placeholder={trans(\"common.agency\")}\n                        >\n                            {agencies.map((agency, idx) => (\n                                <option\n                                    value={agency.id}\n                                    key={`select-option-${idx}`}\n                                >\n                                    {agency.name}\n                                </option>\n                            ))}\n                        </Select>\n                    </div>\n                    <div className={formItemClass}>\n                        <DatePickerField\n                            label={trans(\"common.created_at\")}\n                            name='arrival_date'\n                        />\n                    </div>\n                </div>\n                <FormStatus />\n            </Form>\n        </Formik>\n    );\n}\n\nexport default React.forwardRef(FormCreateSFA);\n","import React, { useCallback, useRef, useState, useMemo } from 'react';\n\nimport warehouseApi from 'apis/warehouse';\nimport { useScanBarcode } from 'helper/useScanBarcode';\nimport { useSelector } from 'react-redux';\nimport useTrans from 'helper/useTrans';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport convertObjectDateToString from 'helper/convertObjectDateToString';\n\nimport { dialog } from 'app/components/DialogNotify';\nimport { Card, CardBody } from '_metronic/_partials/controls';\nimport FormCreateSFA from 'app/modules/Warehouse/components/Form/FormCreateSFA';\nimport Loading from 'app/components/Loading';\nimport handleApiError from 'helper/handleApiError';\nimport Button from 'app/components/Button';\n\nimport './index.scss';\nimport usePermission from 'app/components/NeedPermission/usePermission';\n\nconst TrackingPickedSection = props => {\n\n    const [loading, setLoading] = useState(false);\n    const trackingList = useSelector(state => state.purchase.tracking.trackingList); // eslint-disable-line\n    const [trackingPickedCount, setTrackingPickedCount] = useState(0);\n    const [trans] = useTrans();\n    const [sfa, setSfa] = useState();\n    const formRef = useRef();\n    const trackingCode = useRef('');\n    const canEditSFA = usePermission(['sfas.update']);\n    const canCreateSFA = usePermission(['sfas.create']);\n\n    useScanBarcode({\n        condition: () => trackingList.length,\n        onEnter: (barcode) => handleReceiveTracking(barcode)\n    });\n\n    const handleReceiveTracking = (barcode) => {\n        trackingCode.current = barcode;\n\n        if (sfa) {\n            if (sfa.tracking === barcode) {\n                setTrackingPickedCount(trackingPickedCount + 1);\n\n                debounceUpdateSFA(sfa, trackingPickedCount + 1);\n            } else {\n                updateSFA(sfa, trackingPickedCount);\n\n                setTrackingPickedCount(1);\n\n                getOrCreateSFA(barcode, 1);\n            }\n        } else {\n            getOrCreateSFA(barcode, trackingPickedCount + 1);\n\n            setTrackingPickedCount(trackingPickedCount + 1);\n        }\n    }\n\n    const getOrCreateSFA = (tracking, quantity) => {\n        setLoading(true);\n        warehouseApi.SFA.fetchSFAs({\n            search: `tracking:${tracking}`,\n            searchFields: `tracking:=`\n        }).then((res) => {\n            if (res.data.length) {\n                setSfa(res.data[0]);\n                setTrackingPickedCount(res.data[0].quantity + 1);\n\n                debounceUpdateSFA(res.data[0], res.data[0].quantity + 1);\n            } else {\n\n                if (!canCreateSFA) {\n                    dialog.error(trans(\"warehouse.sfa.create.need_permission\"));\n                    return;\n                }\n\n                return warehouseApi.SFA.create({\n                    quantity,\n                    tracking,\n                }).then((res) => {\n                    setSfa(res);\n\n                    dialog.success(trans(\"warehouse.sfa.create.success\"))\n                }).catch(() => {\n                    dialog.error(trans(\"warehouse.sfa.create.failure\"))\n                })\n            }\n        }).finally(() => {\n            setLoading(false);\n        });\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const debounceUpdateSFA = useCallback(_.debounce((currentSFA, quantity) => {\n        updateSFA(currentSFA, quantity);\n    }, 2000), []);\n\n    const updateSFA = (currentSFA, quantity) => {\n\n        if (!canEditSFA) {\n            dialog.error(trans(\"warehouse.sfa.update.need_permission\"));\n\n            return;\n        }\n\n        setLoading(true);\n        warehouseApi.SFA.update(currentSFA.id, {\n            quantity\n        }).then((res) => {\n            if (res.tracking === trackingCode.current) setSfa(res);\n\n            dialog.success(trans(\"warehouse.sfa.update.success\"))\n        }).catch(() => {\n            dialog.error(trans(\"warehouse.sfa.update.failure\"))\n        }).finally(() => {\n            setLoading(false);\n        })\n    }\n\n    const triggerFormSFA = () => {\n        formRef.submitForm();\n    }\n\n    const handleUpdateSFA = (values, form) => {\n        setLoading(true);\n\n        const body = convertObjectDateToString(values);\n\n        warehouseApi.SFA.update(values.id, body).then((res) => {\n            setSfa(res);\n            setTrackingPickedCount(res.quantity);\n\n            dialog.success(trans(\"warehouse.sfa.update.success\"))\n        }).catch((err) => {\n            dialog.error(trans(\"warehouse.sfa.update.failure\"))\n            handleApiError(err, form);\n        }).finally(() => {\n            setLoading(false);\n        })\n    }\n\n    const initialValues = useMemo(() => {\n        if (!sfa) return undefined;\n\n        return {\n            ...sfa,\n            arrival_date: moment(sfa.arrival_date, 'DD-MM-YYYY HH:mm').toDate()\n        }\n    }, [sfa]);\n\n    return (\n        <div className=\"tracking-picked-section\">\n            {!!trackingPickedCount && (\n                <Card>\n                    <CardBody>\n                        <div className=\"d-flex tracking-picked-section--content\">\n                            <div className=\"picked-count\">\n                                <div className=\"picked-count--title\">{trackingCode.current}</div>\n                                <div className=\"picked-count--value\">{trackingPickedCount}</div>\n                            </div>\n\n                            <div className=\"sfa-info position-relative\">\n                                <div className=\"sfa-info--title\">SFA: {sfa?.id}</div>\n                                {loading && <Loading local />}\n                                <FormCreateSFA\n                                    editMode\n                                    initialValues={initialValues}\n                                    autoFocus={false}\n                                    formItemClass=\"col-lg-4 col-sm-6\"\n                                    ref={formRef}\n                                    onSubmit={handleUpdateSFA}\n                                />\n                                <div className=\"actions text-right\">\n                                    <Button type=\"primary\" loading={loading} onClick={triggerFormSFA}>\n                                        {trans(\"common.edit\")}\n                                    </Button>\n                                </div>\n                            </div>\n                        </div>\n                    </CardBody>\n                </Card>\n            )}\n        </div>\n    );\n};\n\nTrackingPickedSection.propTypes = {\n\n};\n\nexport default TrackingPickedSection;","import NeedPermission from 'app/components/NeedPermission';\nimport useTrans from 'helper/useTrans';\nimport React from 'react';\nimport Layout from '../../components/Layout';\nimport ListTracking from './ListTracking';\nimport TrackingFilter from './TrackingFilter';\nimport TrackingPickedSection from './TrackingPickedSection';\n\nconst InboundPlanPage = props => {\n\n    const [trans] = useTrans();\n\n    return (\n        <Layout title={trans(\"MENU.WAREHOUSE.SCHEDULE\")}>\n            <TrackingFilter />\n            <NeedPermission need={['sfas.create', 'sfas.update']}>\n                <TrackingPickedSection />\n            </NeedPermission>\n            <ListTracking />\n        </Layout>\n    );\n};\n\nInboundPlanPage.propTypes = {\n\n};\n\nexport default InboundPlanPage;","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory, Route, useRouteMatch } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { invoiceAction } from 'app/modules/Warehouse/warehouse-redux/invoiceSlice';\nimport warehouseApi from 'apis/warehouse';\nimport useColumn from './useColumn';\n\nimport CustomTable from 'app/components/CustomTable';\nimport ModalConfirmDelete from '../../ModalConfirmDelete';\nimport { dialog } from 'app/components/DialogNotify';\nimport EmptyData from 'app/components/EmptyData';\nimport useTrans from 'helper/useTrans';\n\nimport './index.scss';\nimport NeedPermission from 'app/components/NeedPermission';\n\nconst TableInvoiceList = ({ onRefresh }) => {\n    const { data: dataTable, pagination } = useSelector(\n        state => state.warehouse.invoice.list\n    );\n\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const match = useRouteMatch();\n    const columns = useColumn();\n    const [trans] = useTrans();\n\n    const handleConfirmDelete = rowId => {\n        history.push(`${match.url}/delete-container/${rowId}`);\n    };\n\n    const handleViewEditRow = rowId => {\n        history.push(`/warehouse/container/detail/${rowId}`);\n    };\n\n    const handleDelete = rowId => {\n        warehouseApi.invoice\n            .delete(rowId)\n            .then(() => {\n                onRefresh && onRefresh();\n                dialog.success(trans(\"warehouse.invoice.delete.success\"));\n            })\n            .catch(() => {\n                dialog.error(trans(\"warehouse.invoice.delete.failure\"));\n            });\n    };\n\n    const handleChangePage = page => {\n        dispatch(invoiceAction.setPage(page));\n    };\n\n    if (!dataTable.length) return <EmptyData emptyText={trans(\"warehouse.invoice.empty\")} />;\n\n    return (\n        <>\n            <NeedPermission need=\"containers.delete\">\n                <Route path={`${match.path}/delete-container/:invoice_id`}>\n                    {({ history, match }) => (\n                        <ModalConfirmDelete\n                            id={match?.params?.invoice_id}\n                            show={match != null}\n                            onConfirmed={handleDelete}\n                            title={trans(\"warehouse.invoice.delete.title\")}\n                        />\n                    )}\n                </Route>\n            </NeedPermission>\n\n            <CustomTable\n                columns={columns}\n                rows={dataTable}\n                page={pagination.page}\n                lastpage={pagination.lastPage}\n                onDelete={handleConfirmDelete}\n                onViewEdit={handleViewEditRow}\n                onPageChange={handleChangePage}\n                rowKey=\"id\"\n                className=\"table-invoice-list\"\n                noSTT\n                permissions={{\n                    delete: 'containers.delete'\n                }}\n            />\n        </>\n    );\n};\n\nTableInvoiceList.propTypes = {\n    onRefresh: PropTypes.func\n};\n\nexport default TableInvoiceList;\n","import React from 'react';\n\nimport { currenyUnit } from 'config/currency';\nimport formatNumber from 'helper/formatNumber';\nimport useTrans from 'helper/useTrans';\n\nexport default function useColumn() {\n\n    const [trans] = useTrans();\n\n    return [\n        { id: 'id', title: trans(\"warehouse.container.id\") },\n        {\n            id: 'type',\n            title: trans(\"warehouse.container_type.title\"),\n            render: (type, { shipment_method }) => (\n                <div className=\"container-type sub-info\">\n                    <div className=\"sub-info__item\">\n                        <div className=\"sub-info__title\">{trans(\"common.code\")}</div>\n                        <div className=\"sub-info__value\">{type?.id || '---'}</div>\n                    </div>\n                    <div className=\"sub-info__item\">\n                        <div className=\"sub-info__title\">{trans(\"warehouse.shipment_method.title_shorthand\")}</div>\n                        <div className=\"sub-info__value\">{shipment_method?.name || '---'}</div>\n                    </div>\n                    <div className=\"sub-info__item\">\n                        <div className=\"sub-info__title\">{trans(\"common.volume\")}</div>\n                        <div className=\"sub-info__value\">{type?.volume || '---'}</div>\n                    </div>\n                    <div className=\"sub-info__item\">\n                        <div className=\"sub-info__title\">{trans(\"warehouse.invoice.shipping_date\")}</div>\n                        <div className=\"sub-info__value\">{type?.day_of_week === 1 ? 'Chủ nhật' : `Thứ ${type?.day_of_week}`}</div>\n                    </div>\n                </div>\n            )\n        },\n        { id: 'shipping_date', title: trans(\"warehouse.invoice.shipping_date\") },\n        {\n            id: 'vanning_date', title: trans(\"warehouse.invoice.sub_info\"), render: (id, { vanning_date, departure_date, cut_off_date, arrival_date }) => (\n                <div className=\"sub-info\">\n                    <div className=\"sub-info__item\">\n                        <div className=\"sub-info__title\">{trans(\"warehouse.invoice.vanning_date\")}</div>\n                        <div className=\"sub-info__value\">{vanning_date || '---'}</div>\n                    </div>\n\n                    <div className=\"sub-info__item\">\n                        <div className=\"sub-info__title\">{trans(\"warehouse.invoice.departure_date\")}</div>\n                        <div className=\"sub-info__value\">{departure_date || '---'}</div>\n                    </div>\n\n                    <div className=\"sub-info__item\">\n                        <div className=\"sub-info__title\">{trans(\"warehouse.invoice.cut_off_date\")}</div>\n                        <div className=\"sub-info__value\">{cut_off_date || '---'}</div>\n                    </div>\n\n                    <div className=\"sub-info__item\">\n                        <div className=\"sub-info__title\">{trans(\"warehouse.invoice.arrival_date\")}</div>\n                        <div className=\"sub-info__value\">{arrival_date || '---'}</div>\n                    </div>\n                </div>\n            )\n        },\n        {\n            id: 'shipping_cost', title: trans(\"warehouse.cost.shipping\"), render: (shipping_cost, { shipping_cost_per_unit }) => (\n                <div className=\"cost-section\">\n                    <div className=\"cost-item\">\n                        <div className=\"cost-item__title\">{trans(\"warehouse.invoice.shipping_cost.title_shorthand\")}</div>\n                        <div className=\"cost-item__value\">{formatNumber(shipping_cost)} {currenyUnit}</div>\n                    </div>\n                    <div className=\"cost-item\">\n                        <div className=\"cost-item__title\">{trans(\"warehouse.invoice.shipping_cost.per_unit\")}</div>\n                        <div className=\"cost-item__value\">{formatNumber(shipping_cost_per_unit)} {currenyUnit}</div>\n                    </div>\n                </div>\n            )\n        }\n    ]\n}","import React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { fetchContainerTypes } from 'app/modules/Warehouse/warehouse-redux/containerTypeSlice';\nimport useTrans from 'helper/useTrans';\n\nimport TMNBaseSelect from '../BaseSelect';\n\nimport './index.scss';\n\nconst SelectContainerType = ({ onChange, value, showLabel = true, ...props }) => {\n    const containerTypeList = useSelector(state => state.warehouse.containerType.list.data);\n    const loading = useSelector(state => state.warehouse.containerType.list.loading);\n    const dispatch = useDispatch();\n    const [trans] = useTrans();\n\n    const makeOption = useCallback((item) => ({\n        value: item.id,\n        label: trans(\"warehouse.container_type.option_label\", {\n            id: item.id,\n            shipment_method_name: item?.shipment_method?.name || '-',\n            volume: item.volume || 0,\n            day_of_week: item.day_of_week === 1 ? 'Chủ nhật' : `Thứ ${item.day_of_week}`\n        })\n    }), [trans]);\n\n    const containerTypeOptions = containerTypeList?.map(item => makeOption(item));\n\n    const fetchData = (params) => {\n        dispatch(fetchContainerTypes({ with: 'shipmentMethod', ...params }));\n    }\n\n    const handleSelectContainerType = option => {\n        onChange && onChange(option.value);\n    };\n\n    return (\n        <TMNBaseSelect\n            label={showLabel && trans(\"warehouse.container_type.title\")}\n            value={value}\n            placeholder={trans(\"common.select_here\")}\n            options={containerTypeOptions}\n            onChange={handleSelectContainerType}\n            loading={loading}\n            className=\"select-container-type\"\n            onFetchData={fetchData}\n            {...props}\n        />\n    );\n};\n\nSelectContainerType.propTypes = {\n    onChange: PropTypes.func,\n    value: PropTypes.any,\n    showLabel: PropTypes.bool\n};\n\nexport default SelectContainerType;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport clsx from 'clsx';\n\nimport SelectContainerType from './index';\nimport { useField, useFormikContext } from \"formik\";\n\nconst SelectContainerTypeForm = ({ name, ...props }) => {\n\n    const [field, meta] = useField(name);\n    const { setFieldTouched, setFieldValue } = useFormikContext();\n    const { error, touched } = meta;\n\n    const handleClick = () => {\n        setFieldTouched(field.name);\n    }\n\n    const handleChange = (v) => {\n        setFieldValue(name, v);\n    }\n\n    return (\n        <div className={clsx(touched && error && 'is-invalid')}>\n            <SelectContainerType\n                value={field.value}\n                onChange={handleChange}\n                onClick={handleClick}\n                {...props}\n            />\n\n            {touched && error && (\n                <div className=\"invalid-feedback d-block\">{error}</div>\n            )}\n        </div>\n    );\n};\n\nSelectContainerTypeForm.propTypes = {\n    value: PropTypes.any,\n    onChange: PropTypes.func,\n    withFeedbackLabel: PropTypes.bool\n};\n\nexport default SelectContainerTypeForm;","import React from 'react';\n\nimport { DatePickerField } from '_metronic/_partials/controls';\nimport { Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport FormStatus from '../FormStatus';\nimport SelectContainerTypeForm from 'app/components/Select/SelectContainerType/SelectContainerTypeForm';\n\nimport './index.scss';\nimport useTrans from 'helper/useTrans';\n\nconst FormAddInvoice = ({\n    isEdit = true,\n    isShowCutOff = false,\n    initialValues = {\n        shipping_date: new Date(),\n        type_id: \"\"\n    },\n    onSubmit\n}, ref) => {\n\n    const [trans] = useTrans();\n\n    const validationSchema = Yup.object().shape({\n        type_id: Yup.string().required(trans(\"validation.message.required\")),\n        shipping_date: Yup.date().required(trans(\"validation.message.required\"))\n    });\n\n    return (\n        <Formik\n            onSubmit={onSubmit}\n            initialValues={initialValues}\n            validationSchema={validationSchema}\n            enableReinitialize\n            innerRef={ref}\n        >\n            <Form className=\"form form-label-right form-add-invoce\">\n                <div className=\"row\">\n                    <div className=\"col-lg-6\">\n                        <SelectContainerTypeForm name=\"type_id\" isDisabled={!isEdit} />\n                    </div>\n                    <div className=\"col-lg-6\">\n                        <DatePickerField\n                            name=\"shipping_date\"\n                            label={trans(\"warehouse.invoice.shipping_date\")}\n                            placeholder={trans(\"warehouse.invoice.shipping_date\")}\n                            disabled={!isEdit}\n                        />\n                    </div>\n                    <div className=\"col-lg-6\">\n                        <DatePickerField\n                            name=\"vanning_date\"\n                            label={trans(\"warehouse.invoice.vanning_date\")}\n                            placeholder={trans(\"warehouse.invoice.vanning_date\")}\n                            disabled={!isEdit}\n                        />\n                    </div>\n                    <div className=\"col-lg-6\">\n                        <DatePickerField\n                            name=\"departure_date\"\n                            label={trans(\"warehouse.invoice.departure_date\")}\n                            placeholder={trans(\"warehouse.invoice.departure_date\")}\n                            disabled={!isEdit}\n                        />\n                    </div>\n                    <div className=\"col-lg-6\">\n                        <DatePickerField\n                            name=\"arrival_date\"\n                            label={trans(\"warehouse.invoice.arrival_date\")}\n                            placeholder={trans(\"warehouse.invoice.arrival_date\")}\n                            disabled={!isEdit}\n                        />\n                    </div>\n                    {isShowCutOff && (\n                        <div className=\"col-lg-6\">\n                            <DatePickerField\n                                name=\"cut_off_date\"\n                                label={trans(\"warehouse.invoice.cut_off_date\")}\n                                placeholder={trans(\"warehouse.invoice.cut_off_date\")}\n                                disabled={true}\n                            />\n                        </div>\n                    )}\n                </div>\n\n                <FormStatus />\n            </Form>\n        </Formik>\n    );\n};\n\nexport default React.forwardRef(FormAddInvoice);\n","import React, { useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\n\nimport warehouseApi from 'apis/warehouse';\nimport handleApiError from 'helper/handleApiError';\nimport convertObjectDateToString from 'helper/convertObjectDateToString';\n\nimport CustomModal from 'app/components/CustomModal';\nimport FormAddInvoice from '../../../components/Form/FormAddInvoice';\nimport { Modal } from 'react-bootstrap';\nimport useTrans from 'helper/useTrans';\nimport Button from 'app/components/Button';\n\nconst CreateInvoice = ({ show, onSuccess }) => {\n    const [loading, setLoading] = useState(false);\n    const history = useHistory();\n    const containerTypeList = useSelector(\n        state => state.warehouse.containerType.list.data\n    );\n    const formRef = useRef();\n    const [trans] = useTrans();\n\n    const closeModal = () => {\n        history.goBack();\n    };\n\n    const handleCreateInvoice = (values, form) => {\n        setLoading(true);\n        warehouseApi.invoice\n            .create(convertObjectDateToString(values))\n            .then((res) => {\n                onSuccess && onSuccess(res);\n            })\n            .catch(err => {\n                handleApiError(err, form);\n            })\n            .finally(() => {\n                setLoading(false);\n            });\n    };\n\n    const triggerSubmit = () => {\n        formRef.current.submitForm();\n    }\n\n    return (\n        <CustomModal\n            show={show}\n            onHide={closeModal}\n            actionsLoading={loading}\n            title={trans(\"warehouse.invoice.create.title\")}\n        >\n            <Modal.Body>\n                <FormAddInvoice\n                    onSubmit={handleCreateInvoice}\n                    initialValues={{\n                        shipping_date: new Date(),\n                        type_id: containerTypeList?.[0]?.id\n                    }}\n                    ref={formRef}\n                />\n            </Modal.Body>\n            <Modal.Footer>\n                <Button type=\"secondary\" loading={loading} onClick={closeModal}>\n                    {trans(\"common.cancel\")}\n                </Button>\n                <Button type=\"primary\" loading={loading} onClick={triggerSubmit}>\n                    {trans(\"common.save\")}\n                </Button>\n            </Modal.Footer>\n\n        </CustomModal>\n    );\n};\n\nCreateInvoice.propTypes = {\n    show: PropTypes.bool,\n    onSuccess: PropTypes.func\n};\n\nexport default CreateInvoice;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport moment from 'moment';\n\nimport RDatePicker from \"react-datepicker\";\n\nconst DatePicker = ({ value, onChange, formater, ...props }) => {\n\n    const handleChange = (date) => {\n        if (formater) onChange(moment(date).format(formater));\n        else onChange(date);\n    }\n\n    return (\n        <div>\n            <RDatePicker\n                style={{ width: \"100%\" }}\n                selected={value ? new Date(value) : null}\n                onChange={handleChange}\n                className=\"form-control w-100\"\n                {...props}\n            />\n        </div>\n    );\n};\n\nDatePicker.propTypes = {\n    value: PropTypes.any,\n    onChange: PropTypes.func,\n    formater: PropTypes.string,\n};\n\nexport default DatePicker;","import React, { useCallback, useState, forwardRef, useImperativeHandle, useMemo } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport _ from 'lodash';\nimport DatePicker from 'app/components/DatePicker';\nimport useTrans from 'helper/useTrans';\n\nconst InvoiceFilter = ({ onSearch, searchAll = true }, ref) => {\n\n    const [searchText, setSearchText] = useState('');\n    const [trans] = useTrans();\n\n    const fields = [\n        { id: 'shipment_method_id', title: trans(\"warehouse.shipment_method.title\") },\n        { id: 'shipping_date', title: trans(\"warehouse.invoice.shipping_date\") },\n    ]\n\n    const [searchField, setSearchField] = useState(searchAll ? '' : fields?.[0]?.id);\n    const shipmentMethods = useSelector(state => state.warehouse.shipmentMethod.list.data);\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const dispatchSearch = useCallback(_.debounce((_searchText, _searchField) => {\n        if (_searchField.length && _searchText.length) {\n            onSearch && onSearch({ search: `${_searchField}:${_searchText}`, searchFields: `${_searchField}:like` });\n        } else {\n            onSearch && onSearch({ search: _searchText });\n        }\n    }, 700), []);\n\n    useImperativeHandle(ref, () => ({\n        reset: () => {\n            setSearchText('');\n            setSearchField(searchAll ? '' : fields?.[0]?.id);\n        }\n    }))\n\n    const handleSearchTextChange = (e) => {\n        setSearchText(e.target.value);\n\n        dispatchSearch(e.target.value, searchField);\n    }\n\n    const handleSearchFieldChange = (e) => {\n        setSearchField(e.target.value);\n\n        if (searchText.length) {\n            setSearchText('');\n            dispatchSearch('', e.target.value);\n        }\n    }\n\n    const handleCustomerChange = (customer_id) => {\n        setSearchText(customer_id);\n\n        dispatchSearch(customer_id, searchField);\n    }\n\n    const getSearchFieldCpn = useMemo(() => {\n        if (searchField === 'shipment_method_id')\n            return (\n                <select onChange={handleSearchTextChange} className=\"form-control\">\n                    <option value=\"\">{trans(\"common.all\")}</option>\n                    {shipmentMethods.map((shipmentMethod, idx) => (\n                        <option value={shipmentMethod.id} key={`shipmentMethod-idx-${idx}`}>{shipmentMethod.name}</option>\n                    ))}\n                </select>\n            )\n\n        if (searchField === 'shipping_date')\n            return <DatePicker value={searchText} onChange={handleCustomerChange} formater=\"YYYY-MM-DD\" />\n\n        return (\n            <input\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"Search\"\n                onChange={handleSearchTextChange}\n                value={searchText}\n            />\n        )\n    }, [searchField, searchText, shipmentMethods]); // eslint-disable-line\n\n    return (\n        <div className=\"form-group row custom-filter-warehouse\">\n            <div className=\"col-lg-4 col-md-4 col-sm-4 p-3\">\n                <select name=\"searchField\" id=\"searchField\" className=\"form-control\" onChange={handleSearchFieldChange} value={searchField}>\n                    {searchAll ? (<option value=\"\">{trans(\"common.all\")}</option>) : ''}\n                    {(fields || []).map((f, idx) => (\n                        <option value={f.id} key={`search-field-${idx}`}>{f.title}</option>\n                    ))}\n                </select>\n            </div>\n            <div className=\"col-lg-4 col-md-6 col-sm-8 p-3\">\n                {getSearchFieldCpn}\n            </div>\n        </div>\n    );\n};\n\nexport default forwardRef(InvoiceFilter);","import React, { useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Route, useHistory, useRouteMatch } from 'react-router-dom';\n\nimport { fetchInvoices } from 'app/modules/Warehouse/warehouse-redux/invoiceSlice';\n\nimport Layout from 'app/modules/Warehouse/components/Layout';\nimport { Card, CardBody, CardHeader, CardHeaderToolbar } from '_metronic/_partials/controls';\nimport TableInvoiceList from 'app/modules/Warehouse/components/Table/TableInvoiceList';\nimport CreateInvoice from './CreateInvoice';\nimport Loading from 'app/components/Loading';\nimport InvoiceFilter from 'app/modules/Warehouse/components/Filter/InvoiceFilter';\nimport useTrans from 'helper/useTrans';\n\nimport './index.scss';\nimport NeedPermission from 'app/components/NeedPermission';\n\nconst InvoiceList = props => {\n\n    const { pagination, loading } = useSelector(state => state.warehouse.invoice.list);\n    const dispatch = useDispatch();\n    const match = useRouteMatch();\n    const history = useHistory();\n    const filterRef = useRef();\n    const [trans] = useTrans();\n\n    useEffect(() => {\n        f5Data();\n    }, [pagination.page]); // eslint-disable-line\n\n    const f5Data = (params) => {\n        dispatch(fetchInvoices({ page: pagination.page, with: 'shipmentMethod;type', ...params }));\n    }\n\n    const handleCreateInvoiceSuccess = (res) => {\n        f5Data();\n        filterRef.current && filterRef.current.reset();\n        history.push(`/warehouse/container/detail/${res.id}`);\n    }\n\n    const handleSearchSubmit = search => {\n        f5Data(search);\n    };\n\n    return (\n        <>\n            <NeedPermission need=\"containers.create\">\n                <Route path={`${match.path}/create-invoice`}>\n                    {({ match }) => (\n                        <CreateInvoice\n                            show={match !== null}\n                            onSuccess={handleCreateInvoiceSuccess}\n                        />\n                    )}\n                </Route>\n            </NeedPermission>\n\n            <Layout title={trans(\"warehouse.invoice.title\")}>\n                <Card className=\"position-relative invoice-list-card\">\n                    <CardHeader title={trans(\"warehouse.invoice.list.title\")}>\n                        <NeedPermission need=\"containers.create\">\n                            <CardHeaderToolbar>\n                                <button\n                                    className=\"btn btn-primary\"\n                                    onClick={() =>\n                                        history.push(`${match.url}/create-invoice`)\n                                    }\n                                >\n                                    {trans(\"warehouse.invoice.create.title\")}\n                                </button>\n                            </CardHeaderToolbar>\n                        </NeedPermission>\n                    </CardHeader>\n                    <CardBody>\n                        {loading && <Loading local />}\n                        <NeedPermission need=\"containers.index\">\n                            <InvoiceFilter ref={filterRef} onSearch={handleSearchSubmit} />\n                            <TableInvoiceList onRefresh={f5Data} />\n                        </NeedPermission>\n                    </CardBody>\n                </Card>\n            </Layout>\n        </>\n    );\n};\n\nInvoiceList.propTypes = {\n\n};\n\nexport default InvoiceList;","import React, { useMemo, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport warehouseApi from 'apis/warehouse';\nimport handleApiError from 'helper/handleApiError';\nimport moment from 'moment';\nimport convertObjectDateToString from 'helper/convertObjectDateToString';\nimport _ from 'lodash';\n\nimport { Card, CardBody, CardHeader, CardHeaderToolbar } from '_metronic/_partials/controls';\nimport Loading from 'app/components/Loading';\nimport GrBtnEdit from 'app/modules/Warehouse/components/GrBtnEdit';\nimport { fetchInvoice } from 'app/modules/Warehouse/warehouse-redux/invoiceSlice';\nimport FormAddInvoice from 'app/modules/Warehouse/components/Form/FormAddInvoice';\nimport useTrans from 'helper/useTrans';\nimport NeedPermission from 'app/components/NeedPermission';\n\nconst InvoiceInfo = props => {\n    const [isEdit, setIsEdit] = useState(false);\n    const invoiceDetail = useSelector(\n        state => state.warehouse.invoice.detail.data\n    );\n    const loading = useSelector(\n        state => state.warehouse.invoice.detail.loading\n    );\n    const formRef = useRef();\n    const dispatch = useDispatch();\n    const [trans] = useTrans();\n\n    const handleSaveUpdate = (values, form) => {\n        warehouseApi.invoice\n            .update(invoiceDetail.id, convertObjectDateToString(values))\n            .then(response => {\n                setIsEdit(false);\n\n                dispatch(fetchInvoice({ id: response.id }));\n            })\n            .catch(err => {\n                handleApiError(err, form);\n            });\n    };\n\n    const getInitialValue = useMemo(() => {\n\n        if (!invoiceDetail) return {};\n\n        const result = {};\n        Object.entries(_.omit(invoiceDetail, ['created_at', 'updated_at'])).forEach(([key, value]) => {\n            let tempV = value;\n            if (typeof value === 'string' && moment(value, 'DD-MM-YYYY').isValid()) tempV = moment(value, 'DD-MM-YYYY');\n\n            result[key] = tempV;\n        });\n\n        return result;\n    }, [invoiceDetail]);\n\n    return (\n        <Card className=\"invoice-info\">\n            <CardHeader title={trans(\"warehouse.invoice.info\")}>\n                <NeedPermission need=\"containers.update\">\n                    <CardHeaderToolbar>\n                        <GrBtnEdit\n                            isEdit={isEdit}\n                            onEdit={() => setIsEdit(true)}\n                            onSubmit={() => formRef.current.handleSubmit()}\n                            onCancel={() => {\n                                formRef.current.resetForm();\n                                setIsEdit(false);\n                            }}\n                        />\n                    </CardHeaderToolbar>\n                </NeedPermission>\n            </CardHeader>\n            <CardBody>\n                {loading && <Loading local />}\n                <FormAddInvoice\n                    isEdit={isEdit}\n                    isShowCutOff\n                    ref={formRef}\n                    initialValues={getInitialValue}\n                    onSubmit={handleSaveUpdate}\n                />\n            </CardBody>\n        </Card>\n    );\n};\n\nInvoiceInfo.propTypes = {\n\n};\n\nexport default InvoiceInfo;","import React from 'react';\n\nimport { Input } from '_metronic/_partials/controls';\nimport { FastField, Form, Formik } from 'formik';\nimport FormStatus from '../FormStatus';\n\nimport './index.scss';\nimport useTrans from 'helper/useTrans';\n\nconst FormEditInvoiceCost = ({\n    isEdit = true,\n    initialValues,\n    onSubmit\n}, ref) => {\n\n    const [trans] = useTrans();\n\n    return (\n        <Formik\n            innerRef={ref}\n            enableReinitialize\n            initialValues={initialValues}\n            onSubmit={onSubmit}\n        >\n            <Form className=\"form form-label-right form-edit-invoice-cost\">\n                <div className=\"row\">\n                    <div className=\"col-lg-6\">\n                        <FastField\n                            name=\"shipping_cost\"\n                            label={trans(\"warehouse.cost.shipping\")}\n                            placeholder={trans(\"warehouse.cost.shipping\")}\n                            component={Input}\n                            disabled={!isEdit}\n                            shouldUpdate={() => true}\n                            type=\"number\"\n                        />\n                    </div>\n                    <div className=\"col-lg-6\">\n                        <FastField\n                            name=\"shipping_cost_per_unit\"\n                            label={trans(\"warehouse.cost.shipping_per_unit\")}\n                            placeholder={trans(\"warehouse.cost.shipping_per_unit\")}\n                            component={Input}\n                            disabled={true}\n                            shouldUpdate={() => true}\n                            type=\"number\"\n                        />\n                    </div>\n                </div>\n\n                <FormStatus />\n            </Form>\n        </Formik>\n    );\n};\n\nexport default React.forwardRef(FormEditInvoiceCost);\n","import React, { useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport warehouseApi from 'apis/warehouse';\nimport handleApiError from 'helper/handleApiError';\nimport _ from 'lodash';\nimport { fetchInvoice } from 'app/modules/Warehouse/warehouse-redux/invoiceSlice';\n\nimport { Card, CardBody, CardHeader, CardHeaderToolbar } from '_metronic/_partials/controls';\nimport Loading from 'app/components/Loading';\nimport GrBtnEdit from 'app/modules/Warehouse/components/GrBtnEdit';\nimport FormEditInvoiceCost from 'app/modules/Warehouse/components/Form/FormEditInvoiceCost';\nimport useTrans from 'helper/useTrans';\nimport NeedPermission from 'app/components/NeedPermission';\n\nconst InvoiceCostInfo = props => {\n    const [isEdit, setIsEdit] = useState(false);\n    const invoiceDetail = useSelector(\n        state => state.warehouse.invoice.detail.data\n    );\n    const loading = useSelector(\n        state => state.warehouse.invoice.detail.loading\n    );\n    const formRef = useRef();\n    const dispatch = useDispatch();\n    const [trans] = useTrans();\n\n    const handleSaveUpdate = (values, form) => {\n        warehouseApi.invoice\n            .update(invoiceDetail.id, _.pick(values, ['shipping_cost', 'shipping_cost_per_unit']))\n            .then(response => {\n                setIsEdit(false);\n\n                dispatch(fetchInvoice({ id: response.id }));\n            })\n            .catch(err => {\n                handleApiError(err, form);\n            });\n    };\n\n    return (\n        <Card className=\"invoice-info\">\n            <CardHeader title={trans(\"common.cost\")}>\n                <NeedPermission need=\"containers.update\">\n                    <CardHeaderToolbar>\n                        <GrBtnEdit\n                            isEdit={isEdit}\n                            onEdit={() => setIsEdit(true)}\n                            onSubmit={() => formRef.current.handleSubmit()}\n                            onCancel={() => {\n                                formRef.current.resetForm();\n                                setIsEdit(false);\n                            }}\n                        />\n                    </CardHeaderToolbar>\n                </NeedPermission>\n            </CardHeader>\n            <CardBody>\n                {loading && <Loading local />}\n                <FormEditInvoiceCost\n                    isEdit={isEdit}\n                    initialValues={invoiceDetail}\n                    onSubmit={handleSaveUpdate}\n                    ref={formRef}\n                />\n            </CardBody>\n        </Card>\n    );\n};\n\nInvoiceCostInfo.propTypes = {\n\n};\n\nexport default InvoiceCostInfo;","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useHistory, Route, useRouteMatch } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport warehouseApi from 'apis/warehouse';\nimport useColumns from './useColumns';\nimport useTrans from 'helper/useTrans';\n\nimport CustomTable from 'app/components/CustomTable';\nimport ModalConfirmDelete from 'app/modules/Warehouse/components/ModalConfirmDelete';\nimport { dialog } from 'app/components/DialogNotify';\nimport EmptyData from 'app/components/EmptyData';\n\nimport './TableLadingBill.scss';\nimport NeedPermission from 'app/components/NeedPermission';\n\nconst TableLadingBill = ({ onRefresh }) => {\n    const { data } = useSelector(\n        state => state.warehouse.invoice.detail\n    );\n\n    const history = useHistory();\n    const match = useRouteMatch();\n    const columns = useColumns();\n    const [trans] = useTrans();\n\n    const handleConfirmDelete = rowId => {\n        history.push(`${match.url}/delete-lading-bill/${rowId}`);\n    };\n\n    const handleViewEditRow = rowId => {\n        history.push(`/warehouse/lading-bills/${rowId}`);\n    };\n\n    const handleDelete = rowId => {\n        warehouseApi.invoice.update(match?.params?.id, {\n            action: 'detach',\n            params: JSON.stringify(['ladingBills', rowId])\n        })\n            .then(() => {\n                onRefresh && onRefresh();\n                dialog.success(trans(\"warehouse.invoice.pivot.lading_bill.delete.success\"));\n            })\n            .catch(() => {\n                dialog.error(trans(\"warehouse.invoice.pivot.lading_bill.delete.failure\"));\n            })\n    };\n\n    if (!data?.lading_bills?.length) return <EmptyData emptyText={trans(\"warehouse.invoice.pivot.lading_bill.empty\")} />\n\n    return (\n        <div className=\"table-lading-bill\">\n            <NeedPermission need={['containers.update', 'lading-bills.update']} permissionJoin=\"and\">\n                <Route path={`${match.path}/delete-lading-bill/:lb_id`}>\n                    {({ match }) => (\n                        <ModalConfirmDelete\n                            id={match?.params?.lb_id}\n                            show={match != null}\n                            onConfirmed={handleDelete}\n                            title={trans(\"warehouse.invoice.pivot.lading_bill.delete.title\")}\n                        />\n                    )}\n                </Route>\n            </NeedPermission>\n            <CustomTable\n                columns={columns}\n                rows={data?.lading_bills}\n                onDelete={handleConfirmDelete}\n                onViewEdit={handleViewEditRow}\n                rowKey=\"id\"\n                permissions={{\n                    delete: ['containers.update', 'lading-bills.update']\n                }}\n            />\n        </div>\n    );\n};\n\nTableLadingBill.propTypes = {\n    onRefresh: PropTypes.func\n};\n\nexport default TableLadingBill;\n","import React from 'react';\nimport useTrans from \"helper/useTrans\";\nimport formatNumber from 'helper/formatNumber';\nimport { currenyUnit } from 'config/currency';\n\nexport default function useColumns() {\n\n    const [trans] = useTrans();\n\n    return [\n        { id: 'customer_id', title: trans(\"common.customer\") },\n        {\n            id: 'balance', title: trans(\"warehouse.cost.shipping\"), render: (balance, { shipping_inside_cost, additional_cost }) => (\n                <div>\n                    {formatNumber(balance, { round: 2 })} {currenyUnit}\n                    <div><small className=\"text-primary\">{trans(\"warehouse.cost.shipping_inside\")}: {formatNumber(shipping_inside_cost, { round: 2 })} {currenyUnit}</small></div>\n                    <div><small className=\"text-primary\">{trans(\"warehouse.cost.additional\")}: {formatNumber(additional_cost, { round: 2 })} {currenyUnit}</small></div>\n                </div>\n            )\n        },\n        {\n            id: 'storage_cost', title: trans(\"warehouse.cost.storage\"), render: (storage_cost, { quantity_boxes }) => (\n                <div>\n                    {formatNumber(storage_cost, { round: 2 })} {currenyUnit}\n                    <div><small className=\"text-primary\">{trans(\"warehouse.sku.quantity\")}: {quantity_boxes}</small></div>\n                </div>\n            )\n        }\n    ]\n}","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory, useParams } from 'react-router-dom';\n\nimport warehouseApi from 'apis/warehouse';\nimport handleApiError from 'helper/handleApiError';\n\nimport CustomModal from 'app/components/CustomModal';\nimport { Form, Formik } from 'formik';\nimport { Modal } from 'react-bootstrap';\nimport * as Yup from 'yup';\nimport { dialog } from 'app/components/DialogNotify';\nimport SelectLadingBillForm from 'app/components/Select/SelectLadingBill/SelectLadingBillForm';\nimport FormStatus from 'app/modules/Warehouse/components/Form/FormStatus';\nimport useTrans from 'helper/useTrans';\nimport Button from 'app/components/Button';\n\nconst AddLadingBill = ({ show, onSuccess }) => {\n\n    const [loading, setLoading] = useState(false);\n    const history = useHistory();\n    const params = useParams();\n    const [trans] = useTrans();\n\n    const addLadingBillSchema = Yup.object().shape({\n        lading_bill_id: Yup.string().required(trans(\"validation.message.required\")),\n    });\n\n    const closeModal = () => {\n        history.goBack();\n    }\n\n    const handleAddLadingBill = (values, form) => {\n        setLoading(true);\n        warehouseApi.invoice.update(params?.id, {\n            action: 'attach',\n            params: JSON.stringify(['ladingBills', { lading_bill_id: values.lading_bill_id }])\n        })\n            .then(() => {\n                closeModal();\n                onSuccess && onSuccess();\n                dialog.success(trans(\"warehouse.invoice.pivot.lading_bill.create.success\"));\n            })\n            .catch(err => {\n                handleApiError(err, form)\n                dialog.success(trans(\"warehouse.invoice.pivot.lading_bill.create.failure\"));\n            })\n            .finally(() => {\n                setLoading(false);\n            })\n    }\n\n    return (\n        <CustomModal\n            title={trans(\"warehouse.invoice.pivot.lading_bill.title\")}\n            show={show}\n            onHide={closeModal}\n            actionsLoading={loading}\n        >\n            <Formik\n                initialValues={{ lading_bill_id: '' }}\n                validationSchema={addLadingBillSchema}\n                onSubmit={handleAddLadingBill}\n            >\n                {({ handleSubmit }) => (\n                    <>\n                        <Modal.Body>\n                            <Form>\n                                <SelectLadingBillForm\n                                    name=\"lading_bill_id\"\n                                />\n                            </Form>\n                            <FormStatus />\n                        </Modal.Body>\n                        <Modal.Footer>\n                            <Button type=\"secondary\" loading={loading} onClick={closeModal}>{trans(\"common.cancel\")}</Button>\n                            <Button type=\"primary\" loading={loading} onClick={handleSubmit} htmlType=\"submit\">{trans(\"common.save\")}</Button>\n                        </Modal.Footer>\n                    </>\n                )}\n            </Formik>\n        </CustomModal>\n    );\n};\n\nAddLadingBill.propTypes = {\n    show: PropTypes.bool,\n    onSuccess: PropTypes.func\n};\n\nexport default AddLadingBill;","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Route, useHistory, useParams, useRouteMatch } from 'react-router-dom';\n\nimport { fetchInvoice } from 'app/modules/Warehouse/warehouse-redux/invoiceSlice';\nimport useTrans from 'helper/useTrans';\n\nimport { Card, CardHeader, CardBody, CardHeaderToolbar } from '_metronic/_partials/controls';\nimport Loading from 'app/components/Loading';\nimport TableLadingBill from './TableLadingBill';\nimport AddLadingBill from './AddLadingBill';\nimport NeedPermission from 'app/components/NeedPermission';\n\nconst LadingBillList = props => {\n\n    const { loading } = useSelector(state => state.warehouse.invoice.detail);\n    const dispatch = useDispatch();\n    const params = useParams();\n    const match = useRouteMatch();\n    const history = useHistory();\n    const [trans] = useTrans();\n\n    const f5Data = () => {\n        if (params?.id) dispatch(fetchInvoice({ id: params?.id }));\n    }\n\n    const openModalAddLadingBill = () => {\n        history.push(`${match.url}/add-lading-bill`)\n    }\n\n    return (\n        <>\n            <NeedPermission need={['containers.update', 'lading-bills.update']} permissionJoin=\"and\">\n                <Route path={`${match.path}/add-lading-bill`}>\n                    {({ match }) => (\n                        <AddLadingBill\n                            show={match !== null}\n                            onSuccess={f5Data}\n                        />\n                    )}\n                </Route>\n            </NeedPermission>\n\n            <Card className=\"lading-bill-list\">\n                <CardHeader title={trans(\"warehouse.lading_bill.title\")}>\n                    <NeedPermission need={['containers.update', 'lading-bills.update']} permissionJoin=\"and\">\n                        <CardHeaderToolbar>\n                            <button className=\"btn btn-primary\" onClick={openModalAddLadingBill}>\n                                {trans(\"warehouse.lading_bill.create.title\")}\n                            </button>\n                        </CardHeaderToolbar>\n                    </NeedPermission>\n                </CardHeader>\n                <CardBody>\n                    {loading && <Loading local />}\n                    <TableLadingBill onRefresh={f5Data} />\n                </CardBody>\n            </Card>\n        </>\n    );\n};\n\nLadingBillList.propTypes = {\n\n};\n\nexport default LadingBillList;","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\n\nimport { fetchInvoice } from 'app/modules/Warehouse/warehouse-redux/invoiceSlice';\n\nimport Layout from 'app/modules/Warehouse/components/Layout';\nimport NotFound from 'app/components/NotFound';\nimport InvoiceInfo from './InvoiceInfo';\nimport InvoiceCostInfo from './InvoiceCostInfo';\nimport LadingBillList from './LadingBillList';\nimport useTrans from 'helper/useTrans';\n\nconst InvoiceDetailPage = props => {\n\n    const { data, loading } = useSelector(state => state.warehouse.invoice.detail);\n    const dispatch = useDispatch();\n    const params = useParams();\n    const [trans] = useTrans();\n\n    useEffect(() => {\n        if (params?.id) dispatch(fetchInvoice({ id: params?.id }))\n    }, [params?.id]); // eslint-disable-line\n\n    if (!data && !loading) return <NotFound />\n\n    return (\n        <Layout title={`${trans(\"warehouse.invoice.title\")} ${params?.id}`}>\n            <div className=\"row\">\n                <div className=\"col-lg-6 col-md-12\"><InvoiceInfo /></div>\n                <div className=\"col-lg-6 col-md-12\"><InvoiceCostInfo /></div>\n            </div>\n            <LadingBillList />\n        </Layout>\n    );\n};\n\nInvoiceDetailPage.propTypes = {\n\n};\n\nexport default InvoiceDetailPage;","import React from 'react';\nimport { Redirect, Route, useRouteMatch, Switch } from 'react-router-dom';\n\nimport InvoiceList from './InvoiceList';\nimport InvoiceDetailPage from './InvoiceDetail';\n\nconst OutOfStockPage = props => {\n\n    const match = useRouteMatch();\n\n    return (\n        <Switch>\n            {<Redirect exact={true} from={match.url} to={`${match.url}/list`} />}\n            <Route path={`${match.url}/list`} component={InvoiceList} />\n            <Route path={`${match.url}/detail/:id`} component={InvoiceDetailPage} />\n        </Switch>\n    );\n};\n\nOutOfStockPage.propTypes = {\n\n};\n\nexport default OutOfStockPage;","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory, Route, useRouteMatch } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { ladingBillAction } from 'app/modules/Warehouse/warehouse-redux/ladingBillSlice';\nimport warehouseApi from 'apis/warehouse';\nimport useColumns from './useColumns';\nimport useTrans from 'helper/useTrans';\n\nimport CustomTable from 'app/components/CustomTable';\nimport ModalConfirmDelete from '../../ModalConfirmDelete';\nimport { dialog } from 'app/components/DialogNotify';\nimport EmptyData from 'app/components/EmptyData';\n\nimport './index.scss';\n\nconst TableLadingBillList = ({ onRefresh }) => {\n    const { data: dataTable, pagination } = useSelector(\n        state => state.warehouse.ladingBill.list\n    );\n\n    const history = useHistory();\n    const match = useRouteMatch();\n    const dispatch = useDispatch();\n    const columns = useColumns();\n    const [trans] = useTrans();\n\n    const handleConfirmDelete = rowId => {\n        history.push(`${match.url}/delete-lading-bill/${rowId}`);\n    };\n\n    const handleViewEditRow = rowId => {\n        history.push(`/warehouse/lading-bills/${rowId}`);\n    };\n\n    const handleDelete = rowId => {\n        warehouseApi.ladingBill\n            .delete(rowId)\n            .then(() => {\n                onRefresh && onRefresh();\n                dialog.success('Delete lading bill success!');\n            })\n            .catch(() => {\n                dialog.error('Delete lading bill failure!');\n            });\n    };\n\n    const handlePageChange = page => {\n        dispatch(ladingBillAction.setPage(page));\n    };\n\n    if (!dataTable.length) return <EmptyData emptyText={trans(\"warehouse.lading_bill.empty\")} />\n\n    return (\n        <div className=\"table-lading-bill\">\n            <Route path={`${match.path}/delete-lading-bill/:lb_id`}>\n                {({ history, match }) => (\n                    <ModalConfirmDelete\n                        id={match?.params?.lb_id}\n                        show={match != null}\n                        onConfirmed={handleDelete}\n                        title={trans(\"warehouse.lading_bill.delete.title\")}\n                    />\n                )}\n            </Route>\n            <CustomTable\n                columns={columns}\n                rows={dataTable}\n                onDelete={handleConfirmDelete}\n                onViewEdit={handleViewEditRow}\n                page={pagination.page}\n                lastpage={pagination.lastPage}\n                onPageChange={handlePageChange}\n                rowKey=\"id\"\n                noSTT\n                permissions={{\n                    update: 'lading-bills.update',\n                    delete: 'lading-bills.delete'\n                }}\n            />\n        </div>\n    );\n};\n\nTableLadingBillList.propTypes = {\n    onRefresh: PropTypes.func\n};\n\nexport default TableLadingBillList;\n","import React from 'react';\n\nimport { currenyUnit } from 'config/currency';\nimport formatNumber from 'helper/formatNumber';\nimport useTrans from 'helper/useTrans';\nimport clsx from 'clsx';\n\nexport default function useColumns() {\n\n    const [trans] = useTrans();\n\n    return [\n        { id: 'id', title: trans(\"warehouse.lading_bill.id\") },\n        { id: 'customer_id', title: trans(\"common.customer\") },\n        {\n            id: 'containers', title: trans(\"warehouse.lading_bill.pivot.container.title\"), render: (containers) => (\n                <div className=\"text-center\">\n                    {containers?.length ? containers.map(i => (\n                        <div className=\"container-info\">\n                            <div className=\"d-flex align-items-center justify-content-between\" key={i.id}>\n                                <div>{trans(\"warehouse.container.id\")} - <span className=\"text-primary font-weight-bold\">{i.id}</span> -</div>\n                                <div>{i.shipping_date || '---'}</div>\n                            </div>\n                            <div className={clsx(\"container-type text-left font-weight-bold\", i.type.shipment_method_id === 'sea' ? 'text-primary' : 'text-success')}>{i.type.shipment_method.name}</div>\n                        </div>\n                    )) : '---'}\n                </div>\n            )\n        },\n        {\n            id: 'balance', title: trans(\"warehouse.lading_bill.cost\"), render: (balance, { shipping_inside_cost, additional_cost }) => (\n                <div>\n                    {formatNumber(balance, { round: 2 })} {currenyUnit}\n                    <div className=\"text-nowrap d-flex align-items-center justify-content-between\"><small className=\"text-primary\">{trans(\"warehouse.cost.shipping_inside\")}: </small><small className=\"text-primary\">{formatNumber(shipping_inside_cost, { round: 2 })} {currenyUnit}</small></div>\n                    <div className=\"text-nowrap d-flex align-items-center justify-content-between\"><small className=\"text-primary\">{trans(\"warehouse.cost.additional\")}: </small><small className=\"text-primary\">{formatNumber(additional_cost, { round: 2 })} {currenyUnit}</small></div>\n                </div>\n            )\n        },\n        {\n            id: 'storage_cost', title: trans(\"warehouse.cost.storage\"), render: (storage_cost, { quantity_boxes }) => (\n                <div>\n                    {formatNumber(storage_cost, { round: 2 })} {currenyUnit}\n                    <div><small className=\"text-primary text-nowrap\">{trans(\"warehouse.sku.quantity\")}: {formatNumber(quantity_boxes)}</small></div>\n                </div>\n            )\n        }\n    ];\n}","import React, { useCallback, useEffect, useState, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { toAbsoluteUrl } from '_metronic/_helpers';\nimport _ from 'lodash';\nimport { fetchBoxOwners } from 'app/modules/Warehouse/warehouse-redux/boxOwnerSlice';\nimport { fetchOrder } from 'app/modules/Order/order-redux/orderSlice';\nimport clsx from 'clsx';\nimport useTrans from 'helper/useTrans';\n\nimport SVG from 'react-inlinesvg';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { Pagination } from '@material-ui/lab';\nimport Select from 'react-select';\nimport { useFormikContext } from 'formik';\nimport Loading from 'app/components/Loading';\n\nimport './ListBox.scss';\n\nconst ListBox = ({ boxes = [], onChange, pagination, onChangePage, loading, customer_id }) => {\n\n    const { values } = useFormikContext();\n    const orderList = useSelector(state => state.order.list.orderList)\n    const isLoading = useSelector(state => state.order.list.isLoading)\n    const [checked, setChecked] = useState([]);\n    const [orderSelected, setOrderSelected] = useState('');\n    const dispatch = useDispatch();\n    const [trans] = useTrans();\n\n    // Clear giá trị của cái select order khi close form\n    useEffect(() => {\n        return () => {\n            setOrderSelected('');\n        }\n    }, []);\n\n    // Call api lấy danh sách order khi customer_id thay đổi\n    // Nếu lấy được giá trị thì dùng luôn giá trị đầu tiên làm value\n    useEffect(() => {\n        if (!customer_id) return;\n        searchOrder({ search: `customer_id:${customer_id}` });\n        setOrderSelected('user');\n\n    }, [customer_id]); // eslint-disable-line\n\n    const searchOrder = useCallback((params) => {\n        dispatch(fetchOrder(params));\n    }, [dispatch]);\n\n    // Khi orderSelected thay đổi thì lấy danh sách box\n    useEffect(() => {\n        if (orderSelected && orderSelected === 'user') {\n            dispatch(fetchBoxOwners({ search: `objectable_id:${customer_id};objectable_type:user`, searchJoin: 'and', page: pagination.page }))\n        } else if (orderSelected && orderSelected !== 'user') {\n            dispatch(fetchBoxOwners({ search: `objectable_id:${orderSelected};objectable_type:order`, searchJoin: 'and', page: pagination.page }))\n        }\n    }, [orderSelected, pagination.page, customer_id]); // eslint-disable-line\n\n    useEffect(() => {\n        onChange && onChange(checked);\n    }, [checked]); // eslint-disable-line\n\n    const personalOption = { value: 'user', label: trans(\"warehouse.sku.of_customer\") };\n\n    const makeOption = (i) => ({\n        value: i.id,\n        label: trans(\"warehouse.order.option_title\", { id: i.id, type_name: i.type.name, status_name: i.status.name })\n    })\n\n    const handleToggle = (value) => () => {\n        const currentIndex = boxIdxInListChecked(value);\n        const newChecked = [...checked];\n\n        if (currentIndex === -1) {\n            newChecked.push({ ...value, quantity: value?.quantity || 1 });\n        } else {\n            newChecked.splice(currentIndex, 1);\n        }\n\n        setChecked(newChecked);\n    };\n\n    const boxIdxInListChecked = useCallback((v) => {\n        return _.findIndex(checked, ({ id }) => id == v.id); // eslint-disable-line\n    }, [checked]); // eslint-disable-line\n\n    const handlePageChange = (e, page) => {\n        onChangePage && onChangePage(page);\n    }\n\n    const handleSelectOrder = (option) => {\n        setOrderSelected(option.value);\n    }\n\n    const getOptions = useMemo(() => {\n        const orderOptions = orderList.map(order => makeOption(order));\n\n        return [personalOption, ...orderOptions];\n    }, [orderList]); // eslint-disable-line\n\n    const getValue = useMemo(() => {\n        if (!orderSelected) return '';\n\n        if (orderSelected === 'user') return personalOption;\n\n        let matchedOrder = _.find(orderList, ['id', orderSelected]);\n\n        if (!matchedOrder) return '';\n\n        return makeOption(matchedOrder);\n    }, [orderSelected, orderList]); // eslint-disable-line\n\n    const handleQuantityChange = (e) => {\n        const boxIdx = boxIdxInListChecked({ id: e.target.name });\n\n        let newChecked = [...checked];\n        newChecked[boxIdx] = { ...newChecked[boxIdx], avalableQuantity: e.target.value };\n\n        setChecked(newChecked);\n    };\n\n    const ladingBillBox = useMemo(() => {\n        if (!boxes?.length) return [];\n\n        return boxes.map((box) => {\n            return {\n                ...box,\n                avalableQuantity: box.quantity - Number(box.quantity_in_lading_bills)\n            }\n        }).filter(box => box.avalableQuantity > 0);\n    }, [boxes]);\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const handleSearch = useCallback(_.debounce(value => {\n        if (value)\n            searchOrder({\n                search: `id:${value}`,\n                searchFields: `id:like`\n            });\n    }, 700), [customer_id]);\n\n    return (\n        <div className=\"list-box-for-form w-100\">\n            <div className=\"custom-header\">\n                <div className=\"title\">\n                    {trans(\"warehouse.sku.of_customer\")}\n                </div>\n                <div className=\"toolbar\">\n                    <Select\n                        isDisabled={!values.customer_id}\n                        isLoading={isLoading}\n                        placeholder={trans(\"warehouse.order.select_title\")}\n                        options={getOptions}\n                        onChange={\n                            handleSelectOrder\n                        }\n                        onInputChange={\n                            handleSearch\n                        }\n                        value={getValue}\n                    />\n                </div>\n            </div>\n            <div className=\"position-relative\">\n                {orderSelected && loading && <Loading local />}\n                <List className=\"row list-items\">\n                    {ladingBillBox.map((item) => {\n                        const labelId = `checkbox-list-label-${item.id}`;\n\n                        return (\n                            <div className=\"col-lg-6 col-sm-12\" key={item.id}>\n                                <ListItem role={undefined} dense button onClick={handleToggle(item)}>\n                                    <ListItemIcon>\n                                        <Checkbox\n                                            edge=\"start\"\n                                            checked={boxIdxInListChecked(item) !== -1}\n                                            tabIndex={-1}\n                                            disableRipple\n                                            inputProps={{ 'aria-labelledby': labelId }}\n                                        />\n                                    </ListItemIcon>\n                                    <div className=\"item-box\">\n                                        <SVG\n                                            src={toAbsoluteUrl(\n                                                '/media/svg/icons/Shopping/Box4.svg'\n                                            )}\n                                        ></SVG> <span className=\"item-box-id\">{item.box_id}</span>\n                                    </div>\n                                </ListItem>\n                                <div className={clsx(\"item-quantity\", boxIdxInListChecked(item) !== -1 ? '' : 'd-none')}>\n                                    {trans(\"common.quantity\")}: <input name={item.id} className=\"ml-3 form-control\" defaultValue={item.avalableQuantity} min={1} type=\"number\" max={item?.avalableQuantity} onChange={handleQuantityChange} />\n                                </div>\n                            </div>\n                        );\n                    })}\n                </List>\n            </div>\n\n            {pagination && (\n                <Pagination\n                    className=\"mt-3\"\n                    count={pagination.lastPage}\n                    page={pagination.page}\n                    shape=\"rounded\"\n                    onChange={handlePageChange}\n                />\n            )}\n        </div>\n    );\n};\n\nListBox.propTypes = {\n    boxes: PropTypes.array,\n    onChange: PropTypes.func,\n    pagination: PropTypes.any,\n    onChangePage: PropTypes.func,\n    loading: PropTypes.bool,\n    customer_id: PropTypes.any\n};\n\nexport default ListBox;","import React, { useEffect, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { boxOwnerAction } from 'app/modules/Warehouse/warehouse-redux/boxOwnerSlice';\n\nimport { Form, useFormikContext } from 'formik';\nimport FormStatus from '../FormStatus';\nimport ListBox from './ListBox';\nimport SelectCustomer from 'app/components/Select/SelectCustomer/SelectCustomerForm';\nimport SelectContainerTypeForm from 'app/components/Select/SelectContainerType/SelectContainerTypeForm';\n\nconst FormContent = props => {\n\n    const { values, setFieldValue } = useFormikContext();\n    const { data: boxes, pagination, loading } = useSelector(state => state.warehouse.boxOwner.list);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        return () => {\n            dispatch(boxOwnerAction.resetParams());\n        }\n    }, []); // eslint-disable-line\n\n    const handleSelectBox = useCallback((boxList) => {\n        setFieldValue('boxes', boxList);\n    }, []); // eslint-disable-line\n\n    const handlePageListBoxChange = (page) => {\n        dispatch(boxOwnerAction.changePagination({ page }))\n    }\n\n    return (\n        <Form className=\"form form-label-right form-add-lading-bill\">\n            <div className=\"row\">\n                <div className=\"col-lg-6\">\n                    <SelectContainerTypeForm name=\"desired_container_type_id\" />\n                </div>\n                <div className=\"col-lg-6\">\n                    <SelectCustomer\n                        name=\"customer_id\"\n                    />\n                </div>\n            </div>\n\n            <div className=\"row position-relative\">\n                <ListBox\n                    customer_id={values.customer_id}\n                    loading={loading}\n                    boxes={boxes}\n                    onChange={handleSelectBox}\n                    pagination={pagination}\n                    onChangePage={handlePageListBoxChange}\n                />\n            </div>\n\n            <FormStatus />\n        </Form>\n    );\n};\n\nFormContent.propTypes = {\n\n};\n\nexport default FormContent;","import React from 'react';\n\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\n\nimport './index.scss';\nimport useTrans from 'helper/useTrans';\nimport FormContent from './FormContent';\n\nconst FormAddLadingBill = ({\n    onSubmit,\n    initialValues = {\n        desired_container_type_id: '',\n        customer_id: '',\n        boxes: []\n    }\n}, ref) => {\n    \n    const [trans] = useTrans();\n\n    const validationSchema = Yup.object().shape({\n        desired_container_type_id: Yup.string().required(trans(\"validation.message.required\")),\n        customer_id: Yup.string().required(trans(\"validation.message.required\")),\n    });\n\n    return (\n        <Formik\n            enableReinitialize\n            initialValues={initialValues}\n            validationSchema={validationSchema}\n            onSubmit={onSubmit}\n            innerRef={ref}\n        >\n            <FormContent />\n        </Formik>\n    );\n};\n\nexport default React.forwardRef(FormAddLadingBill);\n","import React, { useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\n\nimport warehouseApi from 'apis/warehouse';\nimport handleApiError from 'helper/handleApiError';\nimport _ from 'lodash';\n\nimport CustomModal from 'app/components/CustomModal';\nimport { Modal } from 'react-bootstrap';\nimport FormAddLadingBill from '../../../components/Form/FormAddLadingBill';\nimport convertObjectDateToString from 'helper/convertObjectDateToString';\nimport { dialog } from 'app/components/DialogNotify';\nimport useTrans from 'helper/useTrans';\nimport Button from 'app/components/Button';\n\nconst CreateLadingBill = ({ show, onSuccess }) => {\n    const containerTypeList = useSelector(state => state.warehouse.containerType.list.data);\n    const [loading, setLoading] = useState(false);\n    const history = useHistory();\n    const formRef = useRef();\n    const [trans] = useTrans();\n\n    const closeModal = () => {\n        history.goBack();\n        formRef.current.resetForm();\n    };\n\n    const handleCreateLadingBill = async (values, form) => {\n\n        const body = convertObjectDateToString(_.omit(values, ['boxes']));\n\n        setLoading(true);\n        warehouseApi.ladingBill.create(body)\n            .then((ladingBill) => {\n                return updateMultiBox(values.boxes, ladingBill)\n                    .then(() => { return ladingBill });\n            })\n            .then((res) => {\n                dialog.success(trans(\"warehouse.lading_bill.create.success\"));\n                onSuccess && onSuccess(res);\n            })\n            .catch((err) => {\n                dialog.error(trans(\"warehouse.lading_bill.create.failure\"));\n                handleApiError(err, form);\n            })\n            .finally(() => {\n                setLoading(false);\n            })\n    };\n\n    const updateMultiBox = (boxes, ladingBill) => {\n\n        if (!boxes?.length) return ladingBill;\n\n        return Promise.all(boxes.map(b => {\n            return warehouseApi.boxLadingBill.create({\n                owning_box_id: b.id,\n                quantity: b.avalableQuantity,\n                lading_bill_id: ladingBill.id\n            })\n        }))\n    }\n\n    const triggerSubmit = () => {\n        formRef.current.submitForm();\n    }\n\n    return (\n        <CustomModal\n            show={show}\n            onHide={closeModal}\n            title={trans(\"warehouse.lading_bill.create.title\")}\n            actionsLoading={loading}\n        >\n\n            <Modal.Body>\n                <FormAddLadingBill\n                    onSubmit={handleCreateLadingBill}\n                    initialValues={{\n                        desired_container_type_id: containerTypeList?.[0]?.id,\n                        customer_id: '',\n                        boxes: []\n                    }}\n                    ref={formRef}\n                />\n            </Modal.Body>\n            <Modal.Footer>\n                <Button type=\"secondary\" loading={loading} onClick={closeModal}>\n                    {trans(\"common.cancel\")}\n                </Button>\n                <Button type=\"primary\" loading={loading} onClick={triggerSubmit}>\n                    {trans(\"common.save\")}\n                </Button>\n            </Modal.Footer>\n        </CustomModal>\n    );\n};\n\nCreateLadingBill.propTypes = {\n    show: PropTypes.bool,\n    onSuccess: PropTypes.func\n};\n\nexport default CreateLadingBill;\n","import React, { useCallback, useState, forwardRef, useImperativeHandle, useMemo } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport _ from 'lodash';\nimport SelectCustomer from 'app/components/Select/SelectCustomer';\nimport DatePicker from 'app/components/DatePicker';\nimport useTrans from 'helper/useTrans';\n\nconst LadingBillFilter = ({ onSearch, searchAll = true }, ref) => {\n\n    const [searchText, setSearchText] = useState('');\n\n    const [trans] = useTrans();\n\n    const fields = [\n        { id: 'shipment_method_id', title: trans(\"warehouse.shipment_method.title\") },\n        { id: 'customer_id', title: trans(\"common.customer\") },\n        { id: 'desired_date', title: trans(\"warehouse.lading_bill.desired_date\") },\n    ]\n\n    const [searchField, setSearchField] = useState(searchAll ? '' : fields?.[0]?.id);\n    const shipmentMethods = useSelector(state => state.warehouse.shipmentMethod.list.data);\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const dispatchSearch = useCallback(_.debounce((_searchText, _searchField) => {\n        if (_searchField.length && _searchText.length) {\n            onSearch && onSearch({ search: `${_searchField}:${_searchText}`, searchFields: `${_searchField}:like` });\n        } else {\n            onSearch && onSearch({ search: _searchText });\n        }\n    }, 700), []);\n\n    useImperativeHandle(ref, () => ({\n        reset: () => {\n            setSearchText('');\n            setSearchField(searchAll ? '' : fields?.[0]?.id);\n        }\n    }))\n\n    const handleSearchTextChange = (e) => {\n        setSearchText(e.target.value);\n\n        dispatchSearch(e.target.value, searchField);\n    }\n\n    const handleSearchFieldChange = (e) => {\n        setSearchField(e.target.value);\n\n        if (searchText.length) {\n            setSearchText('');\n            dispatchSearch('', e.target.value);\n        }\n    }\n\n    const handleCustomerChange = (customer_id) => {\n        setSearchText(customer_id);\n\n        dispatchSearch(customer_id, searchField);\n    }\n\n    const getSearchFieldCpn = useMemo(() => {\n        if (searchField === 'shipment_method_id')\n            return (\n                <select onChange={handleSearchTextChange} className=\"form-control\">\n                    <option value=\"\">{trans(\"common.all\")}</option>\n                    {shipmentMethods.map((shipmentMethod, idx) => (\n                        <option value={shipmentMethod.id} key={`shipmentMethod-idx-${idx}`}>{shipmentMethod.name}</option>\n                    ))}\n                </select>\n            )\n\n        if (searchField === 'customer_id')\n            return <SelectCustomer showLabel={false} onChange={handleCustomerChange} value={searchText} />\n\n        if (searchField === 'desired_date')\n            return <DatePicker value={searchText} onChange={handleCustomerChange} formater=\"YYYY-MM-DD\" />\n\n        return (\n            <input\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"Search\"\n                onChange={handleSearchTextChange}\n                value={searchText}\n            />\n        )\n    }, [searchField, searchText, shipmentMethods]); // eslint-disable-line\n\n    return (\n        <div className=\"form-group row custom-filter-warehouse\">\n            <div className=\"col-lg-4 col-md-4 col-sm-4 p-3\">\n                <select name=\"searchField\" id=\"searchField\" className=\"form-control\" onChange={handleSearchFieldChange} value={searchField}>\n                    {searchAll ? (<option value=\"\">{trans(\"common.all\")}</option>) : ''}\n                    {(fields || []).map((f, idx) => (\n                        <option value={f.id} key={`search-field-${idx}`}>{f.title}</option>\n                    ))}\n                </select>\n            </div>\n            <div className=\"col-lg-4 col-md-6 col-sm-8 p-3\">\n                {getSearchFieldCpn}\n            </div>\n        </div>\n    );\n};\n\nexport default forwardRef(LadingBillFilter);","import React, { useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Route, useHistory, useRouteMatch } from 'react-router-dom';\n\nimport { fetchLadingBills } from '../../../warehouse-redux/ladingBillSlice';\n\nimport {\n    Card,\n    CardBody,\n    CardHeader,\n    CardHeaderToolbar\n} from '_metronic/_partials/controls';\nimport TableLadingBillList from 'app/modules/Warehouse/components/Table/TableLadingBillList';\nimport CreateLadingBill from './CreateLadingBill';\nimport LadingBillFilter from 'app/modules/Warehouse/components/Filter/LadingBillFilter';\nimport Loading from 'app/components/Loading';\nimport Layout from 'app/modules/Warehouse/components/Layout';\nimport useTrans from 'helper/useTrans';\nimport NeedPermission from 'app/components/NeedPermission';\n\nconst LadingBillList = props => {\n    const { pagination, loading } = useSelector(\n        state => state.warehouse.ladingBill.list\n    );\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const match = useRouteMatch();\n    const filterRef = useRef();\n    const [trans] = useTrans();\n\n    const getLadingBillsData = (params) => {\n        dispatch(fetchLadingBills({ page: pagination.page, with: 'containers.type.shipmentMethod', ...params }));\n    }\n\n    useEffect(() => {\n        getLadingBillsData();\n    }, [pagination.page]); // eslint-disable-line\n\n    const handleSearchSubmit = search => {\n        getLadingBillsData(search);\n    };\n\n    const f5Table = () => {\n        getLadingBillsData();\n\n        filterRef.current && filterRef.current.reset();\n    }\n\n    const createLadingBillSuccess = (data) => {\n        getLadingBillsData();\n\n        history.push(`/warehouse/lading-bills/${data.id}`)\n    }\n\n    return (\n        <Layout title={trans(\"warehouse.lading_bill.title\")}>\n            <NeedPermission need={['lading-bills.create']}>\n                <Route path={`${match.path}/create-lading-bill`}>\n                    {({ match }) => (\n                        <CreateLadingBill\n                            show={match !== null}\n                            onSuccess={createLadingBillSuccess}\n                        />\n                    )}\n                </Route>\n            </NeedPermission>\n            <Card>\n                <CardHeader title={trans(\"warehouse.lading_bill.list.title\")}>\n                    <NeedPermission need={['lading-bills.create']}>\n                        <CardHeaderToolbar>\n                            <button\n                                className=\"btn btn-primary\"\n                                onClick={() =>\n                                    history.push(`${match.url}/create-lading-bill`)\n                                }\n                            >\n                                {trans(\"warehouse.lading_bill.create.title\")}\n                            </button>\n                        </CardHeaderToolbar>\n                    </NeedPermission>\n                </CardHeader>\n                <CardBody className=\"position-relative\">\n                    {loading && <Loading local />}\n                    <NeedPermission need={['lading-bills.index']}>\n                        <LadingBillFilter ref={filterRef} onSearch={handleSearchSubmit} />\n                        <TableLadingBillList\n                            onRefresh={f5Table}\n                        />\n                    </NeedPermission>\n                </CardBody>\n            </Card>\n        </Layout>\n    );\n};\n\nLadingBillList.propTypes = {};\n\nexport default LadingBillList;\n","import React from 'react';\n\nimport { Input } from '_metronic/_partials/controls';\nimport { Form, FastField, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport FormStatus from '../FormStatus';\nimport SelectContainerTypeForm from 'app/components/Select/SelectContainerType/SelectContainerTypeForm';\nimport SelectCustomerForm from 'app/components/Select/SelectCustomer/SelectCustomerForm';\n\nimport './index.scss';\nimport useTrans from 'helper/useTrans';\n\nconst FormEditLadingBill = ({\n    isEdit,\n    initialValues,\n    onSubmit\n}, ref) => {\n\n    const [trans] = useTrans();\n\n    const validationSchema = Yup.object().shape({\n        desired_container_type_id: Yup.string().required(trans(\"validation.message.required\"))\n    });\n\n    return (\n        <Formik\n            initialValues={initialValues}\n            onSubmit={onSubmit}\n            enableReinitialize\n            validationSchema={validationSchema}\n            innerRef={ref}\n        >\n            <Form className=\"form form-label-right form-edit-lading-bill\">\n                <div className=\"row\">\n                    <div className=\"col-lg-12\">\n                        <SelectContainerTypeForm name=\"desired_container_type_id\" isDisabled={!isEdit} />\n                    </div>\n                    <div className=\"col-lg-12\">\n                        <SelectCustomerForm name=\"customer_id\" isDisabled={!isEdit} />\n                    </div>\n                    <div className=\"col-lg-12\">\n                        <FastField\n                            name=\"volume\"\n                            component={Input}\n                            label={trans(\"common.volume\")}\n                            placeholder={trans(\"common.volume\")}\n                            disabled={true}\n                            shouldUpdate={() => true}\n                        />\n                    </div>\n                    <div className=\"col-lg-12\">\n                        <FastField\n                            name=\"weight\"\n                            component={Input}\n                            label={trans(\"common.weight\")}\n                            placeholder={trans(\"common.weight\")}\n                            disabled={true}\n                            shouldUpdate={() => true}\n                        />\n                    </div>\n                </div>\n\n                <FormStatus />\n            </Form>\n        </Formik>\n    );\n};\n\nexport default React.forwardRef(FormEditLadingBill);\n","import React, { useMemo, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport warehouseApi from 'apis/warehouse';\nimport handleApiError from 'helper/handleApiError';\nimport { fetchLadingBill } from '../../../warehouse-redux/ladingBillSlice';\nimport moment from 'moment';\n\nimport {\n    Card,\n    CardBody,\n    CardHeader,\n    CardHeaderToolbar\n} from '_metronic/_partials/controls';\nimport FormEditLadingBill from '../../../components/Form/FormEditLadingBill';\nimport Loading from 'app/components/Loading';\nimport GrBtnEdit from 'app/modules/Warehouse/components/GrBtnEdit';\nimport convertObjectDateToString from 'helper/convertObjectDateToString';\nimport useTrans from 'helper/useTrans';\nimport NeedPermission from 'app/components/NeedPermission';\n\nconst LadingBillInfo = props => {\n    const [isEdit, setIsEdit] = useState(false);\n    const ladingBillDetail = useSelector(\n        state => state.warehouse.ladingBill.detail.data\n    );\n    const loading = useSelector(\n        state => state.warehouse.ladingBill.detail.loading\n    );\n    const formRef = useRef();\n    const dispatch = useDispatch();\n    const [trans] = useTrans();\n\n    const handleSaveUpdate = (values, form) => {\n        warehouseApi.ladingBill\n            .update(ladingBillDetail.id, convertObjectDateToString(values))\n            .then(response => {\n                setIsEdit(false);\n\n                dispatch(fetchLadingBill({ id: response.id, with: \"boxLadingBills.owningBox.box\" }));\n            })\n            .catch(err => {\n                handleApiError(err, form);\n            });\n    };\n\n    const getInitialValue = useMemo(() => {\n        if (ladingBillDetail?.desired_date) return { ...ladingBillDetail, desired_date: moment(ladingBillDetail.desired_date, 'DD-MM-YYYY') };\n\n        return ladingBillDetail;\n    }, [ladingBillDetail]);\n\n    return (\n        <Card style={{ height: 'calc(100% - 25px)' }}>\n            <CardHeader title={trans(\"warehouse.lading_bill.info\")}>\n                <NeedPermission need={'lading-bills.update'}>\n                    <CardHeaderToolbar>\n                        <GrBtnEdit\n                            isEdit={isEdit}\n                            onEdit={() => setIsEdit(true)}\n                            onSubmit={() => formRef.current.handleSubmit()}\n                            onCancel={() => {\n                                formRef.current.resetForm();\n                                setIsEdit(false);\n                            }}\n                        />\n                    </CardHeaderToolbar>\n                </NeedPermission>\n            </CardHeader>\n            <CardBody className=\"position-relative\">\n                {loading && <Loading />}\n                <FormEditLadingBill\n                    isEdit={isEdit}\n                    ref={formRef}\n                    initialValues={getInitialValue}\n                    onSubmit={handleSaveUpdate}\n                />\n            </CardBody>\n        </Card>\n    );\n};\n\nLadingBillInfo.propTypes = {};\n\nexport default LadingBillInfo;\n","import React, { useEffect, useCallback, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { boxOwnerAction } from 'app/modules/Warehouse/warehouse-redux/boxOwnerSlice';\nimport _ from 'lodash';\n\nimport { Form, useFormikContext } from 'formik';\nimport FormStatus from '../FormStatus';\nimport ListBox from '../FormAddLadingBill/ListBox';\nimport SelectCustomer from 'app/components/Select/SelectCustomer/SelectCustomerForm';\n\nconst FormContent = props => {\n\n    const { values, setFieldValue } = useFormikContext();\n    const { data: boxes, pagination, loading } = useSelector(state => state.warehouse.boxOwner.list);\n    const ladingBillDetail = useSelector(state => state.warehouse.ladingBill.detail.data);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        return () => {\n            dispatch(boxOwnerAction.resetParams());\n        }\n    }, []); // eslint-disable-line\n\n    const handleSelectBox = useCallback((boxList) => {\n        setFieldValue('boxes', boxList);\n    }, []); // eslint-disable-line\n\n    const handlePageListBoxChange = (page) => {\n        dispatch(boxOwnerAction.changePagination({ page }))\n    }\n\n    const getBoxes = useMemo(() => {\n        if (!boxes?.length) return [];\n\n        return boxes.filter(b => {\n            return _.findIndex(ladingBillDetail.owning_boxes, ['id', b.id]) === -1;\n        });\n    }, [boxes, ladingBillDetail]);\n\n    return (\n        <Form className=\"form form-label-right form-add-box-lading-bill\">\n            <SelectCustomer\n                name=\"customer_id\"\n            />\n\n            <div className=\"row position-relative\">\n                <ListBox customer_id={values.customer_id} loading={loading} boxes={getBoxes} onChange={handleSelectBox} pagination={pagination} onChangePage={handlePageListBoxChange} />\n            </div>\n\n            <FormStatus />\n        </Form>\n    );\n};\n\nFormContent.propTypes = {\n\n};\n\nexport default FormContent;","import React from 'react';\n\nimport useTrans from 'helper/useTrans';\n\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport FormContent from './FormContent';\n\nimport './index.scss';\n\nconst FormAddBoxLadingBill = ({\n    initialValues = {\n        customer_id: '', boxes: []\n    },\n    onSubmit\n}, ref) => {\n    const [trans] = useTrans();\n\n    const validationSchema = Yup.object().shape({\n        boxes: Yup.array().required(trans(\"validation.message.required\")),\n    });\n\n    return (\n        <Formik\n            initialValues={initialValues}\n            onSubmit={onSubmit}\n            validationSchema={validationSchema}\n            innerRef={ref}\n        >\n            <FormContent />\n        </Formik>\n\n    );\n};\n\nexport default React.forwardRef(FormAddBoxLadingBill);\n","import React, { useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\n\nimport warehouseApi from 'apis/warehouse';\nimport handleApiError from 'helper/handleApiError';\n\nimport CustomModal from 'app/components/CustomModal';\nimport { Modal } from 'react-bootstrap';\nimport { useSelector } from 'react-redux';\nimport FormAddBoxLadingBill from 'app/modules/Warehouse/components/Form/FormAddBoxLadingBill';\nimport useTrans from 'helper/useTrans';\nimport Button from 'app/components/Button';\n\nconst AddBoxToLadingBill = ({ show, onSuccess }) => {\n    const ladingBillDetail = useSelector(\n        state => state.warehouse.ladingBill.detail.data\n    );\n    const [loading, setLoading] = useState(false);\n    const history = useHistory();\n    const formRef = useRef();\n    const [trans] = useTrans();\n\n    const closeModal = () => {\n        history.goBack();\n    };\n\n    const handleAddBox = (values, form) => {\n        setLoading(true);\n\n        return Promise.all(values.boxes.map(b => {\n            let body = {\n                lading_bill_id: ladingBillDetail.id,\n                owning_box_id: b.id,\n                quantity: b.quantity\n            }\n\n            return warehouseApi.boxLadingBill.create(body)\n        })).then(() => {\n            closeModal();\n            onSuccess && onSuccess();\n        }).catch(err => {\n            handleApiError(err, form);\n        }).finally(() => {\n            setLoading(false);\n        });\n    };\n\n    const triggerSubmit = () => {\n        formRef.current.submitForm();\n    }\n\n    return (\n        <CustomModal\n            show={show}\n            title={trans(\"warehouse.sku.pivot.lading_bill.create.title\")}\n            onHide={closeModal}\n            actionsLoading={loading}\n        >\n            <Modal.Body>\n                <FormAddBoxLadingBill onSubmit={handleAddBox} ref={formRef} />\n            </Modal.Body>\n            <Modal.Footer>\n                <Button type=\"secondary\" loading={loading} onClick={closeModal}>\n                    {trans(\"common.cancel\")}\n                </Button>\n                <Button type=\"primary\" loading={loading} onClick={triggerSubmit}>\n                    {trans(\"common.save\")}\n                </Button>\n            </Modal.Footer>\n        </CustomModal>\n    );\n};\n\nAddBoxToLadingBill.propTypes = {\n    show: PropTypes.bool,\n    onSuccess: PropTypes.func\n};\n\nexport default AddBoxToLadingBill;\n","import React, { useCallback, useEffect, useMemo, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\n\nimport formatNumber from 'helper/formatNumber';\nimport { currenyUnit } from 'config/currency';\nimport _ from 'lodash';\nimport warehouseApi from 'apis/warehouse';\nimport { dialog } from 'app/components/DialogNotify';\nimport { toAbsoluteUrl } from '_metronic/_helpers';\nimport useTrans from 'helper/useTrans';\n\nimport SVG from 'react-inlinesvg';\nimport EditableText from 'app/components/EditableText';\nimport NeedPermission from 'app/components/NeedPermission';\n\nexport default function useColumns({ onRefresh }) {\n    const dataTable = useSelector(state => state.warehouse.ladingBill.detail.data?.box_lading_bills);\n    const params = useParams();\n    const modalConfirmRef = useRef();\n    const inputQuantityRef = useRef([]);\n    const [trans] = useTrans();\n\n    useEffect(() => {\n        if (dataTable?.length) {\n            dataTable.forEach(d => {\n                if (inputQuantityRef.current[d.id]) inputQuantityRef.current[d.id].value = d?.quantity;\n            });\n        }\n    }, [dataTable]);\n\n    const handleChangeQuantity = (e, row) => {\n        if (e.charCode === 13) dispatchUpdateQuantity(e.target.value, row)\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const dispatchUpdateQuantity = useCallback(_.debounce((quantity, row) => {\n        if (!params?.id) return;\n\n        let availableQuantity = row.quantity + row.owning_box.box.quantity_avaliable_for_owners;\n\n        if (quantity > availableQuantity) {\n            dialog.warning(trans(\"validation.message.max_sku_quantity_available\", { max: availableQuantity }));\n\n            if (inputQuantityRef?.current?.[row.id]) inputQuantityRef.current[row.id].value = row.quantity;\n\n            return;\n        }\n\n        warehouseApi.boxLadingBill.update(row?.id, { quantity })\n            .then(() => {\n                onRefresh && onRefresh();\n                dialog.success(trans(\"warehouse.sku.pivot.lading_bill.update_quantity.success\"));\n            })\n            .catch((err) => {\n                let errMessage = trans(\"warehouse.sku.pivot.lading_bill.update_quantity.failure\");\n\n                if (err?.response?.data?.errors?.message) errMessage = err.response.data.errors.message;\n                dialog.error(errMessage);\n            })\n    }, 700), []);\n\n    const confirmDeleteBoxItem = (id) => {\n        modalConfirmRef.current.open({\n            title: `${trans(\"warehouse.sku.pivot.lading_bill.update_quantity.title\")}?`,\n            id\n        });\n    }\n\n    const handlePressInputStorageCost = (value, row) => {\n        warehouseApi.boxLadingBill.update(row.id, { storage_cost: value })\n            .then(() => {\n                onRefresh && onRefresh();\n                dialog.success(trans(\"warehouse.sku.pivot.lading_bill.update_storage_cost.success\"));\n            })\n            .catch(() => {\n                dialog.error(trans(\"warehouse.sku.pivot.lading_bill.update_storage_cost.failure\"));\n            })\n    }\n\n    const handlePressInputAdditionalCost = (value, row) => {\n        warehouseApi.boxLadingBill.update(row.id, { additional_cost: value })\n            .then(() => {\n                onRefresh && onRefresh();\n                dialog.success(trans(\"warehouse.sku.pivot.lading_bill.update_storage_cost.success\"));\n            })\n            .catch(() => {\n                dialog.error(trans(\"warehouse.sku.pivot.lading_bill.update_storage_cost.failure\"));\n            })\n    }\n\n    const columns = useMemo(() => ([\n        { id: [\"owning_box\", \"box_id\"], title: trans(\"warehouse.sku.title\") },\n        {\n            id: [\"owning_box\", \"objectable_id\"], title: trans(\"warehouse.sku.owner.title\"), render: (objectable_id, { owning_box }) => (\n                <div className=\"owner-object\">\n                    <span className=\"object-type\">{owning_box.objectable_type === 'user' ? trans(\"common.customer\") : trans(\"common.the_order\")}</span>\n                    <span> - </span>\n                    <span className=\"object-id\">{trans(\"common.code\")}: {objectable_id}</span>\n                </div>\n            )\n        },\n        {\n            id: ['storage_cost'], title: trans(\"warehouse.cost.storage\"), render: (storage_cost, row) => (\n                <div className=\"pivot-storage-cost\">\n                    <div className=\"d-flex align-items-end justify-content-center\">\n                        <NeedPermission need={'box-lading-bills.update'} fallback={(<span>{formatNumber(Number(storage_cost), { round: 2 })} {currenyUnit}</span>)}>\n                            <EditableText\n                                text={`${formatNumber(Number(storage_cost), { round: 2 })} ${currenyUnit}`}\n                                value={Number(storage_cost)}\n                                type=\"number\"\n                                onChange={(value) => handlePressInputStorageCost(value, row)}\n                            />\n                        </NeedPermission>\n                    </div>\n\n                    <div>\n                        <small className=\"text-primary d-flex align-items-end\">\n                            <NeedPermission need={'box-lading-bills.update'} fallback={(<span>(${trans(\"warehouse.cost.additional\")}: {formatNumber(Number(row.additional_cost), { round: 2 })} {currenyUnit})</span>)}>\n                                <EditableText\n                                    text={`(${trans(\"warehouse.cost.additional\")}: ${formatNumber(Number(row.additional_cost), { round: 2 })} ${currenyUnit})`}\n                                    value={Number(row.additional_cost)}\n                                    type=\"number\"\n                                    onChange={(value) => handlePressInputAdditionalCost(value, row)}\n                                />\n                            </NeedPermission>\n                        </small>\n                    </div>\n                </div>\n            )\n        },\n        {\n            id: ['quantity'], title: trans(\"common.quantity\"), render: (quantity, row) => {\n                return (\n                    <NeedPermission need={'box-lading-bills.update'} fallback={<span>{quantity}</span>}>\n                        <input\n                            name={row.id}\n                            ref={ref => inputQuantityRef.current[row.id] = ref}\n                            className=\"form-control\"\n                            type=\"number\"\n                            onKeyPress={(e) => handleChangeQuantity(e, row)}\n                        />\n                    </NeedPermission>\n                )\n            }\n        },\n        {\n            id: 'id',\n            render: (id) => (\n                <NeedPermission need={['box-lading-bills.delete']}>\n                    <button\n                        className=\"btn btn-icon btn-light btn-hover-danger btn-sm\"\n                        onClick={() =>\n                            confirmDeleteBoxItem(id)\n                        }\n                    >\n                        <span className=\"svg-icon svg-icon-md svg-icon-danger\">\n                            <SVG\n                                src={toAbsoluteUrl(\n                                    '/media/svg/icons/General/Trash.svg'\n                                )}\n                            ></SVG>\n                        </span>\n                    </button>\n                </NeedPermission>\n            )\n        }\n    ]), []); // eslint-disable-line\n\n    return [columns, modalConfirmRef];\n}","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport warehouseApi from 'apis/warehouse';\nimport { dialog } from 'app/components/DialogNotify';\n\nimport CustomTable from 'app/components/CustomTable';\nimport EmptyData from 'app/components/EmptyData';\nimport ModalConfirm from 'app/modules/Warehouse/components/ModalConfirm';\nimport useTrans from 'helper/useTrans';\nimport useColumns from './useColumns';\n\nimport './index.scss';\nimport NeedPermission from 'app/components/NeedPermission';\n\nfunction TableBoxInLadingBill({ onRefresh }) {\n\n    const dataTable = useSelector(state => state.warehouse.ladingBill.detail.data?.box_lading_bills);\n\n    const [trans] = useTrans();\n    const [columns, modalConfirmRef] = useColumns({ onRefresh });\n\n    const deleteBoxLadingBill = ({ id }) => {\n        warehouseApi.boxLadingBill.delete(id)\n            .then(() => {\n                onRefresh && onRefresh();\n                dialog.success(trans(\"warehouse.sku.pivot.lading_bill.delete.success\"));\n            })\n            .catch(() => {\n                dialog.error(trans(\"warehouse.sku.pivot.lading_bill.delete.failure\"));\n            })\n    }\n\n    if (!dataTable?.length) return <EmptyData emptyText={trans(\"warehouse.sku.pivot.lading_bill.empty\")} />\n\n    return (\n        <div>\n            <ModalConfirm ref={modalConfirmRef} onOk={deleteBoxLadingBill} />\n            <NeedPermission need={['box-lading-bills.index']}>\n                <CustomTable\n                    columns={columns}\n                    rows={dataTable}\n                    isViewEdit={false}\n                    isDelete={false}\n                    isAction={false}\n                    className=\"table-list-box-in-lading-bill\"\n                />\n            </NeedPermission>\n        </div>\n    );\n}\n\nexport default TableBoxInLadingBill;\n","import React from 'react';\nimport { Route, useHistory, useRouteMatch } from 'react-router-dom';\n\nimport {\n    Card,\n    CardBody,\n    CardHeader,\n    CardHeaderToolbar\n} from '_metronic/_partials/controls';\nimport AddBoxToLadingBill from './AddBoxToLadingBill';\nimport TableBoxInLadingBill from './TableBoxInLadingBill';\nimport useTrans from 'helper/useTrans';\nimport NeedPermission from 'app/components/NeedPermission';\n\nconst LadingBillBox = ({ onRefresh }) => {\n    const match = useRouteMatch();\n    const history = useHistory();\n    const [trans] = useTrans();\n\n    return (\n        <>\n            <NeedPermission need={['box-lading-bills.create']}>\n                <Route path={`${match.path}/add-box-to-lading-bill`}>\n                    {({ match }) => (\n                        <AddBoxToLadingBill\n                            show={match !== null}\n                            onSuccess={onRefresh}\n                        />\n                    )}\n                </Route>\n            </NeedPermission>\n\n            <Card className=\"lading-bill-box\">\n                <CardHeader title={trans(\"warehouse.sku.pivot.lading_bill.title\")}>\n                    <NeedPermission need={['box-lading-bills.create']}>\n                        <CardHeaderToolbar>\n                            <button\n                                className=\"btn btn-primary\"\n                                onClick={() =>\n                                    history.push(\n                                        `${match.url}/add-box-to-lading-bill`\n                                    )\n                                }\n                            >\n                                {trans(\"warehouse.sku.pivot.lading_bill.create.title\")}\n                            </button>\n                        </CardHeaderToolbar>\n                    </NeedPermission>\n                </CardHeader>\n                <CardBody className=\"position-relative\">\n                    <TableBoxInLadingBill onRefresh={onRefresh} />\n                </CardBody>\n            </Card>\n        </>\n    );\n};\n\nLadingBillBox.propTypes = {};\n\nexport default LadingBillBox;\n","import React from 'react';\n\nimport { Input } from '_metronic/_partials/controls';\nimport { Form, FastField, Formik } from 'formik';\nimport FormStatus from '../FormStatus';\nimport './index.scss';\n\nconst FormEditLadingBillCost = ({\n    initialValues,\n    onSubmit\n}, ref) => {\n    return (\n        <Formik\n            enableReinitialize\n            initialValues={initialValues}\n            onSubmit={onSubmit}\n            innerRef={ref}\n        >\n            <Form className=\"form form-label-right form-edit-lading-bill\">\n                <div className=\"row\">\n                    <div className=\"col-lg-12\">\n                        <FastField\n                            name=\"balance\"\n                            component={Input}\n                            label=\"Phí\"\n                            placeholder=\"Phí\"\n                            disabled={true}\n                            shouldUpdate={() => true}\n                            type=\"number\"\n                        />\n                    </div>\n                    <div className=\"col-lg-12\">\n                        <FastField\n                            name=\"additional_cost\"\n                            component={Input}\n                            label=\"Phụ phí\"\n                            placeholder=\"Phụ phí\"\n                            disabled={true}\n                            shouldUpdate={() => true}\n                        />\n                    </div>\n                    <div className=\"col-lg-12\">\n                        <FastField\n                            name=\"shipping_cost\"\n                            component={Input}\n                            label=\"Phí vận chuyển\"\n                            placeholder=\"Phí vận chuyển\"\n                            disabled={true}\n                            shouldUpdate={() => true}\n                        />\n                    </div>\n                    <div className=\"col-lg-12\">\n                        <FastField\n                            name=\"shipping_inside_cost\"\n                            component={Input}\n                            label=\"\bPhí vận chuyển nội địa\"\n                            placeholder=\"\bPhí vận chuyển nội địa\"\n                            disabled={true}\n                            shouldUpdate={() => true}\n                        />\n                    </div>\n                    <div className=\"col-lg-12\">\n                        <FastField\n                            name=\"storage_cost\"\n                            component={Input}\n                            label=\"\bPhí lưu hàng\"\n                            placeholder=\"\bPhí lưu hàng\"\n                            disabled={true}\n                            shouldUpdate={() => true}\n                        />\n                    </div>\n                </div>\n\n                <FormStatus />\n            </Form>\n        </Formik>\n    );\n};\n\nexport default React.forwardRef(FormEditLadingBillCost);\n","import React, { useMemo, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport warehouseApi from 'apis/warehouse';\nimport handleApiError from 'helper/handleApiError';\nimport { fetchLadingBill } from '../../../warehouse-redux/ladingBillSlice';\nimport moment from 'moment';\n\nimport {\n    Card,\n    CardBody,\n    CardHeader,\n} from '_metronic/_partials/controls';\nimport FormEditLadingBillCost from 'app/modules/Warehouse/components/Form/FormEditLadingBill/FormEditLadingBillCost';\n\nimport Loading from 'app/components/Loading';\nimport convertObjectDateToString from 'helper/convertObjectDateToString';\nimport useTrans from 'helper/useTrans';\n\nconst LadingBillCostInfo = props => {\n    const [isEdit, setIsEdit] = useState(false);\n    const ladingBillDetail = useSelector(\n        state => state.warehouse.ladingBill.detail.data\n    );\n    const loading = useSelector(\n        state => state.warehouse.ladingBill.detail.loading\n    );\n    const formRef = useRef();\n    const dispatch = useDispatch();\n    const [trans] = useTrans();\n\n    const handleSaveUpdate = (values, form) => {\n        warehouseApi.ladingBill\n            .update(ladingBillDetail.id, convertObjectDateToString(values))\n            .then(response => {\n                setIsEdit(false);\n\n                dispatch(fetchLadingBill({ id: response.id }));\n            })\n            .catch(err => {\n                handleApiError(err, form);\n            });\n    };\n\n    const getInitialValue = useMemo(() => {\n        if (ladingBillDetail?.desired_date) return { ...ladingBillDetail, desired_date: moment(ladingBillDetail.desired_date, 'DD-MM-YYYY') };\n\n        return ladingBillDetail;\n    }, [ladingBillDetail]);\n\n    return (\n        <Card>\n            <CardHeader title={trans(\"warehouse.lading_bill.cost\")}>\n            </CardHeader>\n            <CardBody className=\"position-relative\">\n                {loading && <Loading />}\n                <FormEditLadingBillCost\n                    isEdit={isEdit}\n                    initialValues={getInitialValue}\n                    onSubmit={handleSaveUpdate}\n                    ref={formRef}\n                />\n            </CardBody>\n        </Card>\n    );\n};\n\nLadingBillCostInfo.propTypes = {};\n\nexport default LadingBillCostInfo;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router';\n\nimport { fetchLadingBill } from 'app/modules/Warehouse/warehouse-redux/ladingBillSlice';\nimport useTrans from 'helper/useTrans';\n\nimport LadingBillInfo from './LadingBillInfo';\nimport LadingBillBox from './LadingBillBox';\nimport NotFound from 'app/components/NotFound';\nimport Layout from 'app/modules/Warehouse/components/Layout';\nimport LadingBillCostInfo from './LadingBillCostInfo';\n\nconst LadingBillDetail = props => {\n    const { loading, data } = useSelector(\n        state => state.warehouse.ladingBill.detail\n    );\n    const [trans] = useTrans();\n    const params = useParams();\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (params?.id) f5LadingBillDetail();\n    }, [params?.id]); // eslint-disable-line\n\n    const f5LadingBillDetail = () => {\n        dispatch(fetchLadingBill({ id: params?.id, with: \"boxLadingBills.owningBox.box\" }));\n    }\n\n    if (!loading && !data) return <NotFound />;\n\n    return (\n        <Layout className=\"lading-bill-detail-page\" title={`${trans(\"warehouse.lading_bill.title\")} ${params?.id}`}>\n            <div className=\"row\">\n                <div className=\"col-lg-6\">\n                    <LadingBillInfo />\n                </div>\n                <div className=\"col-lg-6\">\n                    <LadingBillCostInfo />\n                </div>\n            </div>\n            <LadingBillBox onRefresh={f5LadingBillDetail} />\n        </Layout>\n    );\n};\n\nLadingBillDetail.propTypes = {};\n\nexport default LadingBillDetail;\n","import React from 'react';\nimport { Redirect, Route, Switch, useRouteMatch } from \"react-router-dom\";\nimport ErrorPage from \"../../../Error/ErrorPage\";\nimport LadingBillList from './LadingBillList';\nimport LadingBillDetail from './LadingBillDetail';\n\nconst LadingBillPage = props => {\n    const match = useRouteMatch();\n\n    return (\n        <Switch>\n            {<Redirect exact={true} from={match.url} to={`${match.url}/list`} />}\n            <Route path={`${match.url}/list`} component={LadingBillList} />\n            <Route path={`${match.url}/:id`} component={LadingBillDetail} />\n\n            <Route component={ErrorPage} />\n        </Switch>\n    );\n};\n\nLadingBillPage.propTypes = {\n\n};\n\nexport default LadingBillPage;","const { createSelector } = require(\"reselect\");\n\nconst selectCurrentContainerIdx = state => state.warehouse.loadUpContainer.currentContainer;\nconst selectListInvoices = state => state.warehouse.loadUpContainer.listInvoices.data;\n\nconst getCurrentContainer = createSelector(\n    [selectCurrentContainerIdx, selectListInvoices],\n    (currentContainerIdx, listInvoices) => {\n        const currentContainer = listInvoices[currentContainerIdx];\n\n        return currentContainer;\n    }\n)\n\nexport default getCurrentContainer;","import getCurrentContainer from \"./getCurrentContainer\";\n\nconst { createSelector } = require(\"reselect\");\n\nconst getTargetBoxes = createSelector(\n    [getCurrentContainer],\n    (currentContainer) => {\n        let targetBoxes = {};\n\n        if (!currentContainer) return targetBoxes;\n\n        currentContainer.lading_bills.forEach(ladingBill => {\n            targetBoxes = ladingBill.box_lading_bills.reduce((prevV, curV) => {\n                if (prevV[curV.owning_box.box_id]) prevV[curV.owning_box.box_id].quantity += curV.quantity;\n                else prevV[curV.owning_box.box_id] = {\n                    quantity: curV.quantity,\n                    count: 0\n                }\n\n                return prevV;\n            }, { ...targetBoxes });\n        });\n\n        targetBoxes = currentContainer.in_pickers.reduce((prevV, curV) => {\n            if (prevV[curV.box_id]) prevV[curV.box_id].count += curV.quantity;\n            else prevV[curV.box_id] = {\n                count: curV.quantity,\n                quantity: 0\n            }\n\n            return prevV;\n        }, { ...targetBoxes });\n\n        return targetBoxes;\n    }\n)\n\nexport default getTargetBoxes;","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport _ from 'lodash';\nimport { addInvoice, loadUpContainerAction } from 'app/modules/Warehouse/warehouse-redux/loadUpContainerSlice';\n\nimport SelectInvoice from 'app/components/Select/SelectInvoice';\n\nconst InputAddInvoice = props => {\n\n    const listInvoices = useSelector(state => state.warehouse.loadUpContainer.listInvoices.data);\n    const dispatch = useDispatch();\n\n    const handleSelectInvoice = (v) => {\n\n        let matchedInvoice = _.find(listInvoices, ['id', v]);\n        if(matchedInvoice) {\n            dispatch(loadUpContainerAction.setCurrentContainer(matchedInvoice))\n        } else {\n            dispatch(addInvoice({ id: v }));\n        }\n    }\n\n    return (\n        <SelectInvoice onChange={handleSelectInvoice} showLabel={false} />\n    );\n};\n\nInputAddInvoice.propTypes = {\n\n};\n\nexport default InputAddInvoice;","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { loadUpContainerAction } from 'app/modules/Warehouse/warehouse-redux/loadUpContainerSlice';\nimport getTargetBoxes from 'app/modules/Warehouse/selector/LoadUpContainer/targetBoxesSelector';\nimport getCurrentContainer from 'app/modules/Warehouse/selector/LoadUpContainer/getCurrentContainer';\n\nimport { Card } from '_metronic/_partials/controls';\nimport InputAddInvoice from './InputAddInvoice';\nimport TargetBoxes from 'app/modules/Warehouse/components/WarehouseIO/TargetBoxes';\n\nimport './index.scss';\n\nconst TargetSection = props => {\n\n    const targetBoxes = useSelector(getTargetBoxes);\n    const currentContainer = useSelector(getCurrentContainer);\n    const dispatch = useDispatch();\n\n    const handleRemoveInvoice = (c) => {\n        dispatch(loadUpContainerAction.removeInvoiceByIdx(c));\n    }\n\n    return (\n        <Card className=\"target-section\">\n            <InputAddInvoice />\n            <TargetBoxes targetBoxes={targetBoxes} currentContainer={currentContainer} onRemoveTarget={handleRemoveInvoice} />\n        </Card>\n    );\n};\n\nTargetSection.propTypes = {\n    \n};\n\nexport default TargetSection;","import moment from 'moment';\n\nexport default function isContainerCutOff(container) {\n    if(!container?.cut_off_date) return false;\n\n    return moment(container.cut_off_date, 'DD-MM-YYYY').isSameOrBefore(moment(), 'day');\n}","import getCurrentContainer from \"./getCurrentContainer\";\nconst { createSelector } = require(\"reselect\");\n\nconst getAllMessage = state => state.warehouse.loadUpContainer.process.message;\n\nconst getUpContMessages = createSelector(\n    [getCurrentContainer, getAllMessage],\n    (currentContainer, allMessages) => {\n\n        if (!currentContainer || !allMessages.length) return [];\n\n        return allMessages.filter(m => m.container.id === currentContainer.id);\n    }\n)\n\nexport default getUpContMessages;","import { useDispatch, useSelector } from \"react-redux\";\n\nimport warehouseApi from 'apis/warehouse';\nimport { loadUpContainerAction } from \"app/modules/Warehouse/warehouse-redux/loadUpContainerSlice\";\n\nexport default function useLoadUp(modalSelectPalletRef) {\n\n    const currentContainerIdx = useSelector(state => state.warehouse.loadUpContainer.currentContainer);\n    const listInvoices = useSelector(state => state.warehouse.loadUpContainer.listInvoices.data);\n    const dispatch = useDispatch();\n\n    const loadUpBox = (id, pallet_id) => {\n        warehouseApi.inContainerPicker.create({\n            container_id: listInvoices[currentContainerIdx].id,\n            box_id: id,\n            pallet_id\n        }).then((res) => {\n            dispatch(loadUpContainerAction.loadUpBoxSuccess(res));\n        }).catch((err) => {\n            console.error(err);\n\n            if (err.response.data.errors.pallet_id) {\n                modalSelectPalletRef.current.open({\n                    id\n                });\n            }\n        });\n    }\n\n    return { loadUpBox };\n}","import React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { fetchPallets } from 'app/modules/Warehouse/warehouse-redux/palletSlice';\nimport useTrans from 'helper/useTrans';\n\nimport TMNBaseSelect from '../BaseSelect';\n\nconst SelectPallet = ({ onChange, value, showLabel = true, defaultParams = {}, ...props }) => {\n    const palletList = useSelector(state => state.warehouse.pallet.list.data);\n    const loading = useSelector(state => state.warehouse.pallet.list.loading);\n    const dispatch = useDispatch();\n    const [trans] = useTrans();\n\n    const makeOption = useCallback((i) => ({\n        value: i.id,\n        label: trans(\"warehouse.pallet.option_label\", {\n            id: i.id,\n            pallet_info: !!i?.location?.floor ? `(F${i?.location?.floor} . R${i?.location?.row} . C${i?.location?.column})` : ''\n        })\n    }), [trans]);\n\n    const palletOptions = palletList?.map(item => makeOption(item));\n\n    const fetchOptions = useCallback((params = {}) => {\n\n        const body = params;\n\n        Object.entries(defaultParams).forEach(([k, v]) => {\n            if (body[k] && ['search', 'searchFields'].includes(k)) {\n                body[k] += `;${v}`;\n            } else {\n                body[k] = v;\n            }\n        });\n\n        body['searchJoin'] = 'and';\n\n        dispatch(fetchPallets({ ...body, with: 'location' }));\n    }, [dispatch, defaultParams]);\n\n    const handleSelect = option => {\n        onChange && onChange(option.value);\n    };\n\n    return (\n        <TMNBaseSelect\n            value={value}\n            label={showLabel && trans(\"warehouse.pallet.find\")}\n            className=\"select-pallet\"\n            placeholder={trans(\"warehouse.pallet.find\")}\n            options={palletOptions}\n            onChange={handleSelect}\n            loading={loading}\n            onFetchData={fetchOptions}\n            {...props}\n        />\n    );\n};\n\nSelectPallet.propTypes = {\n    onChange: PropTypes.func,\n    value: PropTypes.any,\n    showLabel: PropTypes.bool\n};\n\nexport default SelectPallet;\n","import React, { useImperativeHandle, useState } from 'react';\n\nimport useTrans from 'helper/useTrans';\nimport useLoadUp from '../../hooks/useLoadUp';\n\nimport CustomModal from 'app/components/CustomModal';\nimport SelectPallet from 'app/components/Select/SelectPallet';\nimport { Modal } from 'react-bootstrap';\n\nconst ModalSelectPallet = (props, ref) => {\n\n    const [show, setShow] = useState();\n    const [boxId, setBoxId] = useState();\n    const [trans] = useTrans();\n    const { loadUpBox } = useLoadUp(ref);\n\n    useImperativeHandle(ref, () => ({\n        open: ({ id }) => {\n            setShow(true);\n            setBoxId(id);\n        }\n    }));\n\n    const closeModal = () => {\n        setShow(false);\n    }\n\n    const handleChangePallet = (palletSelected) => {\n        closeModal();\n        loadUpBox(boxId, palletSelected);\n    }\n\n    return (\n        <CustomModal\n            show={show}\n            onHide={closeModal}\n            title={trans(\"warehouse.load_up_container.select.pallet.title\")}\n        >\n            <Modal.Body>\n                <SelectPallet\n                    onChange={handleChangePallet}\n                    defaultParams={{\n                        search: `pivotBoxes.box_id:${boxId}`,\n                        searchFields: `pivotBoxes.box_id:=`\n                    }}\n                />\n\n                <div className=\"mt-5 text-right\">\n                    <button className=\"btn btn-secondary\" onClick={closeModal}>\n                        {trans(\"common.cancel\")}\n                    </button>\n                </div>\n            </Modal.Body>\n        </CustomModal>\n    );\n};\n\nexport default React.forwardRef(ModalSelectPallet);","import React, { useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport useTrans from 'helper/useTrans';\nimport useLoadUp from '../../hooks/useLoadUp';\n\nimport { loadUpPallet } from 'app/modules/Warehouse/warehouse-redux/loadUpContainerSlice';\nimport { isPalletCode, useScanBarcode } from 'helper/useScanBarcode';\nimport getCurrentContainer from 'app/modules/Warehouse/selector/LoadUpContainer/getCurrentContainer';\nimport isContainerCutOff from 'helper/isContainerCutOff';\nimport ModalSelectPallet from '../ModalSelectPallet';\n\nimport './index.scss';\nimport usePermission from 'app/components/NeedPermission/usePermission';\n\nconst InputAddData = props => {\n\n    const currentContainer = useSelector(getCurrentContainer);\n    const [trans] = useTrans();\n    const modalSelectPalletRef = useRef();\n    const inputRef = useRef();\n\n    const dispatch = useDispatch();\n    const { loadUpBox } = useLoadUp(modalSelectPalletRef);\n    const canLoadUpContainer = usePermission(['in-container-pickers.create'])\n\n    useScanBarcode({\n        condition: (v) => canLoadUpContainer,\n        onEnter: (v) => handleScanEnter(v),\n    });\n\n    const handleScanEnter = (value) => {\n\n        setTimeout(() => {\n            inputRef.current.value = '';\n        }, 100);\n\n        if (!value || !value?.length) return;\n        if (!currentContainer) return;\n        if (isContainerCutOff(currentContainer)) return;\n\n        if (isPalletCode(value)) {\n            dispatch(loadUpPallet({ id: value }));\n        } else {\n            loadUpBox(value);\n        }\n    }\n\n    const handleEnterInput = (e) => {\n        if (e.charCode === 13) {\n            handleScanEnter(e.target.value);\n        }\n    }\n\n    return (\n        <>\n            <ModalSelectPallet ref={modalSelectPalletRef} />\n            <div className=\"input-add-data\">\n                <input\n                    className=\"form-control\"\n                    placeholder={!isContainerCutOff(currentContainer) ? trans(\"warehouse.container.input.barcode\") : trans(\"warehouse.container.closed_container\")}\n                    ref={inputRef}\n                    onKeyPress={handleEnterInput}\n                    disabled={isContainerCutOff(currentContainer) || !canLoadUpContainer}\n                />\n            </div>\n        </>\n    );\n};\n\nInputAddData.propTypes = {\n\n};\n\nexport default InputAddData;","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport warehouseApi from 'apis/warehouse';\nimport { loadUpContainerAction } from 'app/modules/Warehouse/warehouse-redux/loadUpContainerSlice';\nimport useTrans from 'helper/useTrans';\nimport isContainerCutOff from 'helper/isContainerCutOff';\nimport getCurrentContainer from 'app/modules/Warehouse/selector/LoadUpContainer/getCurrentContainer';\nimport getUpContMessages from 'app/modules/Warehouse/selector/LoadUpContainer/getUpContMessages';\n\nimport { Card } from '_metronic/_partials/controls';\nimport InputAddData from './InputAddData';\nimport IOMessage from 'app/modules/Warehouse/components/WarehouseIO/IOMessages';\nimport { dialog } from 'app/components/DialogNotify';\n\nimport './index.scss';\n\nconst ProcessSection = props => {\n\n    const messages = useSelector(getUpContMessages);\n    const currentContainer = useSelector(getCurrentContainer);\n    const [trans] = useTrans();\n    const dispatch = useDispatch();\n    const containerCutOff = isContainerCutOff(currentContainer);\n\n    const handleDeleteMessage = (message) => {\n        warehouseApi.inContainerPicker.delete(message.id)\n            .then(() => {\n                dialog.success(trans(\"warehouse.io.delete.success\"));\n                dispatch(loadUpContainerAction.removeBoxByPickerId(message));\n            })\n            .catch(() => {\n                dialog.error(trans(\"warehouse.io.delete.failure\"));\n            })\n    }\n\n    const handleEditQuantity = ({ newQuantity, ...message }) => {\n        if (Number(newQuantity) > 0)\n            warehouseApi.inContainerPicker.update(message.id, { quantity: Number(newQuantity) })\n                .then(() => {\n                    dialog.success(trans(\"warehouse.io.update.success\"));\n                    dispatch(loadUpContainerAction.updateBoxQuantity({ newQuantity: Number(newQuantity), ...message }));\n                })\n                .catch(() => {\n                    dialog.error(trans(\"warehouse.io.update.failure\"));\n                })\n    }\n\n    return (\n        <Card className=\"process-section\">\n            <InputAddData />\n            <IOMessage\n                messages={messages}\n                onDelete={!containerCutOff ? handleDeleteMessage : undefined}\n                onEdit={!containerCutOff ? handleEditQuantity : undefined}\n                permissions={{\n                    delete: ['in-container-pickers.delete'],\n                    update: ['in-container-pickers.update'],\n                }}\n            />\n        </Card>\n    );\n};\n\nProcessSection.propTypes = {\n\n};\n\nexport default ProcessSection;","import React, { useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport formatNumber from 'helper/formatNumber';\nimport { cutOffContainer, loadUpContainerAction } from 'app/modules/Warehouse/warehouse-redux/loadUpContainerSlice';\nimport { toAbsoluteUrl } from '_metronic/_helpers';\nimport _ from 'lodash';\nimport isContainerCutOff from 'helper/isContainerCutOff';\nimport getCurrentContainer from 'app/modules/Warehouse/selector/LoadUpContainer/getCurrentContainer';\nimport useTrans from 'helper/useTrans';\n\nimport SVG from 'react-inlinesvg';\nimport { Card, CardBody } from '_metronic/_partials/controls';\nimport ProgressBar from 'react-bootstrap/ProgressBar'\nimport Select from 'react-select';\nimport Button from 'app/components/Button';\n\nimport './index.scss';\n\nconst makeOption = (c) => ({ value: c.id, label: `Invoice ${c.id}` });\n\nconst M3toCM3 = 1;\nconst TANtoKG = 1000;\n\nconst ContainerStatus = props => {\n\n    const listInvoices = useSelector(state => state.warehouse.loadUpContainer.listInvoices.data);\n    const currentContainer = useSelector(getCurrentContainer);\n    const dispatch = useDispatch();\n    const [trans] = useTrans();\n\n    useEffect(() => {\n        if (listInvoices.length && !currentContainer) {\n            dispatch(loadUpContainerAction.setCurrentContainer(listInvoices[0]));\n        }\n    }, [listInvoices, currentContainer]); // eslint-disable-line\n\n    const currentVolumeInContainer = useMemo(() => {\n        if (!currentContainer) return 0;\n\n        return currentContainer.in_pickers.reduce((prevV, curV) => {\n            return prevV + curV.volume || 0;\n        }, 0);\n    }, [currentContainer]); // eslint-disable-line\n\n    const currentWeightInContainer = useMemo(() => {\n        if (!currentContainer) return 0;\n\n        return currentContainer.in_pickers.reduce((prevV, curV) => {\n            return prevV + (curV?.box?.weight_per_box || 0) * curV.quantity;\n        }, 0);\n    }, [currentContainer]); // eslint-disable-line\n\n    const handleReset = () => {\n        dispatch(loadUpContainerAction.resetSlice());\n    }\n\n    const handleSelectContainer = ({ value }) => {\n\n        const selectedInvoice = _.find(listInvoices, ['id', value]);\n\n        if (selectedInvoice)\n            dispatch(loadUpContainerAction.setCurrentContainer(selectedInvoice));\n    }\n\n    const getValueSelect = useMemo(() => {\n        return currentContainer ? makeOption(currentContainer) : '';\n    }, [currentContainer]);\n\n    const handleCutOff = () => {\n        dispatch(cutOffContainer({ id: currentContainer.id }));\n    }\n\n    if (!listInvoices.length) return <></>;\n\n    return (\n        <Card className=\"container-status\">\n\n            <div className=\"container-status-head card-header\">\n                <div className=\"d-flex align-items-center\">\n                    <div className=\"select-current-container\">\n                        <Select\n                            value={getValueSelect}\n                            options={listInvoices.map(v => makeOption(v))}\n                            onChange={handleSelectContainer}\n                        />\n                    </div>\n                    {!isContainerCutOff(currentContainer) && (\n                        <Button type=\"primary\" className=\"ml-3\" need={['invoices.update']} onClick={handleCutOff}>\n                            {trans(\"warehouse.container.close_container\")}\n                        </Button>\n                    )}\n                </div>\n\n                <button className=\"btn btn-link\" onClick={handleReset}>\n                    <SVG\n                        src={toAbsoluteUrl(\n                            '/media/svg/icons/Media/Shuffle.svg'\n                        )}\n                        className=\"mr-3\"\n                    ></SVG>\n                    {trans(\"warehouse.container.reset_data\")}\n                </button>\n            </div>\n\n            <CardBody>\n                <div className=\"point-data\">\n                    <div className=\"invoice-data\">\n                        <div className=\"d-flex\">\n                            <div className=\"progress-section-title\">{trans(\"warehouse.container.theoretical_volume\")}: </div>\n                            <div className=\"invoice-volume invoice-value\">{formatNumber(currentContainer?.volume)}</div>\n                        </div>\n\n                        <div className=\"d-flex\">\n                            <div className=\"progress-section-title\">{trans(\"warehouse.container.theoretical_weight\")}: </div>\n                            <div className=\"invoice-weight invoice-value\">{formatNumber(currentContainer?.weight)}</div>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"container-status-progress\">\n                    <div className=\"progress-section\">\n                        <div className=\"progress-section-title mt-5\">{trans(\"warehouse.container.current_volume\")}: </div>\n                        <div className=\"status-percent\">\n                            <ProgressBar\n                                animated\n                                max={currentContainer?.type?.volume * M3toCM3}\n                                now={currentVolumeInContainer}\n                                label={<div className=\"progress-lable\">{formatNumber(currentVolumeInContainer)} / {formatNumber(currentContainer?.type?.volume * M3toCM3)}</div>}\n                                variant=\"primary\"\n                            />\n                        </div>\n                    </div>\n\n                    <div className=\"progress-section\">\n                        <div className=\"progress-section-title mt-5\">{trans(\"warehouse.container.current_weight\")}: </div>\n                        <div className=\"status-percent\">\n                            <ProgressBar\n                                animated\n                                max={currentContainer?.type?.weight * TANtoKG}\n                                now={currentWeightInContainer}\n                                label={<div className=\"progress-lable\">{formatNumber(currentWeightInContainer)} / {formatNumber(currentContainer?.type?.weight * TANtoKG)}</div>}\n                                variant=\"primary\"\n                            />\n                        </div>\n                    </div>\n                </div>\n            </CardBody>\n        </Card>\n    );\n};\n\nContainerStatus.propTypes = {\n\n};\n\nexport default ContainerStatus;","import React from 'react';\n\nimport Layout from 'app/modules/Warehouse/components/Layout';\nimport TargetSection from './TargetSection';\nimport ProcessSection from './ProcessSection';\nimport ContainerStatus from './ContainerStatus';\nimport useTrans from 'helper/useTrans';\n\nconst LoadUpContainer = props => {\n\n    const [trans] = useTrans();\n\n    return (\n        <Layout title={trans(\"warehouse.load_up_container.title\")}>\n            <div className=\"load-up-container\">\n                <ContainerStatus />\n                <div className=\"row\">\n                    <div className=\"col-lg-4 col-md-5 col-sm-12\">\n                        <TargetSection />\n                    </div>\n                    <div className=\"col-lg-8 col-md-7 col-sm-12\">\n                        <ProcessSection />\n                    </div>\n                </div>\n            </div>\n        </Layout>\n    );\n};\n\nLoadUpContainer.propTypes = {\n\n};\n\nexport default LoadUpContainer;","import React, { useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport useTrans from 'helper/useTrans';\n\nimport { isSKUCode, useScanBarcode } from 'helper/useScanBarcode';\nimport { pickBox } from 'app/modules/Warehouse/warehouse-redux/outBoundPickerSlice';\n\nimport './index.scss';\nimport usePermission from 'app/components/NeedPermission/usePermission';\n\nconst InputAddData = props => {\n\n    const inputRef = useRef();\n    const dispatch = useDispatch();\n    const goodsDelivery = useSelector(state => state.warehouse.outBoundPicker.goodsDelivery.data);\n    const [trans] = useTrans();\n    const canOutboundVN = usePermission(['outbound-pickers.create'])\n\n    useScanBarcode({\n        condition: () => canOutboundVN,\n        onEnter: (v) => handleScanEnter(v),\n    });\n\n    const handleScanEnter = (value) => {\n\n        setTimeout(() => {\n            inputRef.current.value = '';\n        }, 100);\n\n        if (!value || !value?.length) return;\n        if (!goodsDelivery) return;\n\n        if (isSKUCode(value)) dispatch(pickBox(value));\n    }\n\n    const handleEnterInput = (e) => {\n        if (e.charCode === 13) {\n            handleScanEnter(e.target.value);\n        }\n    }\n\n    return (\n        <div className=\"input-add-data\">\n            <input\n                className=\"form-control\"\n                placeholder={trans(\"warehouse.sku.title\") }\n                ref={inputRef}\n                onKeyPress={handleEnterInput}\n                disabled={!goodsDelivery || !canOutboundVN}\n            />\n        </div>\n    );\n};\n\nInputAddData.propTypes = {\n\n};\n\nexport default InputAddData;","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport warehouseApi from 'apis/warehouse';\nimport useTrans from 'helper/useTrans';\nimport { outBoundPickerAction } from 'app/modules/Warehouse/warehouse-redux/outBoundPickerSlice';\n\nimport { Card } from '_metronic/_partials/controls';\nimport InputAddData from './InputAddData';\nimport IOMessage from 'app/modules/Warehouse/components/WarehouseIO/IOMessages';\nimport { dialog } from 'app/components/DialogNotify';\n\nimport './index.scss';\n\nconst ProcessSection = props => {\n    const message = useSelector(state => state.warehouse.outBoundPicker.process.message);\n    const dispatch = useDispatch();\n    const [trans] = useTrans();\n\n    const handleDeleteMessage = (message) => {\n        warehouseApi.outBoundPicker.delete(message.id)\n            .then(() => {\n                dialog.success(trans(\"warehouse.io.delete.success\"));\n                dispatch(outBoundPickerAction.removeBoxByPickerId(message.id));\n            })\n            .catch(() => {\n                dialog.error(trans(\"warehouse.io.delete.failure\"));\n            })\n    }\n\n    const handleEditQuantity = ({ newQuantity, ...message }) => {\n        if (Number(newQuantity) > 0)\n            warehouseApi.outBoundPicker.update(message.id, { quantity: Number(newQuantity) })\n                .then(() => {\n                    dialog.success(trans(\"warehouse.io.update.success\"));\n                    dispatch(outBoundPickerAction.updateBoxQuantity({ newQuantity: Number(newQuantity), ...message }));\n                })\n                .catch(() => {\n                    dialog.error(trans(\"warehouse.io.update.failure\"));\n                })\n    }\n\n    return (\n        <Card className=\"process-section\">\n            <InputAddData />\n            <IOMessage\n                messages={message}\n                onDelete={handleDeleteMessage}\n                onEdit={handleEditQuantity}\n                permissions={{\n                    update: ['outbound-pickers.update'],\n                    delete: ['outbound-pickers.delete']\n                }}\n            />\n        </Card>\n    );\n};\n\nProcessSection.propTypes = {\n\n};\n\nexport default ProcessSection;","const { createSelector } = require(\"reselect\");\n\nconst getGoodsDelivery = state => state.warehouse.outBoundPicker.goodsDelivery.data;\n\nconst getTargetBoxes = createSelector(\n    [getGoodsDelivery],\n    (goodsDelivery) => {\n        let targetBoxes = {};\n\n        if (!goodsDelivery) return targetBoxes;\n\n        targetBoxes = goodsDelivery.pivot_boxes.reduce((prevV, curV) => {\n            if(prevV[curV.box_lading_bill.owning_box.box_id]) prevV[curV.box_lading_bill.owning_box.box_id].quantity += curV.quantity;\n            else prevV[curV.box_lading_bill.owning_box.box_id] = {\n                quantity: curV.quantity,\n                count: 0\n            }\n\n            return prevV;\n        }, {...targetBoxes});\n\n        targetBoxes = goodsDelivery.out_bound_pickers.reduce((prevV, curV) => {\n            if(prevV[curV.box_id]) prevV[curV.box_id].count += curV.quantity;\n            else prevV[curV.box_id] = {\n                count: curV.quantity,\n                quantity: 0\n            }\n\n            return prevV;\n        }, {...targetBoxes});\n\n        return targetBoxes;\n    }\n)\n\nexport default getTargetBoxes;","import React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { fetchGoodsDeliveries } from 'app/modules/Warehouse/warehouse-redux/goodsDeliverySlice';\nimport useTrans from 'helper/useTrans';\n\nimport TMNBaseSelect from '../BaseSelect';\n\nimport './index.scss';\n\nconst SelectGoodsDelivery = ({ onChange, value, showLabel = true, ...props }) => {\n    const goodsDeliveries = useSelector(state => state.warehouse.goodsDelivery.list.data);\n    const loading = useSelector(state => state.warehouse.goodsDelivery.list.loading);\n    const dispatch = useDispatch();\n    const [trans] = useTrans();\n\n    const makeOption = useCallback((i) => ({\n        value: i.id,\n        label: trans(\"warehouse.goods_delivery.id\", { id: i.id })\n    }), [trans]);\n\n    const options = goodsDeliveries?.map(item => makeOption(item));\n\n    const handleSelect = option => {\n        onChange && onChange(option.value);\n    };\n\n    const fetchData = (params) => {\n        dispatch(fetchGoodsDeliveries(params));\n    }\n\n    return (\n        <TMNBaseSelect\n            value={value}\n            label={showLabel && trans(\"warehouse.goods_delivery.title\")}\n            className=\"select-goods-delivery\"\n            placeholder={trans(\"warehouse.goods_delivery.find\")}\n            options={options}\n            onChange={handleSelect}\n            loading={loading}\n            onFetchData={fetchData}\n            {...props}\n        />\n    );\n};\n\nSelectGoodsDelivery.propTypes = {\n    onChange: PropTypes.func,\n    value: PropTypes.any,\n    showLabel: PropTypes.bool\n};\n\nexport default SelectGoodsDelivery;","import React from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { pickGoodsDelivery } from 'app/modules/Warehouse/warehouse-redux/outBoundPickerSlice';\n\nimport SelectGoodsDelivery from 'app/components/Select/SelectGoodsDelivery';\n\nconst InputAddGoodsDelivery = props => {\n\n    const dispatch = useDispatch();\n\n    const handleSelectGoodsDelivery = (v) => {\n        dispatch(pickGoodsDelivery({ id: v }));\n    }\n\n    return (\n        <SelectGoodsDelivery onChange={handleSelectGoodsDelivery} showLabel={false} />\n    );\n};\n\nInputAddGoodsDelivery.propTypes = {\n\n};\n\nexport default InputAddGoodsDelivery;","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport useTrans from 'helper/useTrans';\nimport getTargetBoxes from 'app/modules/Warehouse/selector/outBoundPicker/targetBoxesSelector';\n\nimport { Card } from '_metronic/_partials/controls';\nimport InputAddGoodsDelivery from './InputAddGoodsDelivery';\nimport TargetBoxes from 'app/modules/Warehouse/components/WarehouseIO/TargetBoxes';\n\nimport './index.scss';\n\nconst TargetSection = props => {\n    const targetBoxes = useSelector(getTargetBoxes);\n    const goodsDelivery = useSelector(state => state.warehouse.outBoundPicker.goodsDelivery.data);\n    const [trans] = useTrans();\n\n    return (\n        <Card className=\"target-section\">\n            <InputAddGoodsDelivery />\n            <TargetBoxes\n                targetBoxes={targetBoxes}\n                currentContainer={goodsDelivery}\n                labelPrefix={trans(\"warehouse.goods_delivery.title\")}\n            />\n        </Card>\n    );\n};\n\nTargetSection.propTypes = {\n\n};\n\nexport default TargetSection;","import useTrans from 'helper/useTrans';\nimport React from 'react';\nimport Layout from '../../components/Layout';\nimport ProcessSection from './ProcessSection';\nimport TargetSection from './TargetSection';\n\nconst OutBoundPicker = props => {\n\n    const [trans] = useTrans();\n\n    return (\n        <Layout title={trans(\"MENU.WAREHOUSE.OUTBOUND_PICKER\")}>\n            <div className=\"outbound-picker\">\n                <div className=\"row\">\n                    <div className=\"col-lg-4 col-md-5 col-sm-12\">\n                        <TargetSection />\n                    </div>\n                    <div className=\"col-lg-8 col-md-7 col-sm-12\">\n                        <ProcessSection />\n                    </div>\n                </div>\n            </div>\n        </Layout>\n    );\n};\n\nOutBoundPicker.propTypes = {\n    \n};\n\nexport default OutBoundPicker;","import React from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport ListSFAForInbound from '../../components/List/ListSFAForInbound';\n\nconst TableSFAs = props => {\n    const history = useHistory();\n\n    const gotoDetail = (sfaID) => {\n        history.push(`/warehouse/inbound/step-4/${sfaID}`)\n    }\n\n    return (\n        <ListSFAForInbound onViewEdit={gotoDetail} type=\"box\" />\n    );\n};\n\nTableSFAs.propTypes = {\n\n};\n\nexport default TableSFAs;","import React from 'react';\nimport Layout from '../../components/Layout';\nimport TableSFAs from './TableSFAs';\n\nconst PackPage = props => {\n    return (\n        <Layout title=\"Đóng gói\">\n            <TableSFAs />\n        </Layout>\n    );\n};\n\nPackPage.propTypes = {\n    \n};\n\nexport default PackPage;","import React, { useMemo, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport warehouseApi from 'apis/warehouse';\nimport moment from 'moment';\n\nimport Button from 'app/components/Button';\nimport FormCreateSFA from 'app/modules/Warehouse/components/Form/FormCreateSFA';\nimport { dialog } from 'app/components/DialogNotify';\nimport handleApiError from 'helper/handleApiError';\nimport { fetchSFA } from 'app/modules/Warehouse/warehouse-redux/sfaSlice';\nimport useTrans from 'helper/useTrans';\nimport convertObjectDateToString from 'helper/convertObjectDateToString';\n\nconst EditSFA = ({ closeSection }) => {\n\n    const { data: sfa } = useSelector(state => state.warehouse.sfa.detail);\n    const [loading, setLoading] = useState(false);\n    const dispatch = useDispatch();\n    const [trans] = useTrans();\n    const formRef = useRef();\n\n    const handleCOUSFA = (values, form) => {\n        setLoading(true);\n\n        const body = convertObjectDateToString(values);\n\n        warehouseApi.SFA.update(sfa.id, body)\n            .then((res) => {\n                dialog.success(trans(\"warehouse.sfa.update.success\"));\n                closeSection && closeSection();\n                dispatch(fetchSFA({ id: res.id, with: 'boxes;agency;receipts' }))\n            })\n            .catch(err => {\n                console.error(err, 'err')\n                dialog.error(trans(\"warehouse.sfa.update.failure\"));\n\n                handleApiError(err, form);\n            })\n            .finally(() => {\n                setLoading(false);\n            });\n    }\n\n    const triggerSubmit = () => {\n        formRef.current.submitForm();\n    }\n\n    const initialValues = useMemo(() => {\n        if(!sfa) return undefined;\n\n        return {\n            ...sfa, \n            arrival_date: moment(sfa.arrival_date, 'DD-MM-YYYY HH:mm').toDate()\n        }\n    }, [sfa]);\n\n    return (\n\n        <>\n            <FormCreateSFA\n                formItemClass={'col-lg-4 col-md-6 col-sm-12'}\n                editMode\n                onSubmit={handleCOUSFA}\n                initialValues={initialValues}\n                ref={formRef}\n            />\n\n            <div className=\"step-actions text-right\">\n                <Button\n                    type=\"secondary\"\n                    onClick={closeSection}\n                    loading={loading}\n                    className=\"btn-large\"\n                >\n                    {trans(\"common.cancel\")}\n                </Button>\n\n                <Button\n                    type=\"primary\"\n                    onClick={triggerSubmit}\n                    loading={loading}\n                    className=\"btn-large ml-3\"\n                    htmlType=\"submit\"\n                    need={['sfas.update']}\n                >\n                    {trans(\"common.save\")}\n                </Button>\n            </div>\n        </>\n    );\n};\n\nEditSFA.propTypes = {\n    closeSection: PropTypes.func\n};\n\nexport default EditSFA;","import React from 'react';\n\nimport { Dropdown } from 'react-bootstrap';\n\nconst DropdownButton = ({ children, title, ...props }) => {\n    return (\n        <Dropdown className=\"custom-dropdown\" {...props}>\n            <Dropdown.Toggle as={\"span\"} className=\"custom-dropdown-toggle cursor-pointer\">\n                {title}\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n                {children}\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n};\n\nDropdownButton.Item = Dropdown.Item;\n\nexport default DropdownButton;","import React from 'react';\n\nimport { Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport FormStatus from '../FormStatus';\nimport useTrans from 'helper/useTrans';\nimport Button from 'app/components/Button';\n\nexport const receiptSchema = Yup.object().shape({\n    file: Yup.object().required('Required'),\n});\n\nconst FormAddReceipt = ({ initialValues = { file: '' }, onSubmit, closeSection }) => {\n\n    const [trans] = useTrans();\n\n    return (\n        <Formik\n            initialValues={initialValues}\n            onSubmit={onSubmit}\n        >\n            {({ handleSubmit, setFieldValue, values }) => (\n                <>\n                    <Form className=\"form form-label-right form-add-receipt\">\n\n                        <div className=\"form-group\">\n                            <label htmlFor=\"\">{trans(\"warehouse.receipt.file\")}</label>\n                            <div className=\"custom-file\">\n                                <input name=\"file\" type=\"file\" className=\"custom-file-input\" id=\"customFile\" onChange={(e) => setFieldValue(\"file\", e.currentTarget.files[0])} />\n                                <label className=\"custom-file-label\" htmlFor=\"customFile\">{values?.file?.name || trans(\"common.choose_file\")}</label>\n                            </div>\n                        </div>\n\n                        <FormStatus />\n                    </Form >\n\n                    <div className=\"form-actions\">\n                        <button className=\"btn btn-secondary\" onClick={closeSection}>{trans(\"common.close\")}</button>\n                        <Button\n                            type=\"primary\"\n                            onClick={handleSubmit}\n                            need={['receipts.create']}\n                            className=\"ml-3\"\n                        >\n                            {trans(\"common.save\")}\n                        </Button>\n                    </div>\n                </>\n            )}\n        </Formik>\n\n    );\n};\n\nexport default FormAddReceipt;\n","import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport useCRUDReceipt from './useCRUDReceipt';\nimport { fetchSFA } from 'app/modules/Warehouse/warehouse-redux/sfaSlice';\n\nimport FormAddReceipt from 'app/modules/Warehouse/components/Form/FormAddReceipt';\nimport Loading from 'app/components/Loading';\nimport EmptyData from 'app/components/EmptyData';\nimport {\n    Button,\n} from '@material-ui/core';\nimport ModalConfirm from 'app/modules/Warehouse/components/ModalConfirm';\n\nimport './EditReceipt.scss';\nimport useTrans from 'helper/useTrans';\nimport NeedPermission from 'app/components/NeedPermission';\n\nconst EditReceipt = ({ closeSection }) => {\n\n    const sfa = useSelector(state => state.warehouse.sfa.detail.data);\n    const dispatch = useDispatch();\n    const [loading, createReceipt, deleteReceipt] = useCRUDReceipt({\n        onRefresh: () => {\n            dispatch(fetchSFA({ id: sfa.id, with: 'boxes;agency;receipts' }))\n        }\n    });\n    const modalConfirmRef = useRef();\n    const [trans] = useTrans();\n\n    const handleCreateReceipt = (values, form) => {\n\n        if (!values.file) return;\n\n        createReceipt({ sfaId: sfa.id, file: values.file }, form);\n    }\n\n    const handleDeleteReceipt = ({ receiptId }) => {\n        deleteReceipt(receiptId);\n    }\n\n    const confirmDeleteReceipt = (receipt) => {\n        modalConfirmRef.current.open({\n            title: trans(\"warehouse.receipt.confirm_delete\"),\n            receiptId: receipt.id,\n        });\n    }\n\n    const handleDownload = (receipt) => {\n        window.open(`${process.env.REACT_APP_API_URL_WAREHOUSE}/files/${receipt.path_file}`, '_blank');\n    }\n\n    return (\n        <div className=\"edit-receipt\">\n            <ModalConfirm ref={modalConfirmRef} onOk={handleDeleteReceipt} />\n            <div className=\"d-flex\">\n                <div className=\"form-edit-receipt position-relative\">\n                    {loading && <Loading local />}\n                    <FormAddReceipt initialValues={{ file: '' }} onSubmit={handleCreateReceipt} closeSection={closeSection} />\n                </div>\n\n                <div className=\"receipt-list\">\n                    {!sfa?.receipts?.length && <EmptyData emptyText=\"Không có receipt nào.\" />}\n                    {sfa && (sfa.receipts || []).map((receipt, rIdx) => (\n                        <div className=\"receipt-item\" key={`receipt-item-${rIdx}`}>\n                            <div className=\"receipt-info\">\n                                <div className=\"receipt-path\">{trans(\"common.file_path\")}: <span className=\"font-weight-bold\">{receipt.path_file}</span></div>\n                                <div className=\"receipt-time-create\">{trans(\"common.created_at\")}: <span className=\"font-weight-bold\">{receipt.created_at}</span></div>\n                            </div>\n\n                            <div className=\"receipt-actions\">\n                                <NeedPermission need={[\"receipts.index\"]}>\n                                    <Button\n                                        color=\"primary\"\n                                        size=\"small\"\n                                        onClick={() => handleDownload(receipt)}\n                                    >\n                                        {trans(\"common.download\")}\n                                    </Button>\n                                </NeedPermission>\n\n                                <NeedPermission need={[\"receipts.delete\"]}>\n                                    <Button\n                                        size=\"small\"\n                                        onClick={() => confirmDeleteReceipt(receipt)}\n                                    >\n                                        {trans(\"warehouse.receipt.delete.title\")}\n                                    </Button>\n                                </NeedPermission>\n                            </div>\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nEditReceipt.propTypes = {\n    closeSection: PropTypes.func\n};\n\nexport default EditReceipt;","import { useState } from \"react\";\nimport warehouseApi from 'apis/warehouse';\nimport { dialog } from \"app/components/DialogNotify\";\nimport handleApiError from \"helper/handleApiError\";\nimport useTrans from \"helper/useTrans\";\n\nexport default function useCRUDReceipt({onRefresh}) {\n    const [loading, setLoading] = useState();\n    const [trans] = useTrans();\n\n    const createReceipt = ({ sfaId, file }, form) => {\n\n        setLoading(true);\n        let formData = new FormData();\n\n        formData.set('file', file, file.name);\n\n        return warehouseApi.receipt.create(sfaId, formData)\n            .then((res) => {\n                dialog.success(trans(\"warehouse.receipt.create.success\"));\n\n                onRefresh && onRefresh();\n\n                form.resetForm();\n\n                return res;\n            })\n            .catch(err => {\n                dialog.error(trans(\"warehouse.receipt.create.failure\"));\n\n                handleApiError(err, form);\n            })\n            .finally(() => {\n                setLoading(false)\n            });\n    }\n\n    const deleteReceipt = (receiptId) => {\n        setLoading(true);\n        return warehouseApi.receipt.delete(receiptId)\n        .then((res) => {\n            dialog.success(trans(\"warehouse.receipt.delete.success\"));\n            \n            onRefresh && onRefresh();\n\n            return res;\n        })\n        .catch(() => {\n            dialog.error(trans(\"warehouse.receipt.delete.failure\"));\n        })\n        .finally(() => {\n            setLoading(false);\n        });\n    }\n\n    return [loading, createReceipt, deleteReceipt];\n}","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport useTrans from 'helper/useTrans';\nimport Barcode from 'react-barcode';\n\nconst ShowTrackingBarcode = ({ closeSection }) => {\n\n    const sfa = useSelector(state => state.warehouse.sfa.detail.data);\n    const [trans] = useTrans();\n\n    return (\n        <div className=\"show-tracking-barcode\">\n            <div className=\"m-5 d-flex align-items-center justify-content-center\">\n                <Barcode value={sfa?.tracking || \"0\"} textPosition=\"top\" height={60} />\n            </div>\n\n            <div className=\"mt-5 text-right\">\n                <button className=\"btn btn-secondary\" onClick={closeSection}>\n                    {trans(\"common.cancel\")}\n                </button>\n            </div>\n        </div>\n    );\n};\n\nShowTrackingBarcode.propTypes = {\n\n};\n\nexport default ShowTrackingBarcode;","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\n\nimport clsx from 'clsx';\nimport _ from 'lodash';\nimport { startPrinter } from 'app/components/PrinterModal';\nimport { getTemplateData } from 'helper/printerTemplateData';\nimport useTrans from 'helper/useTrans';\nimport { toAbsoluteUrl } from '_metronic/_helpers';\n\nimport SVG from 'react-inlinesvg';\nimport EditSFA from './EditSFA';\nimport DropdownButton from 'app/components/DropdownButton';\nimport EditReceipt from './EditReceipt';\nimport ShowTrackingBarcode from './ShowTrackingBarcode';\n\nimport './CurrentSFA.scss';\nimport NeedPermission from 'app/components/NeedPermission';\n\nconst CurrentSFA = props => {\n\n    const [showExtraPanel, setShowExtraPanel] = useState(false);\n    const [extraPanelContent, setExtraPanelContent] = useState();\n    const { data: sfa } = useSelector(state => state.warehouse.sfa.detail);\n    const agencyList = useSelector(state => state.warehouse.agency.list);\n    const params = useParams();\n    const [trans] = useTrans();\n\n    const toggleFormEdit = () => {\n        setExtraPanelContent('form-edit');\n\n        if (showExtraPanel) {\n            if (extraPanelContent === 'form-edit') setShowExtraPanel(false);\n        } else {\n            setShowExtraPanel(true);\n        }\n    }\n\n    const toggleReceiptEdit = () => {\n        setExtraPanelContent('receipt');\n\n        if (showExtraPanel) {\n            if (extraPanelContent === 'receipt') setShowExtraPanel(false);\n        } else {\n            setShowExtraPanel(true);\n        }\n    }\n\n    const toggleTrackingBarcode = () => {\n        setExtraPanelContent('tracking-barcode');\n\n        if (showExtraPanel) {\n            if (extraPanelContent === 'tracking-barcode') setShowExtraPanel(false);\n        } else {\n            setShowExtraPanel(true);\n        }\n    }\n\n    const rePrinterSFA = () => {\n        const matchedAgency = _.find(agencyList, ({ id }) => id == sfa.agency_id); // eslint-disable-line\n\n        startPrinter(getTemplateData('SFA', {\n            ...sfa,\n            sfaId: sfa.id,\n            region: matchedAgency?.name || 'Tokyo',\n        }));\n    }\n\n    const rePrinterTracking = () => {\n        startPrinter(getTemplateData('TRACKING', {\n            tracking: sfa.tracking,\n            quantity: 2,\n            sfaQuantity: sfa.quantity\n        }));\n    }\n\n    if (!params?.sfa_id) return <></>;\n\n    return (\n        <div className=\"current-sfa-container\">\n            <div className=\"d-flex align-items-center\">\n                <div className=\"current-sfa position-relative\">\n                    <div className=\"current-sfa-id\">{sfa?.id ? `${trans(\"warehouse.sfa.title\")}: ${sfa?.id}` : ''}</div>\n                    <div className=\"current-sfa-tracking\">{sfa?.tracking ? `${trans(\"warehouse.tracking.title\")}: ${sfa?.tracking}` : ''}</div>\n                    <div className=\"current-sfa-quantity\">{sfa?.quantity ? `${trans(\"common.quantity\")}: ${sfa?.quantity}` : ''}</div>\n                    <div className=\"current-sfa-created-at\">{sfa?.created_at ? `${trans(\"common.created_at\")}: ${sfa?.created_at}` : ''}</div>\n                </div>\n\n                <div className=\"action-edit-sfa\">\n                    <DropdownButton title={(\n                        <SVG\n                            src={toAbsoluteUrl(\n                                '/media/svg/icons/Text/Menu.svg'\n                            )}\n                        ></SVG>\n                    )} className=\"svg-icon svg-icon-primary svg-icon-2x text-primary\">\n\n                        <DropdownButton.Item onClick={toggleTrackingBarcode}>\n                            <div className=\"d-flex align-items-center\">\n                                <span className=\"svg-icon svg-icon-primary mr-3\">\n                                    <SVG\n                                        src={toAbsoluteUrl(\n                                            '/media/svg/icons/Shopping/Barcode.svg'\n                                        )}\n                                    ></SVG>\n                                </span>\n\n                                <span>{trans(\"warehouse.tracking.id\")}</span>\n                            </div>\n                        </DropdownButton.Item>\n\n                        {!!sfa && (\n                            <>\n                                <NeedPermission need={\"sfas.update\"}>\n                                    <DropdownButton.Item onClick={toggleFormEdit}>\n                                        <div className=\"d-flex align-items-center\">\n                                            <span className=\"svg-icon svg-icon-primary mr-3\">\n                                                <SVG\n                                                    src={toAbsoluteUrl(\n                                                        '/media/svg/icons/Design/Edit.svg'\n                                                    )}\n                                                ></SVG>\n                                            </span>\n\n                                            <span>{trans(\"warehouse.sfa.edit_info\")}</span>\n                                        </div>\n                                    </DropdownButton.Item>\n                                </NeedPermission>\n\n                                <NeedPermission need={['receipts.create', 'receipts.update', 'receipts.delete', 'receipt.index']}>\n                                    <DropdownButton.Item onClick={toggleReceiptEdit}>\n                                        <div className=\"d-flex align-items-center\">\n                                            <span className=\"svg-icon svg-icon-primary mr-3\">\n                                                <SVG\n                                                    src={toAbsoluteUrl(\n                                                        '/media/svg/icons/Files/Uploaded-file.svg'\n                                                    )}\n                                                ></SVG>\n                                            </span>\n\n                                            <span>{trans(\"warehouse.receipt.save\")}</span>\n                                        </div>\n                                    </DropdownButton.Item>\n                                </NeedPermission>\n                            </>\n                        )}\n                        <DropdownButton.Item onClick={rePrinterSFA}>\n                            <div className=\"d-flex align-items-center\">\n                                <span className=\"svg-icon svg-icon-success mr-3\">\n                                    <SVG\n                                        src={toAbsoluteUrl(\n                                            '/media/svg/icons/Devices/Printer.svg'\n                                        )}\n                                    ></SVG>\n                                </span>\n\n                                <span>{trans(\"warehouse.sfa.print_label\")}</span>\n                            </div>\n                        </DropdownButton.Item>\n                        <DropdownButton.Item onClick={rePrinterTracking}>\n                            <div className=\"d-flex align-items-center\">\n                                <span className=\"svg-icon svg-icon-primary mr-3\">\n                                    <SVG\n                                        src={toAbsoluteUrl(\n                                            '/media/svg/icons/Devices/Printer.svg'\n                                        )}\n                                    ></SVG>\n                                </span>\n\n                                <span>{trans(\"warehouse.tracking.print_label\")}</span>\n                            </div>\n                        </DropdownButton.Item>\n                    </DropdownButton>\n                </div>\n            </div>\n\n            <div className={clsx(\"form-edit-sfa-section\", showExtraPanel ? 'show' : 'hide')}>\n                <div className=\"form-edit-sfa-wrapper\">\n                    {extraPanelContent === 'form-edit' && (<EditSFA closeSection={toggleFormEdit} />)}\n                    {extraPanelContent === 'receipt' && (<EditReceipt closeSection={toggleReceiptEdit} />)}\n                    {extraPanelContent === 'tracking-barcode' && (<ShowTrackingBarcode closeSection={toggleTrackingBarcode} />)}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nCurrentSFA.propTypes = {\n\n};\n\nexport default CurrentSFA;","import React, { useMemo } from 'react';\nimport { useLocation, useHistory, useParams } from 'react-router-dom';\nimport useTrans from 'helper/useTrans';\nimport { useSelector } from 'react-redux';\n\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport { Card, CardBody, CardHeader } from '_metronic/_partials/controls';\nimport CurrentSFA from './CurrentSFA';\n\nimport './index.scss';\n\nconst PerformStep = props => {\n\n    const steps = useSelector(state => state.warehouse.performEntry.steps);\n\n    const location = useLocation();\n    const history = useHistory();\n    const params = useParams();\n    const [trans] = useTrans();\n\n    const activeStep = useMemo(() => {\n        const matchedStep = location.pathname.match(/step-(\\d)/g);\n\n        if (matchedStep) return Number(matchedStep[0].split(\"\").pop()) - 1;\n\n        return 0;\n    }, [location]);\n\n    const gotoStep = (idx) => {\n\n        if (idx === activeStep + 1) return;\n\n        if (idx > 1 && params?.sfa_id) {\n            history.push(`/warehouse/inbound/step-${idx}/${params?.sfa_id}`)\n        }\n    }\n\n    return (\n        <Card className=\"perform-entry-steps\">\n            <CardHeader title={trans(\"warehouse.warehouse\")}></CardHeader>\n            <CardBody>\n                <Stepper alternativeLabel activeStep={activeStep}>\n                    {steps.map((label, index) => (\n                        <Step key={label} onClick={() => gotoStep(index + 1)}>\n                            <StepLabel>{trans(label)}</StepLabel>\n                        </Step>\n                    ))}\n                </Stepper>\n\n                <CurrentSFA />\n            </CardBody>\n        </Card>\n    );\n};\n\nPerformStep.propTypes = {};\n\nexport default PerformStep;\n","import React, { useMemo, useRef, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport warehouseApi from 'apis/warehouse';\nimport handleApiError from 'helper/handleApiError';\nimport _ from 'lodash';\nimport useTrans from 'helper/useTrans';\nimport convertObjectDateToString from 'helper/convertObjectDateToString';\n\nimport { Card, CardBody, CardHeader } from '_metronic/_partials/controls';\nimport FormCreateSFA from 'app/modules/Warehouse/components/Form/FormCreateSFA';\nimport { dialog } from 'app/components/DialogNotify';\nimport Button from 'app/components/Button';\nimport PerformStep from '../PerformStep';\nimport { startPrinter } from 'app/components/PrinterModal';\nimport { getTemplateData } from 'helper/printerTemplateData';\nimport Switch from '@material-ui/core/Switch';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\nimport './index.scss'\n\n/**\n * STEP 1: Create an SFA\n *\n * @param {*} props\n */\nconst CreateSFA = props => {\n    const [loading, setLoading] = useState(false);\n    const [isCallPrinterPrint, setIsCallPrinter] = useState(false);\n    const agencyList = useSelector(state => state.warehouse.agency.list);\n    const history = useHistory();\n    const [trans] = useTrans();\n    const formRef = useRef();\n\n    const handleCOUSFA = async (values, form) => {\n        setLoading(true);\n        await createSFA(values, form);\n\n        setLoading(false);\n    };\n\n    const createSFA = (values, form) => {\n        return warehouseApi.SFA.create(convertObjectDateToString(values))\n            .then(response => {\n                dialog.success(trans(\"warehouse.sfa.create.success\"));\n                if (isCallPrinterPrint) printAndGoNext(response);\n                else goToStep2(response);\n            })\n            .catch(err => {\n                dialog.error(trans(\"warehouse.sfa.create.failure\"));\n                handleApiError(err, form);\n            })\n    }\n\n    const initialValues = useMemo(\n        () => {\n            return {\n                tracking: '',\n                quantity: 1,\n                shipping_inside: 0,\n                coupon: '',\n                agency_id: agencyList?.[0]?.id,\n                arrival_date: new Date()\n            }\n        },\n        [agencyList]\n    );\n\n    const goToStep2 = (response) => {\n        history.push(`/warehouse/inbound/step-2/${response.id}`)\n    }\n\n    const printAndGoNext = (response) => {\n\n        let agency_id = response.agency_id;\n\n        const matchedAgency = _.find(agencyList, ({ id }) => id == agency_id); // eslint-disable-line\n\n        startPrinter(getTemplateData('SFA', { ...response, sfaId: response.id, region: matchedAgency?.name || 'Tokyo' }));\n        goToStep2(response);\n    }\n\n    const handleChangeSwitch = (e) => {\n        setIsCallPrinter(e.target.checked);\n    }\n\n    const triggerSubmit = () => {\n        formRef.current.submitForm();\n    }\n\n    return (\n        <>\n            <PerformStep />\n            <Card className=\"perform-step-page step-1\">\n                <CardHeader title={trans(\"warehouse.sfa.create.title\")}></CardHeader>\n                <CardBody>\n                    <div className=\"d-flex align-items-center justify-content-end\">\n                        <FormControlLabel\n                            control={<Switch\n                                checked={isCallPrinterPrint}\n                                onChange={handleChangeSwitch}\n                                color=\"primary\"\n                                name=\"checkedB\"\n                                inputProps={{ 'aria-label': 'primary checkbox' }}\n                            />}\n                            label={trans(\"warehouse.sfa.create.and_print_label\")}\n                        />\n\n                    </div>\n                    <div className=\"step-1-form\">\n                        <FormCreateSFA\n                            formItemClass={'col-lg-4 col-md-6 col-sm-12'}\n                            onSubmit={handleCOUSFA}\n                            initialValues={initialValues}\n                            ref={formRef}\n                        />\n\n                        <div className=\"step-actions text-right\">\n                            <Button\n                                type=\"primary\"\n                                onClick={triggerSubmit}\n                                loading={loading}\n                                className=\"btn-large\"\n                                htmlType=\"submit\"\n                                need={['sfas.create']}\n                            >\n                                {trans(\"common.create\")}\n                            </Button>\n                        </div>\n                    </div>\n                </CardBody>\n            </Card>\n        </>\n    );\n};\n\nCreateSFA.propTypes = {};\n\nexport default CreateSFA;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { useHistory } from 'react-router';\n\nimport useTrans from 'helper/useTrans';\n\nimport CustomModal from 'app/components/CustomModal';\nimport { Button, Modal } from 'react-bootstrap';\n\nimport './index.scss';\n\nconst ModalConfirmNextStep = () => {\n\n    const [show, setShow] = useState(false);\n    const [data, setData] = useState({});\n    const [trans] = useTrans();\n    const history = useHistory();\n\n    const openModal = useCallback((evt) => {\n        let { totalSku, quantity } = evt.detail;\n\n        setShow(true);\n        setData({ totalSku, quantity });\n    }, []);\n\n    useEffect(() => {\n        window.addEventListener('checking-box-return-wrong-quantity', openModal);\n\n        return () => {\n            window.removeEventListener('checking-box-return-wrong-quantity', openModal);\n        }\n    }, [openModal]);\n\n    const toggleModal = () => { setShow(!show) }\n\n    const handleOK = () => {\n        toggleModal();\n\n        history.goBack();\n    }\n\n    return (\n        <CustomModal\n            show={show}\n            onHide={toggleModal}\n            title={trans(\"warehouse.io.confirm.data.sfa_sku.wrong\")}\n            className=\"modal-confirm-next-step\"\n        >\n            <Modal.Body>\n                <div className=\"confirm-data\">\n                    <span className=\"text-danger\">{data?.totalSku}</span> / <span className=\"text-success\">{data?.quantity}</span>\n                </div>\n\n                <div className=\"actions\">\n                    <Button variant=\"secondary\" onClick={toggleModal}>{trans(\"common.continue\")}</Button>\n                    <Button variant=\"primary\" onClick={handleOK}>{trans(\"common.back\")}</Button>\n                </div>\n            </Modal.Body>\n        </CustomModal>\n    );\n};\n\nexport default ModalConfirmNextStep;\n\nexport const confirmStep2 = dataSend => {\n    var evt = new CustomEvent('checking-box-return-wrong-quantity', {\n        detail: dataSend,\n    });\n    window.dispatchEvent(evt);\n};","import React, { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useHistory, useRouteMatch } from 'react-router-dom';\n\nimport { toAbsoluteUrl } from '_metronic/_helpers';\nimport formatNumber from 'helper/formatNumber';\nimport _ from 'lodash';\nimport useTrans from 'helper/useTrans';\nimport { getTemplateData } from 'helper/printerTemplateData';\nimport { startPrinter } from 'app/components/PrinterModal';\n\nimport SVG from 'react-inlinesvg';\nimport Barcode from 'react-barcode';\nimport { Card, CardBody } from '_metronic/_partials/controls';\nimport { Button } from 'react-bootstrap';\n\nimport './index.scss';\nimport NeedPermission from 'app/components/NeedPermission';\n\nconst CurrentBox = props => {\n    const currentBox = useSelector(state => state.warehouse.box.detail.data);\n    const history = useHistory();\n    const match = useRouteMatch();\n    const agencyList = useSelector(state => state.warehouse.agency.list);\n    const [trans] = useTrans();\n\n    const handleEditBox = () => {\n        history.push(`${match.url}/edit-box`);\n    }\n\n    const handleCreateNewBox = () => {\n        history.push(`${match.url}/create-box`);\n    }\n\n    const rePrintSKU = () => {\n        let matchedAgency = _.find(agencyList, ({ id }) => id == currentBox?.sfa?.agency_id); // eslint-disable-line\n        let itemQuantity = totalItems;\n\n        startPrinter(getTemplateData('SKU', {\n            ...currentBox,\n            sku: currentBox?.id,\n            quantity: currentBox?.duplicate || 1,\n            tracking: currentBox?.sfa?.tracking,\n            sfaId: currentBox?.sfa?.id,\n            region: matchedAgency?.name || 'Tokyo',\n            itemQuantity,\n            createdDate: currentBox?.sfa?.created_at\n        }));\n    }\n\n    const totalItems = useMemo(() => {\n        if (!currentBox || !currentBox?.items?.length) return 0;\n\n        return currentBox.items.reduce((prevV, curV) => {\n            return prevV + curV.quantity;\n        }, 0);\n    }, [currentBox]);\n\n    return (\n        <Card className=\"current-box-section\">\n            <CardBody>\n                <div className=\"current-box-section__content\">\n                    <div className=\"info-section\">\n                        <div className=\"icon-section\">\n                            <SVG\n                                src={toAbsoluteUrl(\n                                    '/media/svg/icons/Shopping/Box4.svg'\n                                )}\n                            ></SVG>\n                            <div className=\"bar-code\">\n                                <Barcode value={currentBox?.id || \"0\"} textPosition=\"top\" height={40} />\n                            </div>\n                        </div>\n\n                        <div className=\"content-section\">\n                            <div className=\"box-info row\">\n                                <div className=\"col-lg-4 col-md-6 col-sm-6\">\n                                    <span className=\"title\">{trans(\"common.width\")}:</span> {formatNumber(currentBox?.width)}\n                                </div>\n                                <div className=\"col-lg-4 col-md-6 col-sm-6\">\n                                    <span className=\"title\">{trans(\"common.height\")}:</span> {formatNumber(currentBox?.height)}\n                                </div>\n                                <div className=\"col-lg-4 col-md-6 col-sm-6\">\n                                    <span className=\"title\">{trans(\"common.length\")}:</span> {formatNumber(currentBox?.length)}\n                                </div>\n                                <div className=\"col-lg-4 col-md-6 col-sm-6\">\n                                    <span className=\"title\">{trans(\"common.weight\")}:</span> {formatNumber(currentBox?.weight_per_box)}\n                                </div>\n                                <div className=\"col-lg-4 col-md-6 col-sm-6\">\n                                    <span className=\"title\">{trans(\"common.volume\")}:</span> {formatNumber(currentBox?.volume_per_box)}\n                                </div>\n                                <div className=\"col-lg-4 col-md-6 col-sm-6\">\n                                    <span className=\"title\">{trans(\"warehouse.box_item.quantity\")}:</span> {formatNumber(totalItems)}\n                                </div>\n                                <div className=\"col-lg-4 col-md-6 col-sm-6\">\n                                    <span className=\"title\">{trans(\"warehouse.sku.duplicate\")}:</span> {formatNumber(currentBox?.duplicate)}\n                                </div>\n                            </div>\n\n                            <div className=\"action-section d-flex align-items-center justify-content-end mt-3\">\n                                <Button variant=\"success\" className=\"btn-large\" onClick={rePrintSKU}>{trans(\"warehouse.sku.print_label\")}</Button>\n                                <NeedPermission need={'boxes.update'}>\n                                    <Button variant=\"primary\" className=\"ml-3 btn-large\" onClick={handleEditBox}>{trans(\"common.edit\")}</Button>\n                                </NeedPermission>\n                                <NeedPermission need={'boxes.create'}>\n                                    <Button variant=\"success\" className=\"ml-3 btn-large\" onClick={handleCreateNewBox}>{trans(\"GLOBAL.BUTTON.CREATE\")}</Button>\n                                </NeedPermission>\n                            </div>\n                        </div>\n                    </div>\n\n\n                </div>\n            </CardBody>\n        </Card >\n    );\n};\n\nCurrentBox.propTypes = {\n\n};\n\nexport default CurrentBox;","export default function playAudio(path) {\n    var audio = new Audio(path);\n    audio.play();\n}","import { useState } from 'react';\n\nimport productApi from 'apis/product-api/productApi';\nimport warehouseApi from 'apis/warehouse';\nimport { dialog } from 'app/components/DialogNotify';\nimport useTrans from 'helper/useTrans';\nimport { useDispatch, useSelector } from 'react-redux';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport { fetchBoxItemsOfCurrentBox, performEntryAction } from 'app/modules/Warehouse/warehouse-redux/performEntrySlice';\nimport playAudio from 'helper/playAudio';\nimport usePermission from 'app/components/NeedPermission/usePermission';\n\nexport default function useBoxItem(modalConfirmRef) {\n\n    const currentBox = useSelector(state => state.warehouse.box.detail.data);\n    const listBoxItems = useSelector(state => state.warehouse.performEntry.checking_goods.box_items);\n    const dispatch = useDispatch();\n    const [trans] = useTrans();\n    const [loading, setLoading] = useState(false);\n    const canAddBoxItem = usePermission(['box-items'])\n\n    const addBoxItem = (params) => {\n        dispatch(performEntryAction.addBoxItem(params))\n    }\n\n    const createOrUpdateBoxItem = (data, form) => {\n        playAudio(`${process.env.PUBLIC_URL}/media/audio/worf.mp3`);\n\n        addBoxItem(data, form);\n    }\n\n    const getProductInfo = (product_id) => {\n        return productApi.fetchProductById({ id: product_id, params: { with: 'package' } })\n            .catch(() => {\n                dialog.error(trans(\"warehouse.sku.box_item.not_found\", { id: product_id }));\n                playAudio(`${process.env.PUBLIC_URL}/media/audio/wrong-answer.mp3`)\n            });\n    }\n\n    const isBoxCanIncludeProduct = (product) => {\n        let productVolume = product?.package?.volume || 0;\n\n        if (currentBox.volume_per_box > productVolume) return true;\n\n        return false;\n    }\n\n    const handleAddBoxItem = (values, form) => {\n\n        if (!canAddBoxItem) {\n            playAudio(`${process.env.PUBLIC_URL}/media/audio/wrong-answer.mp3`)\n            dialog.error(trans(\"warehouse.box_item.create.need_permission\"));\n\n            return;\n        }\n\n        getProductInfo(values.product_id).then((product) => {\n\n            if (!product) return;\n\n            if (isBoxCanIncludeProduct(product)) createOrUpdateBoxItem({ ...values, box_id: currentBox.id, product }, form);\n            else {\n                playAudio(`${process.env.PUBLIC_URL}/media/audio/wrong-answer.mp3`)\n\n                modalConfirmRef.current.open({\n                    title: trans(\"warehouse.sku.confirm_box_over_volume.item\"),\n                    formData: { ...values, box_id: currentBox.id, product },\n                    form\n                });\n            }\n        })\n\n        setTimeout(() => {\n            form.resetForm();\n        }, 200);\n    }\n\n    const continueAddProduct = ({ formData, form }) => {\n        createOrUpdateBoxItem(formData, form)\n    }\n\n    const updateBoxItem = (key, rowIdx, newData) => {\n        if (!canAddBoxItem) {\n            playAudio(`${process.env.PUBLIC_URL}/media/audio/wrong-answer.mp3`)\n            dialog.error(trans(\"warehouse.box_item.update.need_permission\"));\n\n            return;\n        }\n\n        switch (key) {\n            case 'quantity':\n                dispatch(performEntryAction.updateQuantityBoxItem({ rowIdx, quantity: newData }))\n                break;\n\n            case 'expiry_date':\n                dispatch(performEntryAction.updateExpiryDateBoxItem({ rowIdx, expiry_date: newData }))\n                break;\n\n            default:\n                return;\n        }\n    }\n\n    const deleteBoxItem = (row, rowIdx) => {\n        if (!canAddBoxItem) {\n            playAudio(`${process.env.PUBLIC_URL}/media/audio/wrong-answer.mp3`)\n            dialog.error(trans(\"warehouse.box_item.delete.need_permission\"));\n\n            return;\n        }\n\n        dispatch(performEntryAction.deleteBoxIem({ rowIdx, isRespectRedux: !row.id }));\n\n        if (row.id) {\n            warehouseApi.boxItem.delete(row.id)\n                .then(() => {\n                    dialog.success(trans(\"warehouse.box_item.delete.success\"));\n                })\n                .catch(() => {\n                    dialog.error(trans(\"warehouse.box_item.delete.failure\"));\n                    dispatch(performEntryAction.addBoxItem(row));\n                });\n        }\n    }\n\n    const closeBoxItems = () => {\n\n        if (!canAddBoxItem) {\n            playAudio(`${process.env.PUBLIC_URL}/media/audio/wrong-answer.mp3`)\n            dialog.error(trans(\"warehouse.box_item.need_permission\"));\n\n            return;\n        }\n\n        let sumListBoxItems = [...listBoxItems].reduce((prevV, curV) => {\n            if (prevV[curV.product_id]) {\n                let expiry_date = prevV[curV.product_id].expiry_date || curV.expiry_date;\n\n                if (expiry_date && moment(expiry_date, 'DD-MM-YYYY', true).isValid()) expiry_date = moment(expiry_date, 'DD-MM-YYYY').format(\"YYYY-MM-DD\");\n\n                prevV[curV.product_id] = {\n                    ...prevV[curV.product_id],\n                    id: prevV[curV.product_id].id || curV.id,\n                    quantity: prevV[curV.product_id].quantity + Number(curV.quantity),\n                    expiry_date\n                }\n            }\n            else {\n                prevV[curV.product_id] = {\n                    ...curV,\n                    quantity: Number(curV.quantity),\n                    expiry_date: curV.expiry_date ? moment(curV.expiry_date, 'DD-MM-YYYY').format(\"YYYY-MM-DD\") : null\n                };\n            }\n\n            return prevV;\n        }, {});\n\n        setLoading(true);\n        Promise.all(Object.values(sumListBoxItems).map((boxItem) => {\n            if (boxItem.id) return warehouseApi.boxItem.update(boxItem.id, _.pick(boxItem, [\"product_id\", 'box_id', \"quantity\", 'expiry_date']));\n\n            return warehouseApi.boxItem.create(_.pick(boxItem, ['quantity', 'box_id', 'product_id', 'expiry_date']));\n        })).then(() => {\n            dialog.success(trans(\"warehouse.sku.box_item.close.success\"));\n\n            dispatch(fetchBoxItemsOfCurrentBox());\n        }).catch((err) => {\n            console.error(err);\n\n            dialog.error(trans(\"warehouse.sku.box_item.close.failure\"))\n        }).finally(() => {\n            setLoading(false);\n        })\n    }\n\n    return { handleAddBoxItem, continueAddProduct, updateBoxItem, deleteBoxItem, loading, closeBoxItems };\n}","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\n\nimport { fetchUnit } from 'app/modules/Product/product-redux/unitSlice';\nimport { fetchOrigin } from 'app/modules/Product/product-redux/originSlice';\nimport { fetchTax } from 'app/modules/Product/product-redux/taxSlice';\nimport {\n    createProduct,\n    createProductImageFile\n} from 'app/modules/Product/product-redux/productSlice';\n\nimport CustomModal from 'app/components/CustomModal';\nimport { Button, Modal } from 'react-bootstrap';\nimport * as Yup from 'yup';\nimport { dialog } from 'app/components/DialogNotify';\nimport ReactTagInput from '@pathofdev/react-tag-input';\nimport '@pathofdev/react-tag-input/build/index.css';\nimport { useForm } from 'react-hook-form';\nimport Select from 'react-select';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useFileUpload } from 'use-file-upload';\n\nimport './DialogNewProduct.scss';\nimport useTrans from 'helper/useTrans';\n\nconst DialogNewProduct = ({ show, onHide, onSuccess }) => {\n    const [tags, setTags] = useState([]);\n    const [defaultSrc, setDefaultSrc] = useState(\n        'https://static.thenounproject.com/png/558475-200.png'\n    );\n\n    const { unitList } = useSelector(\n        ({ product }) => ({ unitList: product.unit.unitList }),\n        shallowEqual\n    );\n    const tax = useSelector(state => state.product.tax?.taxList);\n    const origin = useSelector(state => state.product.origin?.originList);\n\n    const dispatch = useDispatch();\n    const [trans] = useTrans();\n\n    const validationSchema = Yup.object().shape({\n        id: Yup.string()\n            .max(13, trans(\"validation.message.max_string\", { max: 13 }))\n            .required(trans(\"validation.message.required\")),\n        name: Yup.string().required(trans(\"validation.message.required\")),\n        price: Yup.number().required(trans(\"validation.message.required\"))\n    });\n\n    const { register, handleSubmit, errors, reset, setValue } = useForm({\n        resolver: yupResolver(validationSchema),\n    });\n    const [files, selectFiles] = useFileUpload();\n\n    useEffect(() => {\n        dispatch(fetchOrigin());\n        dispatch(fetchUnit());\n        dispatch(fetchTax());\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const taxSelect = tax.map(item => ({\n        value: item?.id,\n        label: item?.name\n    }));\n    const originSelect = origin.map(item => ({\n        value: item?.id,\n        label: item?.name\n    }));\n    const unitSelect = unitList.map(item => ({\n        value: item?.id,\n        label: item?.name\n    }));\n\n    const handleUploadImage = e => {\n        const urlImage = e.target.value;\n        if (urlImage.includes('data:')) {\n            dialog.error(trans(\"validation.message.not_found.url\"));\n        } else {\n            setDefaultSrc(urlImage);\n        }\n    };\n\n    const resetForm = () => {\n        reset({\n            id: '',\n            name: '',\n            price: '',\n            origin_id: '',\n            unit_id: '',\n            ingredients: [],\n            tax_id: '',\n        });\n\n        setDefaultSrc('https://static.thenounproject.com/png/558475-200.png');\n        setTags([]);\n    }\n\n    const onSubmit = data => {\n        const params = {\n            id: data.id || '',\n            name: data.name || '',\n            price: data.price || '',\n            origin_id: data.origin_id || '',\n            unit_id: data.unit_id || '',\n            ingredients: JSON.stringify(data.tags || []),\n            tax_id: data.tax_id || '',\n            image_url: defaultSrc,\n            package: JSON.stringify({\n                quantity: data.quantity,\n                height: data.height,\n                weight: data.weight,\n                length: data.length,\n                width: data.width\n            })\n        };\n\n        if (files != null) {\n            const formData = new FormData();\n            formData.set('image', files.file, files.name);\n\n            const body = {\n                params: params,\n                data: formData\n            };\n            createProductWithImg(body);\n        } else {\n            createProductFunc(params);\n        }\n    };\n\n    const createProductWithImg = (body) => {\n        dispatch(createProductImageFile(body)).then(res => {\n            if (res.type.includes('fulfilled')) {\n                dialog.success(trans(\"warehouse.jancode.create.success\"));\n                onSuccess && onSuccess(res.payload);\n                resetForm();\n            } else {\n                dialog.error(trans(\"warehouse.jancode.create.success\"));\n            }\n        });\n    }\n\n    const createProductFunc = (params) => {\n        dispatch(createProduct(params)).then(res => {\n            if (res.type.includes('fulfilled')) {\n                dialog.success(trans(\"warehouse.jancode.create.success\"));\n                onSuccess && onSuccess(res.payload);\n                resetForm();\n            } else {\n                dialog.error(trans(\"warehouse.jancode.create.failure\"));\n            }\n        });\n    }\n\n    return (\n        <CustomModal\n            title={trans(\"warehouse.jancode.create.title\")}\n            onHide={onHide}\n            actionsLoading={false}\n            show={show}\n            className=\"dialog-add-new-product\"\n        >\n            <Modal.Body>\n                <div className=\"row\">\n                    <div className=\"col-lg-5 col-md-4 app-image\">\n                        <button\n                            onClick={() =>\n                                selectFiles({\n                                    accept: 'image/*'\n                                })\n                            }\n                            type=\"button\"\n                            data-toggle=\"tooltip\"\n                            data-placement=\"top\"\n                            title={trans(\"warehouse.jancode.image.click_to_change\")}\n                        >\n                            <img\n                                src={files?.source || defaultSrc}\n                                alt=\"preview\"\n                            />\n                        </button>\n                        <div className=\"input-group mt-3\">\n                            <div className=\"input-group-prepend\">\n                                <span\n                                    className=\"input-group-text\"\n                                    id=\"basic-addon3\"\n                                    style={{\n                                        backgroundColor:\n                                            '#3699FF',\n                                        color: '#ffffff'\n                                    }}\n                                >\n                                    {trans(\"warehouse.jancode.image.url\")}\n                                </span>\n                            </div>\n                            <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                id=\"basic-url\"\n                                aria-describedby=\"basic-addon3\"\n                                onChange={handleUploadImage}\n                            />\n                        </div>\n                    </div>\n                    <div className=\"col-lg-7 col-md-8 pl-10\">\n                        <form onSubmit={handleSubmit(onSubmit)}>\n                            <div className=\"form-group row align-items-center\">\n                                <div className=\"col-3\">\n                                    <span className=\"order-title\">\n                                        {trans(\"warehouse.jancode.id\")}\n                                    </span>\n                                </div>\n                                <div className=\"col-9\">\n                                    <input\n                                        className=\"form-control\"\n                                        name=\"id\"\n                                        ref={register}\n                                    />\n                                    {errors.id && (\n                                        <p\n                                            style={{\n                                                color: 'red',\n                                                margin: 'unset'\n                                            }}\n                                        >\n                                            {errors.id.message}\n                                        </p>\n                                    )}\n                                </div>\n                            </div>\n                            <div className=\"form-group row align-items-center\">\n                                <div className=\"col-3\">\n                                    <span className=\"order-title\">\n                                        {trans(\"common.name\")}\n                                    </span>\n                                </div>\n                                <div className=\"col-9\">\n                                    <input\n                                        className=\"form-control\"\n                                        name=\"name\"\n                                        ref={register}\n                                    />\n                                    {errors.name && (\n                                        <p\n                                            style={{\n                                                color: 'red',\n                                                margin: 'unset'\n                                            }}\n                                        >\n                                            {errors.name.message}\n                                        </p>\n                                    )}\n                                </div>\n                            </div>\n                            <div className=\"form-group row align-items-center\">\n                                <div className=\"col-3\">\n                                    <span className=\"order-title\">\n                                        {trans(\"common.price\")}\n                                                </span>\n                                </div>\n                                <div className=\"col-9\">\n                                    <input\n                                        type=\"number\"\n                                        min=\"1\"\n                                        className=\"form-control\"\n                                        name=\"price\"\n                                        ref={register}\n                                    />\n                                    {errors.price && (\n                                        <p\n                                            style={{\n                                                color: 'red',\n                                                margin: 'unset'\n                                            }}\n                                        >\n                                            {errors.price.message}\n                                        </p>\n                                    )}\n                                </div>\n                            </div>\n                            <div className=\"form-group row align-items-center\">\n                                <div className=\"col-3\">\n                                    <span className=\"order-title\">\n                                        {trans(\"warehouse.jancode.origin.title\")}\n                                                </span>\n                                </div>\n                                <div className=\"col-9\">\n                                    <Select\n                                        ref={() => register('origin_id')}\n                                        name=\"origin_id\"\n                                        defaultValue={''}\n                                        options={originSelect}\n                                        onChange={value =>\n                                            setValue('origin_id', value.value)\n                                        }\n                                        placeholder={trans(\"warehouse.jancode.origin.select_title\")}\n                                    />\n                                    {errors.origin_id && (\n                                        <p>\n                                            {trans(\"validation.message.required\")}\n                                        </p>\n                                    )}\n                                </div>\n                            </div>\n                            <div className=\"form-group row align-items-center\">\n                                <div className=\"col-3\">\n                                    <span className=\"order-title\">\n                                        {trans(\"warehouse.jancode.unit.title\")}\n                                    </span>\n                                </div>\n                                <div className=\"col-9\">\n                                    <Select\n                                        ref={() => register('unit_id')}\n                                        name=\"unit_id\"\n                                        defaultValue={''}\n                                        options={unitSelect}\n                                        onChange={value =>\n                                            setValue('unit_id', value.value)\n                                        }\n                                        placeholder={trans(\"warehouse.jancode.unit.select_title\")}\n                                    />\n                                    {errors.exampleRequired && (\n                                        <p>\n                                            {trans(\"validation.message.required\")}\n                                        </p>\n                                    )}\n                                </div>\n                            </div>\n                            <div className=\"form-group row align-items-center\">\n                                <div className=\"col-3\">\n                                    <span className=\"order-title\">\n                                        {trans(\"warehouse.jancode.tax.title\")}\n                                    </span>\n                                </div>\n                                <div className=\"col-9\">\n                                    <Select\n                                        ref={() => register('tax_id')}\n                                        name=\"tax_id\"\n                                        defaultValue={''}\n                                        options={taxSelect}\n                                        onChange={value =>\n                                            setValue('tax_id', value.value)\n                                        }\n                                        placeholder={trans(\"warehouse.jancode.tax.select_title\")}\n                                    />\n                                    {errors.exampleRequired && (\n                                        <p>\n                                            {trans(\"validation.message.required\")}\n                                        </p>\n                                    )}\n                                </div>\n                            </div>\n                            <div className=\"form-group row align-items-center\">\n                                <div className=\"col-3\">\n                                    <span className=\"order-title\">\n                                        {trans(\"warehouse.jancode.properties.title\")}\n                                    </span>\n                                </div>\n                                <div className=\"col-9\">\n                                    <ReactTagInput\n                                        ref={() => register('tags')}\n                                        className=\"form-control \"\n                                        tags={tags}\n                                        placeholder={trans(\"warehouse.jancode.properties.title\")}\n                                        editable={true}\n                                        readOnly={false}\n                                        onChange={newTags => {\n                                            setValue('tags', newTags)\n                                            setTags(newTags)\n                                        }}\n                                        allowDuplicates={false}\n                                    />\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={onHide}>{trans(\"common.cancel\")}</Button>\n                <Button variant=\"primary\" onClick={handleSubmit(onSubmit)}>{trans(\"common.save\")}</Button>\n            </Modal.Footer>\n        </CustomModal>\n    );\n};\n\nDialogNewProduct.propTypes = {\n    onHide: PropTypes.func,\n    show: PropTypes.bool,\n    onSuccess: PropTypes.func\n};\n\nexport default DialogNewProduct;","import React, { useState } from 'react';\n\nimport { toAbsoluteUrl } from '_metronic/_helpers';\n\nimport SVG from 'react-inlinesvg';\nimport { Button } from 'react-bootstrap';\nimport Popover from '@material-ui/core/Popover';\nimport { useFormikContext } from 'formik';\nimport DialogNewProduct from './DialogNewProduct';\nimport useTrans from 'helper/useTrans';\n\nconst AddProduct = props => {\n\n    const { setFieldValue, submitForm } = useFormikContext();\n    const [anchorEl, setAnchorEl] = useState(null);\n    const [showMd, setShowMd] = useState(false);\n    const open = Boolean(anchorEl);\n    const [trans] = useTrans();\n\n    const toggleModal = () => setShowMd(!showMd);\n\n    const handleClick = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const handleCreateProductSuccess = (response) => {\n        toggleModal();\n        setTimeout(() => {\n            setFieldValue('product_id', response?.id)\n                .then(() => {\n                    submitForm();\n                });\n        }, 600);\n    }\n\n    const openModal = () => {\n        toggleModal();\n        handleClose();\n    }\n\n    return (\n        <div className=\"add-product-label\">\n            {trans(\"warehouse.jancode.title\")}\n\n            <Button variant=\"link\" onClick={handleClick} className=\"p-0 border-0\">\n                <SVG\n                    src={toAbsoluteUrl(\n                        '/media/svg/icons/Code/Info-circle.svg'\n                    )}\n                ></SVG>\n            </Button>\n\n            <Popover\n                open={open}\n                anchorEl={anchorEl}\n                onClose={handleClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n            >\n                <div className=\"p-3\">\n                    {trans(\"warehouse.jancode.not_have_jancode\")}? <Button variant=\"link\" onClick={openModal}>{trans(\"warehouse.jancode.create.title\")}</Button>\n                </div>\n            </Popover>\n\n            <DialogNewProduct show={showMd} onHide={toggleModal} onSuccess={handleCreateProductSuccess} />\n        </div>\n    );\n};\n\nAddProduct.propTypes = {\n\n};\n\nexport default React.memo(AddProduct);","import { useEffect, useRef } from 'react';\n\nconst useClickOutside = (elRef, callback) => {\n    const callbackRef = useRef();\n\n    callbackRef.current = callback;\n\n    useEffect(() => {\n        const handleOutClick = (e) => {\n            if (!elRef?.current?.contains(e.target) && callbackRef.current) {\n                callbackRef.current(e);\n            }\n        };\n\n        document.addEventListener('click', handleOutClick, true);\n\n        return () => {\n            document.removeEventListener('click', handleOutClick, true);\n        };\n    }, [callbackRef, elRef]);\n};\n\nexport default useClickOutside;\n","import React, { useCallback, useState, useRef } from 'react';\n\nimport _ from 'lodash';\nimport productApi from 'apis/product-api/productApi';\nimport { currenyUnit } from 'config/currency';\nimport formatNumber from 'helper/formatNumber';\nimport useClickOutside from 'helper/useClickOutSide';\nimport { useScanBarcode } from 'helper/useScanBarcode';\n\nimport { FieldFeedbackLabel } from '_metronic/_partials/controls';\nimport Loading from 'app/components/Loading';\nimport EmptyData from 'app/components/EmptyData';\n\nimport './ACProductInput.scss';\n\nfunction isParsedNumber(str) {\n    return !isNaN(Number(str));\n}\n\nconst ACProductInput = ({\n    field, // { name, value, onChange, onBlur }\n    form, // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n    label,\n    withFeedbackLabel = true,\n    customFeedbackLabel,\n    type = 'text',\n    autoFocus = false,\n    ...props\n}) => {\n    const [prevSearchText, setPrevSearchText] = useState('');\n    const [visibleAC, setVisibleAC] = useState(false);\n    const [loadingAC, setLoadingAC] = useState(false);\n    const [dataAC, setDataAC] = useState([]);\n    const containerRef = useRef();\n    const inputRef = useRef();\n\n    const { touched, errors, setFieldValue, submitForm } = form;\n\n    useClickOutside(containerRef, () => {\n        setVisibleAC(false);\n    });\n\n    useScanBarcode({\n        onEnter: (v, e) => handleScanEnter(v, e)\n    });\n\n    const handleScanEnter = (v, e) => {\n        setFieldValue(field.name, v);\n        submitForm();\n        e.preventDefault();\n    }\n\n    const handleChangeInput = (e) => {\n        if(!isParsedNumber(e.target.value)) {\n            setVisibleAC(true);\n            callApiGetProduct(e.target.value);\n        } else {\n            setVisibleAC(false);\n        }\n        \n        setFieldValue(field.name, e.target.value);\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const callApiGetProduct = useCallback(_.debounce((v) => {\n        setPrevSearchText(v);\n        setLoadingAC(true);\n        setDataAC([]);\n        productApi.fetchProduct({\n            orderBy: 'updated_at', page: 1, search: v, sortedBy: 'desc', searchFields: 'name:like'\n        })\n            .then((res) => {\n                setDataAC(res.data);\n            })\n            .finally(() => { setLoadingAC(false) });\n    }, 700), []);\n\n    const handleClickInput = () => {\n        if (dataAC.length > 0) setVisibleAC(true);\n        if (inputRef.current.value.length && prevSearchText !== inputRef.current.value.length && !isParsedNumber(inputRef.current.value)) {\n            callApiGetProduct(inputRef.current.value);\n        }\n    }\n\n    const handleClickProduct = (product) => {\n        setInputData(product.id);\n        \n    }\n\n    const handleKeyPressInput = (e) => {\n\n        if (e.charCode !== 13) setDataAC([]);\n\n        if (e.charCode === 13 && visibleAC && dataAC.length) {\n            e.preventDefault();\n\n            if(visibleAC && dataAC.length) {\n                setInputData(dataAC[0]?.id);\n            }\n\n            if(inputRef.current.value.length) {\n                submitForm();\n            }\n        }\n    }\n\n    const setInputData = (data) => {\n        setVisibleAC(false);\n        setFieldValue(field.name, data).then(() => {\n            submitForm();\n        });\n    }\n\n    return (\n        <div className=\"ac-product-input\" ref={containerRef} >\n            {label && <label>{label}</label>}\n            <input value={field.value} className=\"form-control\" onChange={handleChangeInput} onClick={handleClickInput} ref={inputRef} onKeyPress={handleKeyPressInput} />\n            {visibleAC && (\n                <div className=\"auto-complete-container\">\n                    <div className=\"position-relative\">\n                        {loadingAC && <Loading local />}\n                        {!!dataAC.length ? (\n                            <div className=\"list-product-item-wrapper\">\n                                {dataAC.map((product) => (\n                                    <div className=\"product-item\" key={`product-${product.id}`} onClick={() => handleClickProduct(product)}>\n                                        <div className=\"jancode\">{product.id} - <span className=\"product-name\">{product.name}</span></div>\n                                        <div className=\"price\">{formatNumber(product.price)} {currenyUnit}</div>\n                                    </div>\n                                ))}\n                            </div>\n                        ) : (\n                                <EmptyData />\n                            )}\n                    </div>\n                </div>\n            )}\n            {withFeedbackLabel && (\n                <FieldFeedbackLabel\n                    error={errors[field.name]}\n                    touched={touched[field.name]}\n                    label={label}\n                    type={type}\n                    customFeedbackLabel={customFeedbackLabel}\n                />\n            )}\n        </div>\n    );\n};\n\nACProductInput.propTypes = {\n\n};\n\nexport default ACProductInput;","import React from 'react';\n\nimport { Form, FastField, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport AddProduct from './AddProduct';\nimport ACProductInput from './ACProductInput';\n\nimport './index.scss';\nimport useTrans from 'helper/useTrans';\n\nconst FormAddBoxItem = ({\n    onSubmit,\n    initialValues = {\n        product_id: '',\n        quantity: 1\n    }\n}) => {\n\n    const [trans] = useTrans();\n\n    const validationSchema = Yup.object().shape({\n        product_id: Yup.string().required(trans(\"validation.message.required\")),\n        quantity: Yup.number()\n            .min(1, trans(\"validation.message.min\", {min: 1}))\n            .required(trans(\"validation.message.required\"))\n    });\n\n    return (\n        <Formik\n            enableReinitialize\n            initialValues={initialValues}\n            onSubmit={onSubmit}\n            validationSchema={validationSchema}\n        >\n            {({ handleSubmit }) => (\n                <>\n                    <Form className=\"form form-label-right form-add-box-item\">\n                        <FastField\n                            name=\"product_id\"\n                            component={ACProductInput}\n                            label={<AddProduct />}\n                            placeholder={trans(\"warehouse.jancode.id\")}\n                            autoComplete=\"off\"\n                            autoFocus\n                        />\n                    </Form>\n                    <button className=\"btn btn-primary btn-large btn-mw-85\" onClick={handleSubmit}>{trans(\"common.add\")}</button>\n                </>\n            )}\n        </Formik>\n\n    );\n};\n\nFormAddBoxItem.propTypes = {};\n\nexport default React.memo(FormAddBoxItem);\n","import React, { useRef } from 'react';\n\nimport useBoxItem from './useBoxItem';\n\nimport FormAddBoxItem from 'app/modules/Warehouse/components/Form/FormAddBoxItem';\nimport ModalConfirm from 'app/modules/Warehouse/components/ModalConfirm';\n\nconst AddBoxItem = props => {\n\n    const modalConfirmRef = useRef();\n    const { handleAddBoxItem, continueAddProduct } = useBoxItem(modalConfirmRef);\n\n    return (\n        <div className=\"add-box-item\">\n            <ModalConfirm ref={modalConfirmRef} onOk={continueAddProduct} />\n            <div className=\"add-box-item__content\">\n                <FormAddBoxItem onSubmit={handleAddBoxItem} />\n            </div>\n        </div>\n    );\n};\n\nAddBoxItem.propTypes = {\n\n};\n\nexport default React.memo(AddBoxItem);","import React, { useRef } from 'react';\n\nimport moment from 'moment';\nimport { toAbsoluteUrl } from '_metronic/_helpers';\nimport clsx from 'clsx';\nimport useTrans from 'helper/useTrans';\n\nimport SVG from 'react-inlinesvg';\nimport DatePicker from \"react-datepicker\";\nimport ModalConfirm from 'app/modules/Warehouse/components/ModalConfirm';\n\nimport './index.scss';\nimport usePermission from 'app/components/NeedPermission/usePermission';\nimport NeedPermission from 'app/components/NeedPermission';\n\nconst formatMoment = \"DD-MM-YYYY\";\n\nconst ListBoxItems = ({ data = [], currentBox, onUpdate, onDelete, className }) => {\n\n    const [trans] = useTrans();\n    const modalConfirmRef = useRef();\n    const canUpdateBoxItems = usePermission('box-items');\n\n    const handleChangeQuantity = (e, rowIdx) => {\n        onUpdate && onUpdate('quantity', rowIdx, e.target.value);\n    }\n\n    const handleChangeExpiryDate = (dateObj, rowIdx) => {\n        onUpdate && onUpdate('expiry_date', rowIdx, moment(dateObj).format(formatMoment));\n    }\n\n    const handleDeleteItem = ({ row, rowIdx }) => {\n        onDelete && onDelete(row, rowIdx);\n    }\n\n    const confirmDelete = (row, rowIdx) => {\n        modalConfirmRef.current.open({\n            title: trans(\"warehouse.box_item.delete.title\"),\n            row,\n            rowIdx\n        });\n    }\n\n    return (\n        <div className={clsx(\"list-box-items\", className)}>\n            <ModalConfirm ref={modalConfirmRef} onOk={handleDeleteItem} centered />\n            {data.map((row, rowIdx) => (\n                <div className=\"box-items\" key={`box-item-${rowIdx}`}>\n                    <div className=\"box-items__info\">\n                        <div className=\"box-items__jancode\">{row.product_id}</div>\n                        <div className=\"box-items__name\">{row?.product?.name || '---'}</div>\n                    </div>\n\n                    <div className=\"box-items__updateable\">\n                        <div className=\"box-items__quantity updateable-item\">\n                            <label htmlFor=\"\">{trans(\"common.quantity\")}</label>\n                            <input\n                                className=\"form-control quantity_input\"\n                                value={row.quantity}\n                                onChange={(e) => handleChangeQuantity(e, rowIdx)}\n                                type=\"number\"\n                                min={0}\n                                disabled={!canUpdateBoxItems}\n                            />\n                        </div>\n\n                        <div className=\"box-items__expiry_date updateable-item\">\n                            <label htmlFor=\"\">{trans(\"common.expiry_date\")}</label>\n                            <DatePicker\n                                style={{ width: \"100%\" }}\n                                selected={row.expiry_date ? moment(row.expiry_date, formatMoment).toDate() : null}\n                                onChange={(dateObj) => handleChangeExpiryDate(dateObj, rowIdx)}\n                                disabled={!canUpdateBoxItems}\n                            />\n                        </div>\n                    </div>\n\n                    <div className=\"box-items__actions\">\n                        <NeedPermission need={\"box-items\"}>\n                            <span className=\"svg-icon svg-icon-danger svg-icon-2x cursor-pointer\" onClick={() => confirmDelete(row, rowIdx)}>\n                                <SVG\n                                    src={toAbsoluteUrl(\n                                        '/media/svg/icons/General/Trash.svg'\n                                    )}\n                                ></SVG>\n                            </span>\n                        </NeedPermission>\n                    </div>\n                </div>\n            ))}\n        </div>\n    );\n};\n\nListBoxItems.propTypes = {\n\n};\n\nexport default ListBoxItems;","import React, { useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { fetchBoxItemsOfCurrentBox } from 'app/modules/Warehouse/warehouse-redux/performEntrySlice';\nimport useScrollIntoView from 'helper/useScrollIntoView';\nimport useBoxItem from './useBoxItem';\n\nimport { Alert, AlertTitle } from '@material-ui/lab';\nimport ListBoxItems from 'app/modules/Warehouse/components/List/ListBoxItems';\nimport Button from 'app/components/Button';\nimport useTrans from 'helper/useTrans';\nimport Loading from 'app/components/Loading';\nimport NeedPermission from 'app/components/NeedPermission';\n\nconst TableBoxItem = props => {\n\n    const data = useSelector(state => state.warehouse.performEntry.checking_goods.box_items);\n    const apiLoading = useSelector(state => state.warehouse.performEntry.checking_goods.loading);\n    const isCheckingGoods = useSelector(state => state.warehouse.performEntry.checking_goods.is_checking);\n    const currentBox = useSelector(state => state.warehouse.box.detail.data);\n    const dispatch = useDispatch();\n    const tableBoxItemRef = useRef();\n    const { updateBoxItem, deleteBoxItem, closeBoxItems, loading } = useBoxItem();\n    const [trans] = useTrans();\n\n    useScrollIntoView(tableBoxItemRef);\n\n    useEffect(() => {\n        if (currentBox?.id) dispatch(fetchBoxItemsOfCurrentBox());\n    }, [currentBox?.id]); // eslint-disable-line\n\n    if (apiLoading) return (\n        <div className=\"position-relative\" style={{ minHeight: 300 }}>\n            <Loading local />\n        </div>\n    )\n\n    return (\n        <div className=\"table-box-items\" ref={tableBoxItemRef}>\n\n            {isCheckingGoods && (\n                <NeedPermission need={\"box-items\"}>\n                    <Alert\n                        severity=\"warning\"\n                        action={\n                            <Button type=\"secondary\" onClick={closeBoxItems} loading={loading}>\n                                {trans(\"warehouse.sku.box_item.close.title\")}\n                            </Button>\n                        }\n                        className=\"mb-10\"\n                    >\n                        <AlertTitle>{trans(\"warehouse.sku.box_item.close.warning.title\")}</AlertTitle>\n                        {trans(\"warehouse.sku.box_item.close.warning.message\")}\n                    </Alert>\n                </NeedPermission>\n            )}\n\n            <ListBoxItems\n                data={data}\n                currentBox={currentBox}\n                onUpdate={updateBoxItem}\n                onDelete={deleteBoxItem}\n            />\n        </div>\n    );\n};\n\nTableBoxItem.propTypes = {\n\n};\n\nexport default TableBoxItem;","import { useEffect } from 'react';\n\nexport default function useScrollIntoView(ele) {\n    useEffect(() => {\n        if(ele && ele?.current) ele.current.scrollIntoView({\n            behavior: 'smooth',\n        })\n    }, []); // eslint-disable-line\n\n    return [];\n}\n","import React from 'react';\nimport { useHistory, useRouteMatch } from 'react-router-dom';\n\nimport { toAbsoluteUrl } from '_metronic/_helpers';\n\nimport { Card, CardHeader, CardHeaderToolbar } from '_metronic/_partials/controls';\nimport { Button } from 'react-bootstrap';\nimport SelectBox from '../../../../components/SelectBox';\nimport SVG from 'react-inlinesvg';\n\nimport \"./Header.scss\";\nimport useTrans from 'helper/useTrans';\n\nconst Header = props => {\n    const history = useHistory();\n    const match = useRouteMatch();\n    const [trans] = useTrans();\n\n    const handleGoNext = () => {\n        history.push(`/warehouse/inbound/step-3/${match?.params?.sfa_id}`)\n    }\n\n    const goBack = () => {\n        history.goBack();\n    }\n\n    const handleBoxChange = (option) => {\n        if(!option) return;\n        \n        history.push(`/warehouse/inbound/step-2/${match?.params?.sfa_id}/${option.value}`);\n    }\n\n    return (\n        <Card className=\"check-box-item-header\">\n            <CardHeader title={(\n                <div>\n                    <Button variant=\"link\" onClick={goBack}>\n                        <SVG src={toAbsoluteUrl(\n                            '/media/svg/icons/Navigation/Arrow-left.svg'\n                        )} />\n                    </Button>\n                    {trans(\"MENU.WAREHOUSE.CHECKING_GOODS\")}\n                </div>\n            )}>\n                <CardHeaderToolbar>\n                    <div className=\"d-flex w-100 align-items-center\">\n                        <SelectBox onChange={handleBoxChange} />\n                        <Button variant=\"success\" onClick={handleGoNext} className=\"ml-3 btn-large\">{trans(\"warehouse.header.next\")}</Button>\n                    </div>\n                </CardHeaderToolbar>\n            </CardHeader>\n        </Card>\n    );\n};\n\nHeader.propTypes = {\n\n};\n\nexport default Header;","import React, { useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Route, useHistory, useParams, useRouteMatch } from 'react-router-dom';\n\nimport { fetchBox } from 'app/modules/Warehouse/warehouse-redux/boxSlice';\nimport useTrans from 'helper/useTrans';\nimport { fetchSFA } from 'app/modules/Warehouse/warehouse-redux/sfaSlice';\nimport { confirmStep2 } from 'app/modules/Warehouse/components/PerformEntry/ModalConfirmStep2';\n\nimport { Card, CardBody, CardHeader } from '_metronic/_partials/controls';\nimport NotFound from 'app/components/NotFound';\nimport Loading from 'app/components/Loading';\nimport CurrentBox from '../../../../components/PerformEntry/CurrentBox';\nimport AddBoxItem from './AddBoxItem';\nimport TableBoxItem from './TableBoxItem';\nimport CreateNewBox from '../../../../components/PerformEntry/CreateNewBox';\nimport Header from './Header';\nimport ListBox from 'app/modules/Warehouse/components/List/ListBox';\nimport NeedPermission from 'app/components/NeedPermission';\n\nconst CheckingBox = props => {\n\n    const { data, loading } = useSelector(state => state.warehouse.box.detail);\n    const sfa = useSelector(state => state.warehouse.sfa.detail.data);\n    const params = useParams();\n    const dispatch = useDispatch();\n    const match = useRouteMatch();\n    const history = useHistory();\n    const [trans] = useTrans();\n    const sfaRef = useRef();\n\n    useEffect(() => {\n        sfaRef.current = sfa;\n    }, [sfa]);\n\n    useEffect(() => {\n        return () => {\n            if (sfaRef.current?.boxes?.length && params.sfa_id === sfaRef.current.id) {\n                let totalSku = sfaRef.current.boxes.reduce((prevV, curV) => prevV + curV.duplicate, 0);\n\n                if (totalSku < sfaRef.current.quantity) {\n                    confirmStep2({\n                        totalSku,\n                        quantity: sfaRef.current.quantity\n                    });\n                }\n            }\n        }\n    }, []); // eslint-disable-line\n\n    useEffect(() => {\n        if (params?.box_id) f5BoxData();\n    }, [params?.box_id]); // eslint-disable-line\n\n    const f5BoxData = () => {\n        dispatch(fetchBox({ id: params?.box_id, with: 'childs;items' }));\n    }\n\n    const updateBoxSuccess = () => {\n        f5BoxData();\n    }\n\n    const createBoxSuccess = (res) => {\n        history.push(`/warehouse/inbound/step-2/${params?.sfa_id}/${res.id}`);\n        f5SFAData();\n    }\n\n    const f5SFAData = () => {\n        dispatch(fetchSFA({ id: params?.sfa_id, with: 'boxes' }))\n    }\n\n    const handleSelectBox = (box) => {\n        history.push(`/warehouse/inbound/step-2/${params?.sfa_id}/${box.id}`);\n    }\n\n    if (!data && !loading) return <NotFound />;\n\n    return (\n        <div className=\"checking-box position-relative\">\n            {loading && <Loading local />}\n\n            <div className=\"row\">\n                <div className=\"col-lg-9 col-md-12 col-sm-12\" style={{ height: '100%' }}>\n                    <div className=\"row\">\n                        <div className=\"col-sm-12\"><Header /></div>\n                    </div>\n\n                    <div className=\"row\">\n                        <div className=\"col-sm-12\"><CurrentBox /></div>\n                    </div>\n\n                    <Card className=\"mb-0\">\n                        <CardHeader title={trans(\"warehouse.box_item.title\")}></CardHeader>\n                        <CardBody>\n                            <AddBoxItem />\n                            <TableBoxItem />\n                        </CardBody>\n                    </Card>\n                </div>\n                <div className=\"col-lg-3 col-md-12 col-sm-12 ipad-hidden\">\n                    <ListBox onSelectBox={handleSelectBox} showQuantity={(b) => b.duplicate} />\n                </div>\n            </div>\n\n            <NeedPermission need={\"boxes.create\"}>\n                <Route path={`${match.path}/create-box`}>\n                    {({ match }) => (\n                        <CreateNewBox\n                            show={match !== null}\n                            onSuccess={createBoxSuccess}\n                        />\n                    )}\n                </Route>\n            </NeedPermission>\n\n            <NeedPermission need={\"boxes.update\"}>\n                <Route path={`${match.path}/edit-box`}>\n                    {({ match }) => (\n                        <CreateNewBox\n                            show={match !== null}\n                            onSuccess={updateBoxSuccess}\n                            initialValues={data}\n                            isHaveDuplicate={false}\n                        />\n                    )}\n                </Route>\n            </NeedPermission>\n        </div>\n    );\n};\n\nCheckingBox.propTypes = {\n\n};\n\nexport default React.memo(CheckingBox);","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Route, useHistory, useParams, useRouteMatch } from 'react-router-dom';\n\nimport { fetchSFA } from 'app/modules/Warehouse/warehouse-redux/sfaSlice';\n\nimport NotFound from 'app/components/NotFound';\nimport Loading from 'app/components/Loading';\nimport CheckTheGoods from './CheckTheGoods';\nimport CreateNewBox from '../../../components/PerformEntry/CreateNewBox';\nimport PerformStep from '../PerformStep';\nimport EmptyDataContent from './EmptyDataContent';\nimport NeedPermission from 'app/components/NeedPermission';\n\nimport './index.scss';\n\nconst CreateBoxSection = props => {\n\n    const { data: sfa, loading } = useSelector(state => state.warehouse.sfa.detail);\n    const dispatch = useDispatch();\n    const params = useParams();\n    const history = useHistory();\n    const match = useRouteMatch();\n\n    useEffect(() => {\n        if (params?.sfa_id) {\n            dispatch(fetchSFA({ id: params?.sfa_id, with: 'boxes;receipts' }))\n                .then(res => {\n                    if (res.payload?.boxes?.length && !params?.box_id) {\n                        history.replace(`${match.url}/${res.payload?.boxes?.[0].id}`);\n                    } else if (!res.payload?.boxes?.length) {\n                        history.push(`/warehouse/inbound/step-2/${params?.sfa_id}/create-new-box`);\n                    }\n                })\n        }\n    }, [params?.sfa_id]); // eslint-disable-line\n\n    const focusModalCreateBox = () => {\n        history.push(`${match.url}/create-new-box`);\n    }\n\n    const createBoxSuccess = (res) => {\n        history.push(`/warehouse/inbound/step-2/${params?.sfa_id}/${res.id}`);\n        dispatch(fetchSFA({ id: params?.sfa_id, with: 'boxes' }));\n    }\n\n    if (!sfa && !loading) return <NotFound />\n\n    return (\n        <>\n            <PerformStep />\n            <div className=\"create-box step-2 position-relative\">\n                {loading && <Loading local />}\n\n                {!sfa?.boxes?.length ? (\n                    <EmptyDataContent focusModalCreateBox={focusModalCreateBox} />\n                ) : (<CheckTheGoods />)}\n\n                <NeedPermission need={\"boxes.create\"}>\n                    <Route path={`${match.path}/create-new-box`}>\n                        {({ match }) => (\n                            <CreateNewBox\n                                show={match !== null}\n                                onSuccess={createBoxSuccess}\n                            />\n                        )}\n                    </Route>\n                </NeedPermission>\n            </div>\n        </>\n    );\n};\n\nCreateBoxSection.propTypes = {\n\n};\n\nexport default CreateBoxSection;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { useHistory, useRouteMatch } from 'react-router-dom';\n\nimport { toAbsoluteUrl } from '_metronic/_helpers';\nimport clsx from 'clsx';\nimport useTrans from 'helper/useTrans';\nimport { startPrinter } from 'app/components/PrinterModal';\nimport { getTemplateData } from 'helper/printerTemplateData';\n\nimport SVG from 'react-inlinesvg';\nimport { OverlayTrigger, Tooltip, ProgressBar } from 'react-bootstrap';\n\nimport './PalletItem.scss';\nimport NeedPermission from 'app/components/NeedPermission';\n\nconst PalletItem = ({ pallet, onSelect }) => {\n\n    const currentPallet = useSelector(state => state.warehouse.performEntry.storage.currentPallet);\n    const history = useHistory();\n    const match = useRouteMatch();\n    const [trans] = useTrans();\n\n    const handleClick = () => {\n        if (currentPallet?.id === pallet?.id) return;\n\n        onSelect && onSelect(pallet);\n    }\n\n    const savePallet = () => {\n        history.push(`${match.url}/save-pallet/${pallet?.id}`)\n    }\n\n    const printPalletLabel = () => {\n        startPrinter(getTemplateData(\"PALLET\", { palletId: pallet.id }));\n    }\n\n    return (\n        <div className={clsx(\"pallet-item\", currentPallet?.id === pallet?.id && 'active')} onClick={handleClick}>\n            <div className=\"d-flex\">\n                <div className=\"pallet-item__icon\">\n                    <SVG\n                        src={toAbsoluteUrl(\n                            '/media/svg/icons/Shopping/Pallet.svg'\n                        )}\n                        uniquifyIDs={true}\n                    ></SVG>\n                </div>\n                <div className=\"pallet-item__info\">\n                    <div className=\"pallet-item__id\">\n                        {pallet?.id}\n                    </div>\n\n                    {pallet?.location?.floor ? (\n                        <div className=\"pallet-item__position\">\n                            <span>F{pallet?.location?.floor}</span> &#215; <span>R{pallet?.location?.row}</span> &#215; <span>C{pallet?.location?.column}</span>\n                        </div>\n                    ) : ''}\n\n                    {pallet?.location?.shelve ? (\n                        <div className=\"extra\">\n                            <div className=\"shelve\">{trans(\"warehouse.shelve.title\")}: <span>{pallet?.location?.shelve?.id}</span></div>\n                            <div className=\"area\"><span>{pallet?.location?.shelve?.area?.name}</span></div>\n                        </div>\n                    ) : ''}\n                </div>\n                <div className=\"pallet-item__actions\">\n                    <NeedPermission need={['pallets.update']}>\n                        <OverlayTrigger\n                            key={'storage'}\n                            placement={'top'}\n                            overlay={\n                                <Tooltip id={`tooltip-route`}>\n                                    <span className=\"text-primary\">{trans(\"warehouse.pallet.save_to_other_position\")}</span>\n                                </Tooltip>\n                            }\n                        >\n                            <span onClick={savePallet} className=\"svg-icon svg-icon-success svg-icon-2x\">\n                                <SVG\n                                    src={toAbsoluteUrl(\n                                        '/media/svg/icons/Navigation/Route.svg'\n                                    )}\n                                ></SVG>\n                            </span>\n                        </OverlayTrigger>\n\n                        <OverlayTrigger\n                            key={'printer'}\n                            placement={'top'}\n                            overlay={\n                                <Tooltip id={`tooltip-route`}>\n                                    <span className=\"text-primary\">{trans(\"printer.save.pallet.title\")}</span>\n                                </Tooltip>\n                            }\n                        >\n                            <span onClick={printPalletLabel} className=\"svg-icon svg-icon-primary svg-icon-2x mt-2\">\n                                <SVG\n                                    src={toAbsoluteUrl(\n                                        '/media/svg/icons/Devices/Printer.svg'\n                                    )}\n                                ></SVG>\n                            </span>\n                        </OverlayTrigger>\n                    </NeedPermission>\n                </div>\n            </div>\n\n            <div className=\"pallet-item__status\">\n                <div className=\"status--item\">\n                    <span className=\"text-success\">V: </span>\n                    <ProgressBar variant=\"success\" now={pallet?.boxes_volume} max={pallet?.type?.max_volume} />\n                </div>\n\n                <div className=\"status--item\">\n                    <span className=\"text-primary\">W: </span>\n                    <ProgressBar variant=\"info\" now={pallet?.boxes_weight} max={pallet?.type?.max_weight} />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nPalletItem.propTypes = {\n    pallet: PropTypes.any,\n    onSelect: PropTypes.func\n};\n\nexport default React.memo(PalletItem);","import React, { forwardRef } from 'react';\n\nimport { toAbsoluteUrl } from '_metronic/_helpers';\n\nimport SVG from 'react-inlinesvg';\n\nimport './InputAddPallet.scss';\nimport useTrans from 'helper/useTrans';\n\nconst InputAddPallet = ({ onAdd, onAddNew }, ref) => {\n\n    const [trans] = useTrans();\n\n    const handleKeyPress = (e) => {\n        if(e.charCode === 13) onAdd && onAdd();\n    }\n\n    return (\n        <div className=\"input-add-pallet\">\n            <input className=\"form-control\" ref={ref} placeholder={trans(\"warehouse.pallet.id\")} onKeyPress={handleKeyPress}/>\n            <span className=\"svg-icon svg-icon-primary custom-button\" onClick={onAddNew}>\n                <SVG src={toAbsoluteUrl(\n                    '/media/svg/icons/Code/Plus.svg'\n                )} />\n            </span>\n        </div>\n    );\n};\n\nexport default forwardRef(InputAddPallet);","import React, { useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Route, useRouteMatch } from 'react-router-dom';\n\nimport _ from 'lodash';\nimport warehouseApi from 'apis/warehouse';\nimport { performEntryAction } from 'app/modules/Warehouse/warehouse-redux/performEntrySlice';\nimport { useScanBarcode, isPalletCode } from 'helper/useScanBarcode';\nimport { startPrinter } from 'app/components/PrinterModal';\nimport { getTemplateData } from 'helper/printerTemplateData';\nimport useTrans from 'helper/useTrans';\nimport { fetchPalletTypes } from 'app/modules/Warehouse/warehouse-redux/palletTypeSlice';\n\nimport Loading from 'app/components/Loading';\nimport PalletItem from './PalletItem';\nimport InputAddPallet from './InputAddPallet';\nimport { dialog } from 'app/components/DialogNotify';\nimport ModalSavePallet from './ModalSavePallet';\nimport { Pagination } from '@material-ui/lab';\nimport EmptyData from 'app/components/EmptyData';\n\nimport './index.scss';\nimport NeedPermission from 'app/components/NeedPermission';\n\nconst ListPallets = ({ onSelect, onAddPallet, pagination, onChangePage }) => {\n\n    const { data: listPallets, loading } = useSelector(state => state.warehouse.performEntry.storage.pallets);\n    const listPalletType = useSelector(state => state.warehouse.palletType.list.data);\n    const inputRef = useRef();\n    const match = useRouteMatch();\n    const dispatch = useDispatch();\n    const [trans] = useTrans();\n\n    useEffect(() => {\n        if (!listPalletType.length) {\n            dispatch(fetchPalletTypes());\n        }\n    }, []); // eslint-disable-line\n\n    useScanBarcode({\n        condition: isPalletCode,\n        onEnter: (v, e) => handleScanEnter(v)\n    });\n\n    const handleScanEnter = (v) => {\n        inputRef.current.value = v;\n        onAddPallet && onAddPallet(v);\n\n        setTimeout(() => {\n            inputRef.current.value = '';\n        }, 200);\n    }\n\n    const handleAddPallet = () => {\n\n        const palletId = inputRef.current.value;\n\n        if (!palletId?.length) return;\n\n        setTimeout(() => {\n            inputRef.current.value = '';\n            inputRef.current.blur();\n        }, 200);\n\n        let matchedPalletInList = _.find(listPallets, ({ id }) => palletId == id) // eslint-disable-line\n        if (matchedPalletInList) {\n            /** Set this pallet to selected pallet */\n            onSelect && onSelect(matchedPalletInList);\n\n            return;\n        }\n\n        onAddPallet && onAddPallet(palletId);\n    }\n\n    const handleSavePalletSuccess = (res) => {\n        warehouseApi.pallet.fetchPallet(res.id, { with: 'location.shelve.area;pivotBoxes' })\n            .then((palletData) => {\n                const matchedPalletIdx = _.findIndex(listPallets, ({ id }) => palletData.id == id); // eslint-disable-line\n\n                const newListPallets = [...listPallets];\n                newListPallets[matchedPalletIdx] = palletData;\n\n                dispatch(performEntryAction.setListPallets(newListPallets));\n            }).catch(() => {\n                dialog.error(trans(\"warehouse.pallet.add.failure\"))\n            })\n    }\n\n    const handlePageChange = (e, page) => {\n        onChangePage && onChangePage(page);\n    }\n\n    const handleAddNewPallet = () => {\n        warehouseApi.pallet.create({\n            type_id: listPalletType?.[0]?.id\n        })\n            .then((res) => {\n                startPrinter(getTemplateData('PALLET', { ...res, palletId: res.id, quantity: 2 }));\n                dispatch(performEntryAction.addPalletToList(res));\n                dispatch(performEntryAction.setCurrentPallet(res));\n            })\n            .catch(() => {\n                dialog.error(trans(\"warehouse.pallet.add.empty_pallet.failure\"))\n            })\n    }\n\n    return (\n        <div className=\"list-pallet-wrapper position-relative\">\n            <NeedPermission need=\"pallets.update\">\n                <Route path={`${match.path}/save-pallet/:pallet_id`}>\n                    {({ match }) => (\n                        <ModalSavePallet\n                            id={match?.params?.pallet_id}\n                            show={match !== null}\n                            onSuccess={handleSavePalletSuccess}\n                        />\n                    )}\n                </Route>\n            </NeedPermission>\n            {loading && <Loading local />}\n            <div className=\"title mb-2\">{trans(\"warehouse.pallet.list.title\")}</div>\n            <InputAddPallet onAdd={handleAddPallet} ref={inputRef} onAddNew={handleAddNewPallet} />\n            <div className=\"list-pallet\">\n                {!listPallets.length ? (\n                    <EmptyData emptyText={trans(\"warehouse.pallet.empty\")} />\n                ) : ''}\n                {listPallets.map((pallet, idx) => (\n                    <PalletItem pallet={pallet} key={`pallet-${idx}`} onSelect={onSelect} />\n                ))}\n            </div>\n\n            <div className=\"pagination mt-3 justify-content-end\">\n                <Pagination\n                    count={pagination.lastPage}\n                    page={pagination.page}\n                    shape=\"rounded\"\n                    onChange={handlePageChange}\n                />\n            </div>\n        </div>\n    );\n};\n\nListPallets.propTypes = {\n    onCheck: PropTypes.func\n};\n\nexport default ListPallets;","import React, { useEffect, useCallback, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\n\nimport { performEntryAction, updatePalletData } from 'app/modules/Warehouse/warehouse-redux/performEntrySlice';\nimport warehouseApi from 'apis/warehouse';\nimport _ from 'lodash';\nimport { useScanBarcode, isSKUCode } from 'helper/useScanBarcode';\nimport useTrans from 'helper/useTrans';\n\nimport BoxItem from 'app/modules/Warehouse/components/List/ListBox/BoxItem';\nimport { dialog } from 'app/components/DialogNotify';\nimport Loading from 'app/components/Loading';\nimport EmptyData from 'app/components/EmptyData';\nimport SelectPalletType from 'app/components/Select/SelectPalletType';\n\nimport './index.scss';\nimport NeedPermission from 'app/components/NeedPermission';\n\nconst ListBox = props => {\n\n    const currentPallet = useSelector(state => state.warehouse.performEntry.storage.currentPallet);\n    const loading = useSelector(state => state.warehouse.performEntry.storage.pallets.loading);\n    // const { data: boxes, loading, pagination } = useSelector(state => state.warehouse.performEntry.storage.boxesInCurrentPallet);\n    const dispatch = useDispatch();\n    const inputAddSKURef = useRef();\n    const inputChangePivotRef = useRef([]);\n    const boxRef = useRef([]);\n    const params = useParams();\n    const [trans] = useTrans();\n\n    useScanBarcode({\n        condition: isSKUCode,\n        onEnter: (v) => handleScanEnter(v)\n    });\n\n    const handleScanEnter = (v) => {\n        inputAddSKURef.current.value = v;\n\n        setTimeout(() => {\n            inputAddSKURef.current.value = '';\n        }, 100);\n\n        if (!currentPallet?.id) return;\n\n        if (_.findIndex(currentPallet?.boxes || [], ({ id }) => v == id) !== -1) { // eslint-disable-line\n            dialog.error(trans(\"warehouse.sku.pivot.pallet.exist\"));\n            return;\n        }\n\n        warehouseApi.palletBoxes.create({\n            box_id: v,\n            pallet_id: currentPallet?.id,\n            quantity: 1\n        })\n            .then(() => {\n                // Xử lý khi cập nhật số lượng box trên pallet thành công\n                dispatch(updatePalletData({ palletId: currentPallet?.id }));\n                dialog.success(trans(\"warehouse.sku.pivot.pallet.create.success\"));\n            })\n            .catch(() => {\n                dialog.error(trans(\"warehouse.sku.pivot.pallet.create.failure\"));\n            })\n    }\n\n    useEffect(() => {\n        return () => {\n            dispatch(performEntryAction.resetStorage());\n        }\n    }, []); // eslint-disable-line\n\n    useEffect(() => {\n        if (currentPallet?.pivot_boxes) {\n            currentPallet.pivot_boxes.forEach((b, bIdx) => {\n                inputChangePivotRef.current[bIdx].value = b?.current_quantity || 0;\n            });\n        }\n    }, [currentPallet])\n\n    const handleKeyPress = (e) => {\n        if (e.charCode === 13) addBoxToPallet();\n    }\n\n    const addBoxToPallet = () => {\n        const boxID = inputAddSKURef.current.value;\n\n        if (!boxID?.length) return;\n\n        inputAddSKURef.current.value = '';\n\n        if (_.findIndex(currentPallet?.pivot_boxes || [], ({ box_id }) => box_id == boxID) !== -1) { // eslint-disable-line\n            dialog.error(trans(\"warehouse.sku.pivot.pallet.exist\"));\n            return;\n        }\n\n        warehouseApi.palletBoxes.create({\n            box_id: boxID,\n            pallet_id: currentPallet?.id,\n            quantity: 1\n        })\n            .then(() => {\n                // Xử lý khi cập nhật số lượng box trên pallet thành công\n                dispatch(updatePalletData({ palletId: currentPallet?.id }));\n                dialog.success(trans(\"warehouse.sku.pivot.pallet.create.success\"));\n            })\n            .catch(() => {\n                dialog.error(trans(\"warehouse.sku.pivot.pallet.create.failure\"));\n            })\n    }\n\n    const handleRemoveBoxOutPallet = (palletBox, idx) => {\n        boxRef.current[idx].style.background = 'rgba(246, 78, 95, .1)';\n\n        warehouseApi.palletBoxes.delete(palletBox.id)\n            .then((res) => {\n                dispatch(updatePalletData({ palletId: currentPallet?.id }));\n                dialog.success(trans(\"warehouse.sku.pivot.pallet.delete.success\"));\n            })\n            .catch((err) => {\n                console.error(err);\n                dialog.error(trans(\"warehouse.sku.pivot.pallet.delete.failure\"));\n            })\n            .finally(() => {\n                if (boxRef.current[idx]) boxRef.current[idx].style.background = '';\n            })\n    }\n\n    const callApiChangePivot = (boxPallet, quantity, idx) => {\n\n        boxRef.current[idx].style.background = 'rgba(246, 78, 95, .1)';\n\n        warehouseApi.palletBoxes.update(boxPallet.id, {\n            quantity\n        })\n            .then((res) => {\n                // Xử lý khi cập nhật số lượng box trên pallet thành công\n                dispatch(updatePalletData({ palletId: currentPallet?.id }));\n                dialog.success(trans(\"warehouse.sku.pivot.pallet.update_quantity.success\"));\n            })\n            .catch((err) => {\n                console.error(err);\n                dialog.error(trans(\"warehouse.sku.pivot.pallet.update_quantity.failure\"));\n                inputChangePivotRef.current[idx].value = getQuantityBoxWithCurrentPallet(boxPallet);\n            })\n            .finally(() => {\n                if (boxRef.current[idx]) boxRef.current[idx].style.background = '';\n            })\n    }\n\n    const getQuantityBoxWithCurrentPallet = useCallback((boxPallet) => {\n        if (!currentPallet) return 0;\n\n        return boxPallet.current_quantity || 0;\n\n    }, [currentPallet]);\n\n    const handlePressInputQuantity = (boxPallet, e, idx) => {\n        if (e.charCode === 13) {\n            callApiChangePivot(boxPallet, inputChangePivotRef.current[idx].value, idx);\n        }\n    }\n\n    const handleChangePalletType = (type_id) => {\n        warehouseApi.pallet.update(currentPallet.id, { type_id })\n            .then(() => {\n                dialog.success(trans(\"warehouse.pallet.update.success\"));\n\n                dispatch(performEntryAction.updateCurrentPallet({ type_id }))\n            })\n            .catch((err) => {\n                console.erorr(err);\n\n                dialog.error(trans(\"warehouse.pallet.update.failure\"))\n            })\n    }\n\n    return (\n        <div className=\"list-box-in-pallet\">\n            <div className=\"head\">\n                <div className=\"d-flex flex-column\">\n                    <div className=\"title\">{trans(\"warehouse.sku.pivot.pallet.title\")}</div>\n                    <NeedPermission need={['pallets.update']}>\n                        <SelectPalletType\n                            value={currentPallet?.type_id}\n                            isDisabled={!currentPallet?.type_id}\n                            onChange={handleChangePalletType}\n                        />\n                    </NeedPermission>\n                </div>\n                <div className=\"toolbar\">\n                    <NeedPermission need={['pallet-boxes.create']}>\n                        <input\n                            className=\"form-control\"\n                            disabled={!currentPallet}\n                            placeholder={trans(\"warehouse.sku.pivot.pallet.create.title\")}\n                            ref={inputAddSKURef}\n                            onKeyPress={handleKeyPress}\n                        />\n                    </NeedPermission>\n                </div>\n            </div>\n            <div className=\"list-box position-relative\">\n                {loading && <Loading local />}\n                <div className=\"list-box-items\">\n                    {!currentPallet?.pivot_boxes?.length ? (\n                        <EmptyData emptyText={trans(\"warehouse.sku.pivot.pallet.empty\")} />\n                    ) : ''}\n                    <NeedPermission need={'pallet-boxes.index'}>\n                        {!!currentPallet?.pivot_boxes && currentPallet?.pivot_boxes.map((boxPallet, idx) => (\n                            <div className=\"box-wrapper position-relative\" key={`box-${idx}`} ref={ref => boxRef.current[idx] = ref}>\n                                <BoxItem box={{ ...boxPallet.box, quantityOnPallet: boxPallet.current_quantity }} showQuantity={box => box.quantityOnPallet || 0} />\n                                <div className=\"pivot-quantity\">\n                                    <label htmlFor=\"\">{trans(\"common.quantity\")}:</label>\n                                    <NeedPermission need={'pallet-boxes.update'} fallback={(<span>{boxPallet.current_quantity}</span>)}>\n                                        <input\n                                            ref={ref => inputChangePivotRef.current[idx] = ref}\n                                            className=\"input-change-pivot form-control\"\n                                            type=\"number\"\n                                            onKeyPress={e => handlePressInputQuantity(boxPallet, e, idx)}\n                                        />\n                                    </NeedPermission>\n                                </div>\n                                <span className=\"close-icon position-absolute\" onClick={() => handleRemoveBoxOutPallet(boxPallet, idx)}>×</span>\n                                {boxPallet?.box?.sfa_id !== params?.sfa_id && <span className=\"other-sfa\">Other SFA</span>}\n                            </div>\n                        ))}\n                    </NeedPermission>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nListBox.propTypes = {\n\n};\n\nexport default ListBox;","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\n\nimport { getAllPalletIDFromBoxList, performEntryAction, updatePalletData } from 'app/modules/Warehouse/warehouse-redux/performEntrySlice';\n\nimport { Card, CardBody, CardHeader } from '_metronic/_partials/controls';\nimport ListPallet from 'app/modules/Warehouse/components/List/ListPallet';\nimport ListBoxOnPallet from 'app/modules/Warehouse/components/List/ListBoxOnPallet';\n\nimport './index.scss';\nimport useTrans from 'helper/useTrans';\n\nconst StorageBox = props => {\n\n    const palletsPagination = useSelector(state => state.warehouse.performEntry.storage.pallets.pagination);\n    const dispatch = useDispatch();\n    const params = useParams();\n    const [trans] = useTrans();\n\n    useEffect(() => {\n        if (params?.sfa_id) {\n            dispatch(getAllPalletIDFromBoxList({ sfa_id: params?.sfa_id, page: palletsPagination.page }))\n        }\n    }, [params?.sfa_id, palletsPagination.page]); // eslint-disable-line\n\n    const handleSelectPallet = (pallet) => {\n        dispatch(performEntryAction.setCurrentPallet(pallet));\n    }\n\n    const handleAddPallet = (palletId) => {\n        dispatch(updatePalletData({ palletId }))\n    }\n\n    const handlePagePalletsChange = (page) => {\n        dispatch(performEntryAction.setListPalletsPage(page));\n    }\n\n    return (\n        <Card className=\"position-relative storage-b-x-card\">\n            <CardHeader title={trans(\"MENU.WAREHOUSE.STORAGE_GOODS\")}></CardHeader>\n            <CardBody className=\"storage-box-container\">\n                <div className=\"row\">\n                    <div className=\"col-lg-4 col-md-4 col-sm-12\">\n                        <ListPallet onSelect={handleSelectPallet} onAddPallet={handleAddPallet} pagination={palletsPagination} onChangePage={handlePagePalletsChange} />\n                    </div>\n                    <div className=\"col-lg-8 col-md-8 col-sm-12\">\n                        <ListBoxOnPallet />\n                    </div>\n                </div>\n            </CardBody>\n        </Card>\n    );\n};\n\nStorageBox.propTypes = {\n\n};\n\nexport default StorageBox;","import React from 'react';\nimport { useHistory, useRouteMatch } from 'react-router-dom';\n\nimport { toAbsoluteUrl } from '_metronic/_helpers';\n\nimport { Card, CardHeader, CardHeaderToolbar } from '_metronic/_partials/controls';\nimport { Button } from 'react-bootstrap';\nimport SVG from 'react-inlinesvg';\n\nconst Header = props => {\n    const history = useHistory();\n    const match = useRouteMatch();\n\n    const handleGoNext = () => {\n        history.push(`/warehouse/inbound/step-4/${match?.params?.sfa_id}`)\n    }\n\n    const goBack = () => {\n        history.goBack();\n    }\n\n    return (\n        <Card>\n            <CardHeader title={(\n                <div>\n                    <Button variant=\"link\" onClick={goBack}>\n                        <SVG src={toAbsoluteUrl(\n                            '/media/svg/icons/Navigation/Arrow-left.svg'\n                        )} />\n                    </Button>\n                        Lưu hàng\n                </div>\n            )}>\n                <CardHeaderToolbar>\n                    <Button variant=\"success\" onClick={handleGoNext} className=\"ml-3 btn-large\">Tiếp theo</Button>\n                </CardHeaderToolbar>\n            </CardHeader>\n        </Card>\n    );\n};\n\nHeader.propTypes = {\n\n};\n\nexport default Header;","import React, {useEffect} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\n\nimport { fetchSFA } from 'app/modules/Warehouse/warehouse-redux/sfaSlice';\n\nimport StorageBox from './StorageBox';\nimport NotFound from 'app/components/NotFound';\nimport Header from './Header';\nimport PerformStep from '../PerformStep';\n\nconst StorageBoxPage = props => {\n\n    const { data: sfa, loading } = useSelector(state => state.warehouse.sfa.detail);\n    const dispatch = useDispatch();\n    const params = useParams();\n\n    useEffect(() => {\n        if (params?.sfa_id) {\n            dispatch(fetchSFA({ id: params?.sfa_id, with: 'boxes;receipts' }))\n        }\n    }, [params?.sfa_id]); // eslint-disable-line\n\n    if (!sfa && !loading) return <NotFound />\n\n    return (\n        <>\n            <PerformStep />\n            <div className=\"storage-box position-relative\">\n                <Header />\n                <StorageBox />\n            </div>\n        </>\n    );\n};\n\nStorageBoxPage.propTypes = {\n\n};\n\nexport default StorageBoxPage;","import { fetchSFA } from \"app/modules/Warehouse/warehouse-redux/sfaSlice\";\nimport { useDispatch } from \"react-redux\"\nimport { useParams } from \"react-router\";\n\nexport default function useF5SFA() {\n    const dispatch = useDispatch();\n    const params = useParams();\n\n    const f5SFAData = () => {\n        return dispatch(fetchSFA({ id: params?.sfa_id, with: 'boxes.childs.items;agency;receipts;boxes.items' }))\n    }\n\n    return f5SFAData;\n}","import React from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport { toAbsoluteUrl } from '_metronic/_helpers';\n\nimport { Card, CardBody, CardHeader } from '_metronic/_partials/controls';\nimport { Button } from 'react-bootstrap';\nimport SVG from 'react-inlinesvg';\nimport useTrans from 'helper/useTrans';\n\nconst Header = props => {\n    const history = useHistory();\n    const [trans] = useTrans();\n\n    const goBack = () => {\n        history.goBack();\n    }\n\n    return (\n        <Card style={{ height: 'auto' }}>\n            <CardHeader title={(\n                <div>\n                    <Button variant=\"link\" onClick={goBack}>\n                        <SVG src={toAbsoluteUrl(\n                            '/media/svg/icons/Navigation/Arrow-left.svg'\n                        )} />\n                    </Button>\n                        {trans(\"MENU.WAREHOUSE.PACK_BOX\")}\n                </div>\n            )}>\n            </CardHeader>\n            <CardBody className=\"mention\">\n                <div className=\"title\">* Ví dụ:</div>\n                <div className=\"text-exg\"> - Có 100 thùng với id [*********001] được lưu trữ ở pallet [P**]</div>\n                <div className=\"text-exg\"> - Nếu user muốn chọn 4 thùng để thực hiện gộp thùng, user phải thực hiện những bước sau: </div>\n                <div className=\"step-exg\"> + Trở lại bước lưu hàng</div>\n                <div className=\"step-exg\"> + Chọn pallet bất kỳ chứa thùng [*********001] cụ thể ở đây là pallet [P**]</div>\n                <div className=\"step-exg\"> + Giảm số lượng thùng [*********001] trên pallet xuống ít nhất [100 - 4 = 96 thùng]</div>\n                <div className=\"step-exg\"> + Quay trở lại bước đóng gói, lúc này user có thể tách 4 thùng ra khỏi 100 thùng để gộp thùng.</div>\n                <div className=\"text-danger\">* Các thùng được lấy ra thao tác không được nằm trên pallet nào.</div>\n            </CardBody>\n        </Card>\n    );\n};\n\nHeader.propTypes = {\n\n};\n\nexport default Header;","import React, { useMemo, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\n\nimport { boxAction, fetchBox } from 'app/modules/Warehouse/warehouse-redux/boxSlice';\nimport warehouseApi from 'apis/warehouse';\nimport { toAbsoluteUrl } from '_metronic/_helpers';\nimport formatNumber from 'helper/formatNumber';\nimport useTrans from 'helper/useTrans';\nimport { getTemplateData } from 'helper/printerTemplateData';\nimport { startPrinter } from 'app/components/PrinterModal';\nimport useF5SFA from '../hooks/useF5SFA';\n\nimport SVG from 'react-inlinesvg';\nimport { dialog } from 'app/components/DialogNotify';\nimport { Card, CardBody } from '_metronic/_partials/controls';\nimport { performEntryAction } from 'app/modules/Warehouse/warehouse-redux/performEntrySlice';\nimport { Button } from 'react-bootstrap';\nimport Barcode from 'react-barcode';\nimport ProgressBar from 'react-bootstrap/ProgressBar'\nimport CreateNewBox from 'app/modules/Warehouse/components/PerformEntry/CreateNewBox';\n\nimport './index.scss';\nimport usePermission from 'app/components/NeedPermission/usePermission';\n\nconst ParentBox = () => {\n\n    const [showModalUpdateBox, setShowModalUpdateBox] = useState(false);\n    const currentBox = useSelector(state => state.warehouse.box.detail.data);\n    const listTempBox = useSelector(state => state.warehouse.performEntry.packaging.childrens);\n    const inputParentRef = useRef();\n    const inputPackingCostRef = useRef();\n    const dispatch = useDispatch();\n    const params = useParams();\n    const [trans] = useTrans();\n    const f5SFAData = useF5SFA();\n    const canMakeBoxRelative = usePermission(['boxes.create', 'boxes.update'], 'and');\n    const canUpdateBox = usePermission(['boxes.update']);\n\n    const toggleModalUpdateBox = () => { setShowModalUpdateBox(!showModalUpdateBox) };\n\n    const handlePressInputParent = (e) => {\n        if (e.charCode === 13) callApiGetParent();\n    }\n\n    const callApiGetParent = () => {\n        dispatch(fetchBox({ id: inputParentRef.current.value, with: 'childs;items' }))\n            .then((res) => {\n                if (res.type.includes('fulfilled')) {\n                    dialog.success(trans(\"warehouse.sku.get.success\"));\n\n                    mapTempChildToParentBox(res.payload.id)\n                } else {\n                    dialog.error(trans(\"warehouse.sku.get.failure\"));\n                }\n            })\n    }\n\n    const mapTempChildToParentBox = (box_parent_id) => {\n\n        if (!listTempBox?.length) return;\n\n        Promise.all(listTempBox.map(b => {\n            return warehouseApi.box.update(b.id, { box_parent_id })\n        })).then(() => {\n            dispatch(performEntryAction.removeTempChildBox('all'));\n            dispatch(fetchBox({ id: box_parent_id, with: 'childs' }));\n            f5SFAData();\n        })\n    }\n\n    const handleCreateBoxSuccess = (box) => {\n        dialog.success(trans(\"warehouse.sku.create.success\"));\n        inputParentRef.current.value = box.id;\n        startPrinter(getTemplateData('SKU',\n            {\n                ...box,\n                sku: box?.id,\n                quantity: box?.duplicate || 1,\n                tracking: box?.sfa?.tracking,\n                sfaId: box?.sfa?.id\n            }\n        ));\n        callApiGetParent();\n    }\n\n    const callApiCreateANewBox = () => {\n        return warehouseApi.box.create({\n            duplicate: 1,\n            height: 1,\n            length: 1,\n            sfa_id: params?.sfa_id,\n            weight_per_box: 1,\n            width: 1,\n        })\n            .then(handleCreateBoxSuccess)\n            .catch(() => {\n                dialog.error(trans(\"warehouse.sku.create.failure\"));\n            })\n    }\n\n    const currentChildVolume = useMemo(() => {\n\n        if (!currentBox || !currentBox?.childs?.length) return 0;\n\n        return currentBox.childs.reduce((prevV, curV) => prevV + curV.volume, 0);\n    }, [currentBox]);\n\n    const updateBoxSuccess = () => {\n        dispatch(fetchBox({ id: currentBox?.id, with: 'childs;items' }))\n    }\n\n    const handleClearData = () => {\n        dispatch(boxAction.setBoxDetailData(undefined));\n    }\n\n    const handlePressInputPackingCost = (e) => {\n        if (e.charCode === 13) {\n            handleSavePackingCost();\n        }\n    }\n\n    const handleSavePackingCost = () => {\n        let value = inputPackingCostRef.current.value;\n\n        if (!value || value === currentBox?.packing_cost_per_box) return;\n\n        inputPackingCostRef.current.style.borderColor = '#fadb14';\n        warehouseApi.box.update(currentBox?.id, { packing_cost_per_box: value })\n            .then((res) => {\n                dialog.success(trans(\"warehouse.sku.update.packing_cost.success\"));\n                inputPackingCostRef.current.style.borderColor = '#52c41a';\n            })\n            .catch((err) => {\n                console.error(err);\n                inputPackingCostRef.current.style.borderColor = '#f5222d';\n\n                dialog.error(trans(\"warehouse.sku.update.packing_cost.failure\"));\n                inputPackingCostRef.current.value = currentBox?.packing_cost_per_box;\n            });\n    }\n\n    return (\n        <Card className=\"parent-box-container\">\n            <CardBody>\n                {!currentBox && (\n                    <div className=\"input-add-parent\">\n                        <input\n                            className=\"form-control\"\n                            ref={inputParentRef}\n                            onKeyPress={handlePressInputParent}\n                            placeholder=\"Parent SKU\"\n                            disabled={!canMakeBoxRelative}\n                        />\n                        {canMakeBoxRelative && (\n                            <>\n                                {trans(\"warehouse.sku.not_have.sku\")}?\n                                <Button variant=\"link\" onClick={callApiCreateANewBox}>{trans(\"warehouse.sku.create.title\")}</Button>\n                            </>\n                        )}\n                    </div>\n                )}\n\n                {currentBox && (\n                    <div className=\"parent-box-section__content\">\n                        <div className=\"header-section\">\n                            <div className=\"title\">\n                                {trans(\"warehouse.sku.parent.title\")}\n                            </div>\n                            <div className=\"extra-action\">\n                                <Button variant=\"link\" onClick={handleClearData}>\n                                    {trans(\"warehouse.sku.parent.other\")}\n                                </Button>\n                            </div>\n                        </div>\n                        <div className=\"icon-section\">\n                            <SVG\n                                src={toAbsoluteUrl(\n                                    '/media/svg/icons/Shopping/open-box.svg'\n                                )}\n                            ></SVG>\n                            <div className=\"bar-code\">\n                                <Barcode value={currentBox?.id || \"0\"} textPosition=\"top\" height={40} />\n                            </div>\n                        </div>\n\n                        <div className=\"volume-progress-section\">\n                            <ProgressBar\n                                animated\n                                max={currentBox?.volume_per_box}\n                                now={currentChildVolume}\n                                label={<span className=\"progress-label\">{formatNumber(currentChildVolume)} / {formatNumber(currentBox?.volume_per_box)}</span>}\n                                variant=\"success\"\n                            />\n                        </div>\n\n                        <div className=\"box-packing-cost form-group\">\n                            <label htmlFor=\"\">{trans(\"warehouse.cost.packing\")}</label>\n                            <div className=\"d-flex align-items-center\">\n                                <input\n                                    defaultValue={currentBox?.packing_cost_per_box || 0}\n                                    placeholder={trans(\"warehouse.cost.packing\")}\n                                    className=\"form-control\"\n                                    onKeyPress={handlePressInputPackingCost}\n                                    ref={inputPackingCostRef}\n                                    disabled={!canUpdateBox}\n                                />\n                                <button disabled={!canUpdateBox} className=\"btn btn-success btn-large ml-3 btn-packing-cost\" onClick={handleSavePackingCost}>{trans(\"common.save\")}</button>\n                            </div>\n                        </div>\n\n                        <div className=\"content-section\">\n                            <div className=\"box-info row\">\n                                <div className=\"col-lg-4 col-md-6 col-sm-6\">\n                                    <span className=\"title\">{trans(\"common.volume\")}:</span> {formatNumber(currentBox?.volume)}\n                                </div>\n                                <div className=\"col-lg-4 col-md-6 col-sm-6\">\n                                    <span className=\"title\">{trans(\"warehouse.box_item.quantity\")}:</span> {formatNumber(currentBox?.items?.length)}\n                                </div>\n                                <div className=\"col-lg-4 col-md-6 col-sm-6\">\n                                    <span className=\"title\">{trans(\"warehouse.sku.duplicate\")}:</span> {formatNumber(currentBox?.duplicate)}\n                                </div>\n                            </div>\n                        </div>\n\n                        <div className=\"action-section\">\n                            <button disabled={!canUpdateBox} className=\"btn btn-primary\" onClick={toggleModalUpdateBox}>{trans(\"common.edit\")}</button>\n                        </div>\n                    </div>\n                )}\n\n                <CreateNewBox\n                    show={showModalUpdateBox}\n                    onSuccess={updateBoxSuccess}\n                    initialValues={currentBox}\n                    onHide={toggleModalUpdateBox}\n                    isHaveDuplicate={false}\n                />\n            </CardBody>\n        </Card>\n    );\n};\n\nParentBox.propTypes = {\n\n};\n\nexport default ParentBox;","import React from 'react';\n\nimport { BarcodeInput } from '_metronic/_partials/controls';\nimport { Form, FastField, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport FormStatus from '../FormStatus';\nimport { isSKUCode } from 'helper/useScanBarcode';\nimport { toAbsoluteUrl } from '_metronic/_helpers';\nimport SVG from 'react-inlinesvg';\n\nimport './index.scss';\nimport useTrans from 'helper/useTrans';\n\nconst FormAddChild = ({\n    initialValues = {\n        box_id: '',\n        box_parent_id: \"\"\n    },\n    onSubmit\n}, ref) => {\n\n    const [trans] = useTrans();\n\n    const validationSchema = Yup.object().shape({\n        box_id: Yup.string().required(trans(\"validation.message.required\"))\n    });\n\n    return (\n        <Formik\n            initialValues={initialValues}\n            validationSchema={validationSchema}\n            onSubmit={onSubmit}\n            enableReinitialize\n            innerRef={ref}\n        >\n            {({ handleSubmit }) => (\n                <div className=\"d-flex\">\n                    <Form className=\"form form-label-right\">\n                        <FastField\n                            name=\"box_id\"\n                            component={BarcodeInput}\n                            placeholder={trans(\"warehouse.sku.children\")}\n                            condition={isSKUCode}\n                            submitOnEnter\n                        />\n\n                        <FormStatus />\n                    </Form>\n\n                    <div className=\"action-submit\">\n                        <span className=\"svg-icon svg-icon-primary svg-icon-3x\" onClick={handleSubmit}>\n                            <SVG\n                                src={toAbsoluteUrl(\n                                    '/media/svg/icons/Code/Plus.svg'\n                                )}\n                            ></SVG>\n                        </span>\n                    </div>\n                </div>\n            )}\n        </Formik>\n    );\n};\n\nexport default React.forwardRef(FormAddChild);\n","import React, { useImperativeHandle, useState } from 'react';\nimport CustomModal from 'app/components/CustomModal';\nimport { Button, Modal } from 'react-bootstrap';\nimport { useParams } from 'react-router-dom';\n\nimport './ModalNotEnoughVolume.scss';\nimport useTrans from 'helper/useTrans';\n\nconst ModalNotEnoughVolume = ({ onOk = () => null }, ref) => {\n\n    const [show, setShow] = useState(false);\n    const [data, setData] = useState();\n    const params = useParams();\n    const [trans] = useTrans();\n\n    useImperativeHandle(ref, () => ({\n        toggle: (newChildId) => {\n            setShow(!show);\n            setData(newChildId);\n        }\n    }));\n\n    const toggleModal = () => setShow(!show);\n\n    const handleOk = () => {\n        toggleModal();\n        onOk(data);\n    }\n\n    return (\n        <CustomModal className=\"modal-not-enough-volume\" title={trans(\"common.confirm\")} show={show} onHide={toggleModal}>\n            <Modal.Body>\n                <p\n                    dangerouslySetInnerHTML={{\n                        __html: trans(\"warehouse.sku.child.add.over_volume.question\",\n                            { box_id: params?.box_id, child_id: data?.id || '' })\n                    }}\n                ></p>\n                <p>{trans(\"warehouse.sku.child.add.over_volume.continue\")}</p>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={toggleModal} className=\"btn-large\">{trans(\"common.cancel\")}</Button>\n                <Button variant=\"primary\" onClick={handleOk} className=\"btn-large\">{trans(\"common.ok\")}</Button>\n            </Modal.Footer>\n        </CustomModal>\n    );\n};\n\nexport default React.forwardRef(ModalNotEnoughVolume);","import React, { useMemo, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport warehouseApi from 'apis/warehouse';\nimport handleApiError from 'helper/handleApiError';\nimport { performEntryAction } from 'app/modules/Warehouse/warehouse-redux/performEntrySlice';\n\nimport { dialog } from 'app/components/DialogNotify';\nimport FormAddChild from 'app/modules/Warehouse/components/Form/FormAddChild';\nimport Loading from 'app/components/Loading';\nimport ModalNotEnoughVolume from './ModalNotEnoughVolume';\nimport useTrans from 'helper/useTrans';\nimport useF5SFA from '../hooks/useF5SFA';\n\nconst AddChilds = ({ onSuccess }) => {\n\n    const currentBox = useSelector(state => state.warehouse.box.detail.data);\n    const [loading, setLoading] = useState(false);\n    const params = useParams();\n    const modalRef = useRef();\n    const formRef = useRef();\n    const dispatch = useDispatch();\n    const [trans] = useTrans();\n    const f5SFAData = useF5SFA();\n\n    const handleAddChild = async (values) => {\n        try {\n            setLoading(true);\n            formRef.current.resetForm();\n\n            const [checkedRes, box] = await isEnoughVolumeForNewBox(values.box_id);\n\n            if (!checkedRes) {\n                modalRef.current.toggle(box);\n\n                setLoading(false);\n                return;\n            }\n\n            addChild(box);\n        } catch (err) {\n            handleApiError(err, formRef.current);\n            setLoading(false);\n            dialog.error(trans(\"warehouse.sku.get.failure\"));\n        }\n    }\n\n    const addChild = (childBox) => {\n\n        if (!currentBox?.id) {\n            dispatch(performEntryAction.addTempChildBox(childBox));\n            setLoading(false);\n\n            return;\n        }\n\n        warehouseApi.box\n            .update(childBox.id, { box_parent_id: currentBox?.id })\n            .then(() => {\n                f5SFAData();\n                dialog.success(trans(\"warehouse.sku.child.add.success\"));\n                onSuccess && onSuccess();\n            })\n            .catch(err => {\n                dialog.error(trans(\"warehouse.sku.child.add.failure\"));\n                handleApiError(err, formRef.current);\n            })\n            .finally(() => {\n                setLoading(false);\n            });\n    }\n\n    const isEnoughVolumeForNewBox = (box_id) => {\n        return warehouseApi.box.fetchBox(box_id)\n            .then(box => {\n                if (availableCurrentBoxVolume === -1) return [true, box];\n                return [box.volume < availableCurrentBoxVolume, box];\n            })\n    }\n\n    const availableCurrentBoxVolume = useMemo(() => {\n        if (!currentBox) return -1;\n\n        if (!currentBox?.childs?.length) return currentBox.volume;\n\n        const boxChildsVolume = currentBox.childs.reduce((p, c) => p + c.volume, 0);\n\n        return currentBox.volume - boxChildsVolume;\n    }, [currentBox]);\n\n    const forceAddChild = (box) => {\n        addChild(box);\n    }\n\n    return (\n        <>\n            <ModalNotEnoughVolume ref={modalRef} onOk={forceAddChild} />\n            <div className=\"position-relative\">\n                {loading && <Loading local />}\n                <FormAddChild\n                    onSubmit={handleAddChild}\n                    ref={formRef}\n                    initialValues={{ box_id: '', box_parent_id: params?.box_id }}\n                />\n            </div>\n        </>\n    );\n};\n\nAddChilds.propTypes = {\n    onSuccess: PropTypes.func,\n};\n\nexport default AddChilds;","import React, { useMemo, useRef, useEffect, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport formatNumber from 'helper/formatNumber';\nimport { toAbsoluteUrl } from '_metronic/_helpers';\nimport warehouseApi from 'apis/warehouse';\nimport { performEntryAction } from 'app/modules/Warehouse/warehouse-redux/performEntrySlice';\nimport { fetchBox } from 'app/modules/Warehouse/warehouse-redux/boxSlice';\nimport _ from 'lodash';\nimport useTrans from 'helper/useTrans';\nimport useF5SFA from '../hooks/useF5SFA';\nimport { getTemplateData } from 'helper/printerTemplateData';\nimport { startPrinter } from 'app/components/PrinterModal';\n\nimport SVG from 'react-inlinesvg';\nimport CustomTable from 'app/components/CustomTable';\nimport { Card, CardBody } from '_metronic/_partials/controls';\nimport { dialog } from 'app/components/DialogNotify';\nimport ModalConfirm from 'app/modules/Warehouse/components/ModalConfirm';\n\nimport './index.scss';\nimport NeedPermission from 'app/components/NeedPermission';\n\nconst TableBoxChilds = () => {\n\n    const currentBox = useSelector(state => state.warehouse.box.detail.data);\n    const listTempBox = useSelector(state => state.warehouse.performEntry.packaging.childrens);\n    const listAgency = useSelector(state => state.warehouse.agency.list);\n    const dispatch = useDispatch();\n    const inputQuantityRef = useRef([]);\n    const modalConfirmRef = useRef([]);\n    const [trans] = useTrans();\n    const f5SFAData = useF5SFA();\n\n    useEffect(() => {\n        return () => {\n            dispatch(performEntryAction.removeTempChildBox('all'))\n        }\n    }, []); // eslint-disable-line\n\n    useEffect(() => {\n        if (currentBox?.childs?.length) {\n            currentBox.childs.forEach(b => {\n                inputQuantityRef.current[b.id].value = b.child_quantity || b.duplicate;\n            });\n        }\n    }, [currentBox]);\n\n    useEffect(() => {\n        if (listTempBox?.length) {\n            listTempBox.forEach(b => {\n                inputQuantityRef.current[b.id].value = b.child_quantity || b.duplicate;\n            });\n        }\n    }, [listTempBox]);\n\n    const columns = useMemo(() => ([\n        {\n            id: 'id', title: trans(\"warehouse.sfa.title\"), render: (sku, row) => (\n                <div>\n                    <div className=\"sku\">{sku}</div>\n                    <div>\n                        <small>Vol: {formatNumber(row.volume)}</small> <br />\n                        <small className=\"text-primary\">Size: {row.width} × {row.height} × {row.length}</small>\n                    </div>\n                </div>\n            )\n        },\n        {\n            id: 'duplicate',\n            title: trans(\"common.quantity\"),\n            render: (duplicate, box) => (\n                <NeedPermission\n                    need={['boxes.create', 'boxes.update']}\n                    permissionJoin=\"and\"\n                    fallback={<span>{duplicate}</span>}\n                >\n                    <input\n                        className='form-control'\n                        ref={r => inputQuantityRef.current[box.id] = r}\n                        type=\"number\"\n                        min={0}\n                        max={duplicate}\n                        onKeyPress={(e) => { e.persist(); handleChangeChildQuantity(box, e); }}\n                    />\n                </NeedPermission>\n            )\n        },\n        {\n            id: 'sfa_id', title: '', render: (sfa_id, { id }) => (\n                <div className=\"actions\">\n                    <NeedPermission\n                        need={['boxes.delete', 'boxes.update']}\n                        permissionJoin=\"and\"\n                    >\n                        <button\n                            className=\"btn btn-icon btn-light btn-hover-danger btn-sm\"\n                            onClick={() => handleRemoveBoxChild(id)}\n                        >\n                            <span className=\"svg-icon svg-icon-md svg-icon-danger\">\n                                <SVG\n                                    src={toAbsoluteUrl(\n                                        '/media/svg/icons/General/Trash.svg'\n                                    )}\n                                ></SVG>\n                            </span>\n                        </button>\n                    </NeedPermission>\n                </div>\n            )\n        }\n    ]), [currentBox]); // eslint-disable-line\n\n    const handleRemoveBoxChild = (childId) => {\n        if (currentBox?.id) {\n            callApiRemoveChildBox(childId);\n        } else {\n            dispatch(performEntryAction.removeTempChildBox(childId));\n        }\n    }\n\n    const handleChangeChildQuantity = useCallback((box, evt) => {\n\n        if (evt.charCode !== 13) return;\n\n        const child_quantity = Number(inputQuantityRef.current[box.id].value) || 0;\n\n        if (box.duplicate <= child_quantity) return;\n\n        // Trường hợp đã có box_parent\n        if (currentBox?.id) {\n            warehouseApi.box.decouple(box.id, child_quantity)\n                .then(res => {\n                    askUserToPrintLabel(res.duplicated);\n\n                    // Gỡ box cũ ra khỏi thùng\n                    warehouseApi.box.update(box.id, { box_parent_id: '' })\n                        .then(() => {\n\n                            // Lấy lại dữ liệu của thùng cha\n                            dispatch(fetchBox({ id: currentBox?.id, with: 'childs' }));\n\n                            f5SFAData();\n                        })\n                })\n                .catch((err) => {\n                    let errMessage = trans(\"warehouse.sku.update.quantity.failure\");\n\n                    if (err?.response?.data?.errors?.message) errMessage = err.response.data.errors.message\n                    dialog.error(errMessage);\n\n                    evt.target.value = box?.duplicate || 1;\n                });\n        } else {\n            // Trường hợp chưa có thùng cha\n            warehouseApi.box.decouple(box.id, child_quantity)\n                .then(res => {\n                    askUserToPrintLabel(res.duplicated);\n\n                    // Thêm box vừa tách ra vào list box dự phòng trong store\n                    dispatch(performEntryAction.addTempChildBox(res.duplicated));\n                    dispatch(performEntryAction.removeTempChildBox(res.id));\n\n                    f5SFAData();\n                })\n                .catch((err) => {\n                    let errMessage = trans(\"warehouse.sku.update.quantity.failure\");\n\n                    if (err?.response?.data?.errors?.message) errMessage = err.response.data.errors.message\n                    dialog.error(errMessage);\n\n                    evt.target.value = box?.duplicate || 1;\n                });\n        }\n    }, [currentBox]); // eslint-disable-line\n\n    const callApiRemoveChildBox = (childId) => {\n        warehouseApi.box.update(childId, { box_parent_id: '' })\n            .then(() => {\n                f5SFAData();\n\n                dispatch(fetchBox({ id: currentBox.id, with: 'childs;items' }))\n                dialog.success(trans(\"warehouse.sku.child.remove.success\"));\n            })\n            .catch(() => {\n                dialog.error(trans(\"warehouse.sku.child.remove.failure\"));\n            })\n    }\n\n    const askUserToPrintLabel = (box) => {\n        modalConfirmRef.current.open({\n            title: trans(\"warehouse.sku.child.add.print_label.question\", { box_id: box.id }),\n            ...box,\n        });\n    }\n\n    const printNewBoxLabel = (box) => {\n\n        const matchedAgency = _.find(listAgency, ({ id }) => id == box?.sfa?.agency_id); // eslint-disable-line\n\n        startPrinter(getTemplateData('SKU',\n            {\n                ...box,\n                ...box?.sfa,\n                sku: box.id,\n                sfaId: box?.sfa?.id,\n                region: matchedAgency?.name || 'Tokyo',\n                quantity: box.duplicate\n            }\n        ));\n    }\n\n    return (\n        <Card className=\"table-box-childs\">\n            <CardBody>\n                <CustomTable\n                    columns={columns}\n                    rows={currentBox?.childs || listTempBox}\n                    page={1}\n                    lastpage={1}\n                    isViewEdit={false}\n                    isDelete={false}\n                    isAction={false}\n                    noSTT\n                />\n\n                <ModalConfirm\n                    onOk={printNewBoxLabel}\n                    ref={modalConfirmRef}\n                />\n            </CardBody>\n        </Card>\n\n    );\n};\n\nTableBoxChilds.propTypes = {\n\n};\n\nexport default TableBoxChilds;\n","import { fetchBox } from 'app/modules/Warehouse/warehouse-redux/boxSlice';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Card, CardBody } from '_metronic/_partials/controls';\nimport AddChilds from '../AddChilds';\nimport TableBoxChilds from '../TableBoxChilds';\n\nimport './index.scss';\n\nconst ChildrenBoxes = props => {\n\n    const currentBox = useSelector(state => state.warehouse.box.detail.data);\n    const dispatch = useDispatch();\n\n    const f5DataBox = () => {\n        dispatch(fetchBox({ id: currentBox?.id, with: 'childs' }))\n    }\n\n    return (\n        <Card className=\"children-boxes\">\n            <CardBody>\n                <AddChilds onSuccess={f5DataBox} />\n                <TableBoxChilds onRefresh={f5DataBox} />\n            </CardBody>\n        </Card>\n    );\n};\n\nChildrenBoxes.propTypes = {\n\n};\n\nexport default ChildrenBoxes;","import React from 'react';\n\nimport ParentBox from '../ParentBox';\nimport ChildrenBoxes from '../ChildrenBoxes';\n\nimport './index.scss';\n\nconst Packaging = () => {\n    return (\n        <div className=\"packaging\">\n            <div className=\"row\">\n                <div className=\"col-lg-6 col-sm-12\"><ChildrenBoxes /></div>\n                <div className=\"col-lg-6 col-sm-12\"><ParentBox /></div>\n            </div>\n        </div>\n    );\n};\n\nPackaging.propTypes = {\n};\n\nexport default Packaging;","import React, { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { boxAction } from 'app/modules/Warehouse/warehouse-redux/boxSlice';\nimport useF5SFA from './hooks/useF5SFA';\n\nimport Header from './Header';\nimport PerformStep from '../PerformStep';\nimport NotFound from 'app/components/NotFound';\nimport Loading from 'app/components/Loading';\nimport ListBox from 'app/modules/Warehouse/components/List/ListBox';\nimport Packaging from './Packaging';\n\nimport './index.scss';\n\nconst PackagingProduct = props => {\n\n    const { data: sfa, loading } = useSelector(state => state.warehouse.sfa.detail);\n    const dispatch = useDispatch();\n    const params = useParams();\n    const f5SFAData = useF5SFA();\n\n    useEffect(() => {\n        dispatch(boxAction.setBoxDetailData(undefined));\n\n        if (params?.sfa_id) f5SFAData();\n    }, [params?.sfa_id]); // eslint-disable-line\n\n    if (!sfa && !loading) return <NotFound />\n\n    return (\n        <>\n            <PerformStep />\n            <div className=\"packaging-product position-relative\">\n                {loading && <Loading local />}\n                <div className=\"row\">\n                    <div className=\"col-lg-9 col-md-12 col-sm-12\">\n                        <Header />\n                        <Packaging />\n                    </div>\n                    <div className=\"col-lg-3 col-md-3 col-sm-12 ipad-hidden\">\n                        <ListBox\n                            showTotalItems\n                            showQuantity={(b) => b.duplicate}\n                            showRelative\n                        />\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n\nPackagingProduct.propTypes = {\n\n};\n\nexport default PackagingProduct;","import React from 'react';\nimport { Route, useRouteMatch, Redirect, Switch } from 'react-router-dom';\n\nimport Step1CreateSFA from './Step1_CreateSFA';\nimport Step2CheckTheGoods from './Step2_CheckTheGoods';\nimport Step3StorageBox from './Step3_StorageBox';\nimport Step4PackagingProduct from './Step4_PackagingProduct';\nimport ModalConfirmStep2 from '../../components/PerformEntry/ModalConfirmStep2';\n\nimport './index.scss';\n\nconst PerformEntryPage = props => {\n    const match = useRouteMatch();\n\n    return (\n        <div className=\"perform-entry-page p-5\">\n            <ModalConfirmStep2 />\n            <Switch>\n                <Redirect exact={true} from=\"/warehouse/inbound\" to=\"/warehouse/inbound/step-1\" />\n\n                <Route path={`${match.path}/step-1`}>\n                    <Step1CreateSFA />\n                </Route>\n\n                <Route path={`${match.path}/step-2/:sfa_id/:box_id?`}>\n                    <Step2CheckTheGoods />\n                </Route>\n\n                <Route path={`${match.path}/step-3/:sfa_id`}>\n                    <Step3StorageBox />\n                </Route>\n\n                <Route path={`${match.path}/step-4/:sfa_id`}>\n                    <Step4PackagingProduct />\n                </Route>\n            </Switch>\n        </div>\n    );\n};\n\nPerformEntryPage.propTypes = {};\n\nexport default PerformEntryPage;\n","import React, { useEffect, useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { settingsAction } from 'app/modules/Warehouse/warehouse-redux/settingSlice';\nimport _ from 'lodash';\n\nimport Select from 'react-select';\n\nimport './index.scss';\nimport useTrans from 'helper/useTrans';\n\nconst DefaultAgency = props => {\n    const agencyList = useSelector(state => state.warehouse.agency.list);\n    const default_agency = useSelector(\n        state => state.warehouse.settings.default_agency\n    );\n    const [value, setValue] = useState();\n\n    const dispatch = useDispatch();\n    const [trans] = useTrans();\n\n    useEffect(() => {\n\n        if(!value?.value) return;\n\n        if (value?.value !== default_agency) dispatch(settingsAction.changeDefaultAgency(value?.value));\n    }, [value, default_agency]); // eslint-disable-line\n\n    useEffect(() => {\n        if (!agencyList.length || !default_agency) return;\n\n        if (value) return;\n\n        const matchedDefaultAgency = _.find(agencyList, ['id', default_agency]);\n\n        if (matchedDefaultAgency) setValue({ label: matchedDefaultAgency.name, value: matchedDefaultAgency.id });\n\n    }, [agencyList, default_agency, value]);\n\n    const handleChange = (selectedOptions) => {\n        setValue(selectedOptions)\n    };\n\n    const selectOptions = useMemo(() => {\n        return agencyList.map(agency => ({\n            label: agency.name,\n            value: agency.id\n        }))\n    }, [agencyList]);\n\n    return (\n        <div className=\"row default-agency\">\n            <div className=\"col-lg-4 custom-label\">{trans(\"warehouse.settings.default_agency\")}:</div>\n            <div className=\"col-lg-6\">\n                <Select\n                    className=\"react-cm-select\"\n                    value={value}\n                    options={selectOptions}\n                    onChange={handleChange}\n                />\n            </div>\n        </div>\n    );\n};\n\nDefaultAgency.propTypes = {};\n\nexport default DefaultAgency;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { settingsAction } from 'app/modules/Warehouse/warehouse-redux/settingSlice';\nimport _ from 'lodash';\nimport { printerSocketConfig } from 'config/printerSocket';\n\nimport { dialog } from 'app/components/DialogNotify';\n\nimport './index.scss';\nimport useTrans from 'helper/useTrans';\n\nconst PrinterSettings = props => {\n\n    const [ipServer, setIPServer] = useState();\n    const [loading, setLoading] = useState(false);\n    const defaultIPServer = useSelector(\n        state => state.warehouse.settings.printer.socketServer\n    );\n\n    const dispatch = useDispatch();\n    const [trans] = useTrans();\n\n    useEffect(() => {\n        setIPServer(defaultIPServer);\n    }, []); // eslint-disable-line\n\n    useEffect(() => {\n        if (ipServer && ipServer !== defaultIPServer) dispatchValueToRedux(ipServer);\n    }, [ipServer, defaultIPServer]); // eslint-disable-line\n\n    const handleChangeInput = (e) => {\n        setIPServer(e.target.value);\n    }\n\n    const handleTryToConnect = () => {\n        setLoading(true);\n\n        const websocket = new WebSocket(ipServer + '?encoding=text', printerSocketConfig);\n\n        websocket.onopen = function (evt) {\n            setLoading(false);\n            dialog.success(trans(\"printer.connect_success\"));\n            websocket.close();\n        };\n\n        websocket.onerror = function (evt) {\n            setLoading(false);\n            dialog.error(trans(\"printer.connect_failure_x_ip\", { ip: ipServer }));\n            websocket.close();\n        };\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const dispatchValueToRedux = useCallback(_.debounce(v => {\n        dispatch(settingsAction.changePrinterSocketServer(v));\n    }, 700), []); // eslint-disable-line\n\n    return (\n        <div className=\"row printer-settings mt-5\">\n            <div className=\"col-lg-4 custom-label\">{trans(\"warehouse.settings.default_ip_server\")}:</div>\n            <div className=\"col-lg-6 d-flex\">\n                <input\n                    value={ipServer || ''}\n                    onChange={handleChangeInput}\n                    className=\"form-control\"\n                />\n\n                <button className=\"btn btn-primary ml-3\" onClick={handleTryToConnect} disabled={loading}>{trans(\"printer.connect\")}</button>\n            </div>\n        </div>\n    );\n};\n\nPrinterSettings.propTypes = {\n\n};\n\nexport default PrinterSettings;","import React, { useMemo } from 'react';\nimport { useHistory, Route, useRouteMatch } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport warehouseApi from 'apis/warehouse';\nimport useColumn from './useColumns';\nimport useTrans from 'helper/useTrans';\nimport { toAbsoluteUrl } from '_metronic/_helpers';\nimport { startPrinter } from 'app/components/PrinterModal';\nimport { getTemplateData } from 'helper/printerTemplateData';\nimport _ from 'lodash';\n\nimport SVG from 'react-inlinesvg';\nimport CustomTable from 'app/components/CustomTable';\nimport ModalConfirmDelete from '../../ModalConfirmDelete';\nimport { dialog } from 'app/components/DialogNotify';\nimport EmptyData from 'app/components/EmptyData';\n\nimport './index.scss';\nimport NeedPermission from 'app/components/NeedPermission';\n\nconst TableLocationList = ({ onRefresh, dataTable = [] }) => {\n\n    const history = useHistory();\n    const match = useRouteMatch();\n    const columns = useColumn();\n    const [trans] = useTrans();\n\n    const handleConfirmDelete = rowId => {\n        history.push(`${match.url}/delete-location/${rowId}`);\n    };\n\n    const handleDelete = rowId => {\n        warehouseApi.location\n            .delete(rowId)\n            .then(() => {\n                onRefresh && onRefresh();\n                dialog.success(trans(\"warehouse.location.delete.success\"));\n            })\n            .catch(() => {\n                dialog.error(trans(\"warehouse.location.delete.failure\"));\n            });\n    };\n\n    const handleRePrintLabel = (row) => {\n        startPrinter(getTemplateData('LOCATION', {\n            locationId: row.id,\n            floor: row.floor,\n            row: row.row,\n            column: row.column,\n            quantity: 2\n        }));\n    }\n\n    const additionalActions = useMemo(() => ([\n        row => (\n            <button\n                className=\"btn btn-icon btn-light btn-hover-primary btn-sm mr-2\"\n                onClick={() => handleRePrintLabel(row)}\n            >\n                <span className=\"svg-icon svg-icon-success\">\n                    <SVG\n                        src={toAbsoluteUrl(\n                            '/media/svg/icons/Devices/Printer.svg'\n                        )}\n                    ></SVG>\n                </span>\n            </button>\n\n        )\n    ]), []); // eslint-disable-line\n\n    const sortedDataTable = useMemo(() => {\n        return _.sortBy(dataTable, ['shelve_id', 'floor', 'row', 'column']);\n    }, [dataTable]);\n\n    if (!dataTable.length) return <EmptyData emptyText={trans(\"warehouse.location.empty\")} />;\n\n    return (\n        <>\n            <NeedPermission need={['locations.delete']}>\n                <Route path={`${match.path}/delete-location/:location_id`}>\n                    {({ match }) => (\n                        <ModalConfirmDelete\n                            id={match?.params?.location_id}\n                            show={match != null}\n                            onConfirmed={handleDelete}\n                            title={trans(\"warehouse.location.delete.title\")}\n                        />\n                    )}\n                </Route>\n            </NeedPermission>\n\n            <CustomTable\n                columns={columns}\n                rows={sortedDataTable}\n                onDelete={handleConfirmDelete}\n                isViewEdit={false}\n                rowKey=\"id\"\n                className=\"table-locations\"\n                additionalActions={additionalActions}\n                noSTT\n                permissions={{\n                    delete: ['locations.delete']\n                }}\n            />\n        </>\n    );\n};\n\nTableLocationList.propTypes = {\n    onRefresh: PropTypes.func\n};\n\nexport default TableLocationList;\n","import React from 'react';\n\nimport useTrans from 'helper/useTrans';\n\nexport default function useColumn() {\n\n    const [trans] = useTrans();\n\n    return [\n        {\n            id: 'id',\n            title: trans(\"warehouse.location.title\"),\n        },\n        {\n            id: 'shelve',\n            title: trans(\"warehouse.shelve.title\"),\n            render: (shelve, {floor, row, column}) => (\n                <div className=\"shelve\">\n                    <div className=\"shelve--id\">{trans(\"warehouse.shelve.title\")}: {shelve.id}</div>\n                    <div className=\"shelve--for-location\">\n                        <div>{trans(\"common.floor\")}: {floor}</div>\n                        <div>{trans(\"common.row\")}: {row}</div>\n                        <div>{trans(\"common.column\")}: {column}</div>\n                    </div>\n                </div>\n            )\n        },\n        {\n            id: 'pallets', \n            title: trans(\"common.status\"),\n            render: (pallets) => pallets?.length ? <span className=\"tag occupied\">{trans(\"common.occupied\")}</span> : <span className=\"tag available\">{trans(\"common.available\")}</span>\n        }\n    ]\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { fetchAreas } from '../../warehouse-redux/areaSlice';\nimport useTrans from 'helper/useTrans';\n\nimport TMNBaseSelect from 'app/components/Select/BaseSelect';\n\nimport './index.scss';\n\nconst makeOption = (item) => ({\n    value: item.id,\n    label: `Mã: ${item.id} - ${item.name}`\n});\n\nconst SelectArea = ({ onChange, value, showLabel = true, ...props }) => {\n    const areaList = useSelector(state => state.warehouse.area.list);\n    const loading = useSelector(state => state.warehouse.area.loading);\n    const dispatch = useDispatch();\n    const [trans] = useTrans();\n\n    const areaOptions = areaList?.map(item => makeOption(item));\n\n    const handleSelect = option => {\n        onChange && onChange(option.value);\n    };\n\n    const fetchData = (params) => {\n        dispatch(fetchAreas(params));\n    }\n\n    return (\n        <TMNBaseSelect\n            value={value}\n            label={showLabel && trans(\"warehouse.area.title\")}\n            className=\"select-area\"\n            placeholder={trans(\"warehouse.area.title\")}\n            options={areaOptions}\n            onChange={handleSelect}\n            isLoading={loading}\n            onFetchData={fetchData}\n            typeSearch='name'\n            {...props}\n        />\n    );\n};\n\nSelectArea.propTypes = {\n    onSelectContainerType: PropTypes.func,\n    value: PropTypes.any,\n    showLabel: PropTypes.bool\n};\n\nexport default SelectArea;\n","import React, { useRef, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useHistory } from 'react-router';\n\nimport { startPrinter } from 'app/components/PrinterModal';\nimport { getTemplateData } from 'helper/printerTemplateData';\nimport handleApiError from 'helper/handleApiError';\nimport warehouseApi from 'apis/warehouse';\nimport useTrans from 'helper/useTrans';\n\nimport CustomModal from 'app/components/CustomModal';\nimport { Modal } from 'react-bootstrap';\nimport FormAddLocation from 'app/modules/Warehouse/components/Form/FormAddLocation';\nimport Button from 'app/components/Button';\n\nconst ModalAddLocation = ({ show, onHide, onSuccess }) => {\n\n    const [loading, setLoading] = useState();\n    const areaList = useSelector(state => state.warehouse.area.list);\n    const history = useHistory();\n    const formRef = useRef();\n    const [trans] = useTrans();\n\n    const handleSaveLocation = (values, form) => {\n        setLoading(true);\n        warehouseApi.location.create(values)\n            .then((res) => {\n                startPrinter(getTemplateData('LOCATION', {\n                    locationId: res.id,\n                    floor: res.floor,\n                    row: res.row,\n                    column: res.column,\n                    quantity: 2\n                }));\n\n                onSuccess && onSuccess(res);\n                closeModal();\n            })\n            .catch((err) => {\n                console.error(err);\n                handleApiError(err, form);\n            })\n            .finally(() => {\n                setLoading(false);\n            })\n    }\n\n    const closeModal = () => {\n        if (onHide) onHide();\n        else history.goBack();\n    }\n\n    const triggerSubmit = () => {\n        formRef.current.submitForm();\n    }\n\n    return (\n        <CustomModal\n            show={show}\n            onHide={closeModal}\n            title={trans(\"warehouse.location.create.title\")}\n            actionsLoading={loading}\n        >\n            <Modal.Body>\n                <FormAddLocation\n                    initialValues={{\n                        area_id: areaList?.[0]?.id,\n                        shelve_id: '',\n                        floor: 1,\n                        row: 1,\n                        column: 1\n                    }}\n                    onSubmit={handleSaveLocation}\n                    ref={formRef}\n                />\n            </Modal.Body>\n            <Modal.Footer>\n                <Button type=\"secondary\" loading={loading} onClick={closeModal} className=\"btn-large\">{trans(\"common.back\")}</Button>\n                <Button type=\"primary\" loading={loading} onClick={triggerSubmit} className=\"btn-large\">{trans(\"common.save\")}</Button>\n            </Modal.Footer>\n        </CustomModal>\n    );\n};\n\nModalAddLocation.propTypes = {\n\n};\n\nexport default ModalAddLocation;","import React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { fetchShelves } from 'app/modules/Warehouse/warehouse-redux/shelveSlice';\nimport useTrans from 'helper/useTrans';\n\nimport TMNBaseSelect from '../BaseSelect';\n\nconst SelectShelve = ({ onChange, value, showLabel = true, ...props }) => {\n    const shelveList = useSelector(state => state.warehouse.shelve.list.data);\n    const loading = useSelector(state => state.warehouse.shelve.list.loading);\n    const dispatch = useDispatch();\n    const [trans] = useTrans();\n\n    const makeOption = useCallback((i) => ({\n        value: i.id,\n        label: trans(\"warehouse.shelve.option_label\", {\n            id: i.id,\n            shelve_info: `F${i?.floor} . R${i?.row} . C${i?.column}`\n        })\n    }), [trans]);\n\n    const shelveOptions = shelveList?.map(item => makeOption(item));\n\n    const handleSelect = option => {\n        onChange && onChange(option.value);\n    };\n\n    const fetchData = (params) => {\n        dispatch(fetchShelves(params));\n    }\n\n    return (\n        <TMNBaseSelect\n            value={value}\n            label={showLabel && trans(\"warehouse.shelve.find\")}\n            placeholder={trans(\"warehouse.shelve.find\")}\n            className=\"select-shelve\"\n            options={shelveOptions}\n            onChange={handleSelect}\n            loading={loading}\n            onFetchData={fetchData}\n            {...props}\n        />\n    );\n};\n\nSelectShelve.propTypes = {\n    onChange: PropTypes.func,\n    value: PropTypes.any,\n    showLabel: PropTypes.bool\n};\n\nexport default SelectShelve;\n","import React, { useState } from 'react';\nimport { Route, useHistory, useRouteMatch } from 'react-router';\n\nimport useTrans from 'helper/useTrans';\nimport useLocationList from './useLocationList';\n\nimport { Card, CardBody, CardHeader, CardHeaderToolbar } from '_metronic/_partials/controls';\nimport TableLocationList from 'app/modules/Warehouse/components/Table/TableLocationList';\nimport SelectArea from 'app/modules/Warehouse/components/SelectArea';\nimport Loading from 'app/components/Loading';\nimport ModalCreateLocation from './ModalCreateLocation';\nimport SelectShelve from 'app/components/Select/SelectShelve';\n\nimport './index.scss';\nimport NeedPermission from 'app/components/NeedPermission';\n\nconst LocationManagament = props => {\n\n    const [selectedArea, setSelectedArea] = useState();\n    const [selectedShelve, setSelectedShelve] = useState();\n    const [trans] = useTrans();\n    const match = useRouteMatch();\n    const history = useHistory();\n\n    const { dataTable, loading, f5Data } = useLocationList(selectedArea, selectedShelve);\n\n    const handleChangeArea = (area_id) => {\n        setSelectedArea(area_id);\n    }\n\n    const handleChangeShelve = (shelve_id) => {\n        setSelectedShelve(shelve_id);\n    }\n\n    const openModalCreateLocation = () => {\n        history.push(`${match.url}/create-location`);\n    }\n\n    return (\n        <>\n            <NeedPermission need={['locations.create']}>\n                <Route path={`${match.path}/create-location`}>\n                    {({ match }) => (\n                        <ModalCreateLocation\n                            show={match !== null}\n                            onSuccess={f5Data}\n                        />\n                    )}\n                </Route>\n            </NeedPermission>\n\n            <Card className=\"location-management\">\n                <CardHeader title={trans(\"warehouse.location.title\")}>\n                    <NeedPermission need={['locations.create']}>\n                        <CardHeaderToolbar>\n                            <button className=\"btn btn-primary\" onClick={openModalCreateLocation}>{trans(\"warehouse.location.create.title\")}</button>\n                        </CardHeaderToolbar>\n                    </NeedPermission>\n                </CardHeader>\n                <CardBody>\n                    <div className=\"d-flex filter-section\">\n                        <SelectArea value={selectedArea} onChange={handleChangeArea} dispatchFirstOption />\n                        <SelectShelve value={selectedShelve} onChange={handleChangeShelve} />\n                    </div>\n\n                    <div className=\"position-relative\">\n                        <TableLocationList dataTable={dataTable} onRefresh={f5Data} />\n                        {loading && <Loading local />}\n                    </div>\n                </CardBody>\n            </Card>\n        </>\n    );\n};\n\nexport default LocationManagament;","\nimport warehouseApi from 'apis/warehouse';\nimport { dialog } from 'app/components/DialogNotify';\nimport useTrans from 'helper/useTrans';\nimport { useEffect, useState } from 'react';\nimport _ from 'lodash';\n\nexport default function useLocationList(areaId, shelveId) {\n\n    const [loading, setLoading] = useState(false);\n    const [dataTable, setDataTable] = useState([]);\n    const [trans] = useTrans();\n\n    useEffect(() => {\n        if (areaId) getLocationsByAreaId();\n    }, [areaId]); // eslint-disable-line\n\n    useEffect(() => {\n        if (shelveId) getLocationsByShelveId();\n    }, [shelveId]); // eslint-disable-line\n\n    const getLocationsByAreaId = () => {\n        setLoading(true);\n        setDataTable([]);\n        warehouseApi.area.fetchArea(areaId, { with: 'shelves.locations.pallets' })\n            .then((res) => {\n                if (res?.shelves?.length) {\n                    let locations = res.shelves.reduce((prevV, curV) => {\n\n                        const locations = curV.locations.map(l => ({...l, shelve: _.omit(curV, ['locations'])}))\n\n                        return [...prevV, ...locations];\n                    }, []);\n\n                    setDataTable(locations);\n                }\n            })\n            .catch((err) => {\n                console.error(err);\n\n                dialog.error(trans(\"warehouse.location.get.failure\"));\n            })\n            .finally(() => {\n                setLoading(false);\n            })\n    }\n\n    const getLocationsByShelveId = () => {\n        setLoading(true);\n        setDataTable([]);\n        warehouseApi.shelve.fetchShelve(shelveId, { with: 'locations.pallets' })\n            .then((res) => {\n                if (res?.locations?.length) {\n                    const locations = res.locations.map(l => ({...l, shelve: _.omit(res, ['locations'])}))\n\n                    setDataTable(locations);\n                }\n            })\n            .catch((err) => {\n                console.error(err);\n\n                dialog.error(trans(\"warehouse.location.get.failure\"));\n            })\n            .finally(() => {\n                setLoading(false);\n            })\n    }\n\n    return { dataTable, loading, f5Data: getLocationsByAreaId };\n}","import React from 'react';\n\nimport { FastField, Formik } from 'formik';\nimport { Input } from '_metronic/_partials/controls';\nimport * as Yup from 'yup';\nimport FormStatus from '../FormStatus';\nimport Form from '../FormEnterIndex';\nimport useTrans from 'helper/useTrans';\n\nimport './index.scss';\n\nfunction FormAddPalletType({\n    formItemClass = 'col-lg-12 col-md-12 col-sm-12',\n    initialValues = {\n        weight: 1,\n        max_width: 1,\n        max_height: 1,\n        max_length: 1,\n        max_weight: 1\n    },\n    onSubmit,\n}, ref) {\n    const [trans] = useTrans();\n\n    const validationSchema = Yup.object().shape({\n        weight: Yup.number()\n            .min(0, trans(\"validation.message.min\", { min: 0 }))\n            .required(trans(\"validation.message.required\")),\n        max_width: Yup.number()\n            .min(0, trans(\"validation.message.min\", { min: 0 }))\n            .required(trans(\"validation.message.required\")),\n        max_height: Yup.number()\n            .min(0, trans(\"validation.message.min\", { min: 0 }))\n            .required(trans(\"validation.message.required\")),\n        max_length: Yup.number()\n            .min(0, trans(\"validation.message.min\", { min: 0 }))\n            .required(trans(\"validation.message.required\")),\n        max_weight: Yup.number()\n            .min(0, trans(\"validation.message.min\", { min: 0 }))\n            .required(trans(\"validation.message.required\")),\n    });\n\n    return (\n        <Formik\n            enableReinitialize\n            initialValues={initialValues}\n            onSubmit={onSubmit}\n            innerRef={ref}\n            validationSchema={validationSchema}\n        >\n            <Form className=\"form form-label-right form-add-pallet-box\">\n                <div className=\"form-group row\">\n                    <div className={formItemClass}>\n                        <FastField\n                            name=\"weight\"\n                            component={Input}\n                            label={trans(\"common.weight\")}\n                            placeholder={trans(\"common.weight\")}\n                            type=\"number\"\n                            autoComplete=\"off\"\n                            min={0}\n                        />\n                    </div>\n\n                    <div className={formItemClass}>\n                        <FastField\n                            name=\"max_width\"\n                            component={Input}\n                            label={trans(\"common.width\")}\n                            placeholder={trans(\"common.width\")}\n                            type=\"number\"\n                            autoComplete=\"off\"\n                            min={0}\n                        />\n                    </div>\n\n                    <div className={formItemClass}>\n                        <FastField\n                            name=\"max_height\"\n                            component={Input}\n                            label={trans(\"common.height\")}\n                            placeholder={trans(\"common.height\")}\n                            type=\"number\"\n                            autoComplete=\"off\"\n                            min={0}\n                        />\n                    </div>\n\n                    <div className={formItemClass}>\n                        <FastField\n                            name=\"max_length\"\n                            component={Input}\n                            label={trans(\"common.length\")}\n                            placeholder={trans(\"common.length\")}\n                            type=\"number\"\n                            autoComplete=\"off\"\n                            min={0}\n                        />\n                    </div>\n\n                    <div className={formItemClass}>\n                        <FastField\n                            name=\"max_weight\"\n                            component={Input}\n                            label={trans(\"common.max_weight\")}\n                            placeholder={trans(\"common.max_weight\")}\n                            type=\"number\"\n                            autoComplete=\"off\"\n                            min={0}\n                        />\n                    </div>\n                </div>\n                <FormStatus />\n            </Form>\n        </Formik>\n    );\n}\n\nexport default React.forwardRef(FormAddPalletType);\n","import React, { useImperativeHandle, useRef, useState } from 'react';\nimport { useHistory } from 'react-router';\n\nimport useTrans from 'helper/useTrans';\nimport warehouseApi from 'apis/warehouse';\n\nimport CustomModal from 'app/components/CustomModal';\nimport { Modal } from 'react-bootstrap';\nimport FormAddPalletType from 'app/modules/Warehouse/components/Form/FormAddPalletType';\nimport { dialog } from 'app/components/DialogNotify';\nimport handleApiError from 'helper/handleApiError';\nimport Button from 'app/components/Button';\n\nconst ModalCreatePalletType = ({ show, onHide, onSuccess, editMode = false, id }, ref) => {\n\n    const [loading, setLoading] = useState();\n    const [initialValues, setInitialValues] = useState();\n    const [trans] = useTrans();\n    const history = useHistory();\n    const formRef = useRef();\n\n    useImperativeHandle(ref, () => ({\n        setInitialData: (data) => {\n            setInitialValues(data)\n        }\n    }));\n\n    const closeModal = () => {\n        if (onHide) onHide();\n        else history.goBack();\n    }\n\n    const handleSubmit = (values, form) => {\n        if (editMode) updatePalletType(values, form);\n        else createPalletType(values, form);\n    }\n\n    const createPalletType = (values, form) => {\n\n        setLoading(true);\n\n        warehouseApi.palletType.create(values)\n            .then(() => {\n                dialog.success(trans(\"warehouse.pallet_type.create.success\"));\n\n                onSuccess && onSuccess();\n                closeModal();\n            })\n            .catch((err) => {\n                dialog.error(trans(\"warehouse.pallet_type.create.failure\"));\n\n                handleApiError(err, form);\n            })\n            .finally(() => {\n                setLoading(false);\n            })\n    }\n\n    const updatePalletType = (values, form) => {\n\n        setLoading(true);\n\n        warehouseApi.palletType.update(id, values)\n            .then(() => {\n                dialog.success(trans(\"warehouse.pallet_type.update.success\"));\n\n                onSuccess && onSuccess();\n                closeModal();\n            })\n            .catch((err) => {\n                dialog.error(trans(\"warehouse.pallet_type.update.failure\"));\n\n                handleApiError(err, form);\n            })\n            .finally(() => {\n                setLoading(false);\n            })\n    }\n\n    const triggerSubmit = () => {\n        formRef.current.submitForm();\n    }\n\n    return (\n        <CustomModal\n            show={show}\n            onHide={closeModal}\n            title={!editMode ? trans(\"warehouse.pallet_type.create.title\") : trans(\"warehouse.pallet_type.update.title\")}\n            actionsLoading={loading}\n        >\n            <Modal.Body>\n                <FormAddPalletType\n                    formItemClass=\"col-lg-4 col-md-6 col-sm-12\"\n                    ref={formRef}\n                    onSubmit={handleSubmit}\n                    initialValues={initialValues}\n                />\n            </Modal.Body>\n            <Modal.Footer>\n                <Button type=\"secondary\" loading={loading} onClick={closeModal}>{trans(\"common.cancel\")}</Button>\n                <Button type=\"primary\" loading={loading} onClick={triggerSubmit}>{trans(\"common.save\")}</Button>\n            </Modal.Footer>\n        </CustomModal>\n    );\n};\n\nexport default React.forwardRef(ModalCreatePalletType);","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Route, useHistory, useRouteMatch } from 'react-router';\n\nimport useTrans from 'helper/useTrans';\nimport useColumns from './useColumns';\nimport warehouseApi from 'apis/warehouse';\n\nimport CustomTable from 'app/components/CustomTable';\nimport EmptyData from 'app/components/EmptyData';\nimport { dialog } from 'app/components/DialogNotify';\nimport ModalConfirmDelete from '../../ModalConfirmDelete';\n\nimport './index.scss';\nimport NeedPermission from 'app/components/NeedPermission';\n\nconst TablePalletTypes = ({ onRefresh, onViewEdit }) => {\n    const dataTable = useSelector(\n        state => state.warehouse.palletType.list.data\n    );\n    const columns = useColumns();\n    const [trans] = useTrans();\n    const history = useHistory();\n    const match = useRouteMatch();\n\n    const handleConfirmDelete = (id) => {\n        history.push(`${match.url}/delete-pallet-type/${id}`);\n    }\n\n    const handleDelete = (id) => {\n        warehouseApi.palletType.delete(id)\n            .then(() => {\n                onRefresh && onRefresh();\n\n                dialog.success(trans(\"warehouse.pallet_type.delete.success\"));\n            })\n            .catch((err) => {\n                console.error(err);\n\n                dialog.error(trans(\"warehouse.pallet_type.delete.failure\"));\n            })\n    }\n\n    if (!dataTable.length) return <EmptyData emptyText={trans(\"warehouse.pallet_type.list.empty\")} />;\n\n    return (\n        <div className=\"table-pallet-type\">\n\n            <NeedPermission need={['pallet-types.delete']}>\n                <Route path={`${match.path}/delete-pallet-type/:pallet_type_id`}>\n                    {({ match }) => (\n                        <ModalConfirmDelete\n                            id={match?.params?.pallet_type_id}\n                            show={match != null}\n                            onConfirmed={handleDelete}\n                            title={trans(\"warehouse.pallet_type.delete.title\")}\n                        />\n                    )}\n                </Route>\n            </NeedPermission>\n\n            <CustomTable\n                columns={columns}\n                rows={dataTable}\n                onDelete={handleConfirmDelete}\n                onViewEdit={onViewEdit}\n                isPagination={false}\n                rowKey=\"id\"\n                noSTT\n                permissions={{\n                    delete: ['pallet-types.delete']\n                }}\n            />\n        </div>\n    );\n};\n\nTablePalletTypes.propTypes = {\n    onRefresh: PropTypes.func\n};\n\nexport default TablePalletTypes;\n","import React from 'react';\n\nimport formatNumber from 'helper/formatNumber';\nimport useTrans from 'helper/useTrans';\n\nexport default function useColumns() {\n\n    const [trans] = useTrans();\n\n    return [\n        {\n            id: 'id',\n            title: trans(\"warehouse.pallet_type.id\"),\n        },\n        {\n            id: 'max_volume',\n            title: trans(\"common.max_volume\"),\n            render: (max_volume) => <b className=\"text-success\">{formatNumber(max_volume)}</b>\n        },\n        {\n            id: 'weight',\n            title: trans(\"common.weight\"),\n            render: (weight, { max_weight }) => (\n                <div className=\"pallet-type__weight\">\n                    <div className=\"weight--empty\">{formatNumber(weight)}</div>\n                    <div className=\"weight--max-weight\">{trans(\"common.max_weight\")}: <b className=\"text-primary\">{formatNumber(max_weight)}</b></div>\n                </div>\n            )\n        },\n        {\n            id: 'max_width',\n            title: trans(\"common.max_width\"),\n            render: max_width => formatNumber(max_width)\n        },\n        {\n            id: \"max_height\",\n            title: trans(\"common.max_height\"),\n            render: max_height => formatNumber(max_height)\n        },\n        {\n            id: \"max_length\",\n            title: trans(\"common.max_length\"),\n            render: max_length => formatNumber(max_length)\n        }\n    ]\n}","import React, { useEffect, useRef } from 'react';\nimport { useHistory, useRouteMatch, Route } from 'react-router';\nimport { useDispatch } from 'react-redux';\n\nimport useTrans from 'helper/useTrans';\nimport { fetchPalletTypes } from 'app/modules/Warehouse/warehouse-redux/palletTypeSlice';\n\nimport { Card, CardBody, CardHeader, CardHeaderToolbar } from '_metronic/_partials/controls';\nimport ModalCreatePalletType from './ModalCreatePalletType';\nimport TablePalletTypes from 'app/modules/Warehouse/components/Table/TablePalletType';\nimport NeedPermission from 'app/components/NeedPermission';\n\nconst PalletType = props => {\n\n    const [trans] = useTrans();\n    const history = useHistory();\n    const match = useRouteMatch();\n    const modalEditPalletTypeRef = useRef();\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        f5Data();\n    }, []); // eslint-disable-line\n\n    const openCreatePalletTypes = () => {\n        history.push(`${match.url}/create-pallet-type`);\n    }\n\n    const f5Data = () => {\n        dispatch(fetchPalletTypes());\n    }\n\n    const handleOpenEditPalletType = (id, palletType) => {\n        modalEditPalletTypeRef.current.setInitialData(palletType);\n\n        history.push(`${match.url}/edit-pallet-type/${id}`);\n    }\n\n    return (\n        <>\n            <NeedPermission need={['pallet-types.create']}>\n                <Route path={`${match.path}/create-pallet-type`}>\n                    {({ match }) => (\n                        <ModalCreatePalletType\n                            show={match !== null}\n                            onSuccess={f5Data}\n                        />\n                    )}\n                </Route>\n            </NeedPermission>\n\n            <NeedPermission need={['pallet-types.update']}>\n                <Route path={`${match.path}/edit-pallet-type/:pallet_type_id`}>\n                    {({ match }) => (\n                        <ModalCreatePalletType\n                            id={match?.params?.pallet_type_id}\n                            show={match !== null}\n                            onSuccess={f5Data}\n                            editMode\n                            ref={modalEditPalletTypeRef}\n                        />\n                    )}\n                </Route>\n            </NeedPermission>\n\n            <Card className=\"pallet-type-managements\">\n                <CardHeader title={trans(\"warehouse.pallet_type.title\")}>\n                    <NeedPermission need={['pallet-types.create']}>\n                        <CardHeaderToolbar>\n                            <button className=\"btn btn-primary\" onClick={openCreatePalletTypes}>{trans(\"warehouse.pallet_type.create.title\")}</button>\n                        </CardHeaderToolbar>\n                    </NeedPermission>\n                </CardHeader>\n                <CardBody>\n                    <TablePalletTypes\n                        onRefresh={f5Data}\n                        onViewEdit={handleOpenEditPalletType}\n                    />\n                </CardBody>\n            </Card>\n        </>\n    );\n};\n\nPalletType.propTypes = {\n\n};\n\nexport default PalletType;","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Route, useHistory, useRouteMatch } from 'react-router';\n\nimport useTrans from 'helper/useTrans';\nimport useColumns from './useColumns';\nimport warehouseApi from 'apis/warehouse';\n\nimport CustomTable from 'app/components/CustomTable';\nimport EmptyData from 'app/components/EmptyData';\nimport { dialog } from 'app/components/DialogNotify';\nimport ModalConfirmDelete from '../../ModalConfirmDelete';\n\nimport './index.scss';\nimport NeedPermission from 'app/components/NeedPermission';\n\nconst TableArea = ({ onRefresh, onViewEdit }) => {\n    const dataTable = useSelector(\n        state => state.warehouse.area.list\n    );\n    const columns = useColumns();\n    const [trans] = useTrans();\n    const history = useHistory();\n    const match = useRouteMatch();\n\n    const handleConfirmDelete = (id) => {\n        history.push(`${match.url}/delete-area/${id}`);\n    }\n\n    const handleDelete = (id) => {\n        warehouseApi.area.delete(id)\n            .then(() => {\n                onRefresh && onRefresh();\n\n                dialog.success(trans(\"warehouse.area.delete.success\"));\n            })\n            .catch((err) => {\n                console.error(err);\n\n                dialog.error(trans(\"warehouse.area.delete.failure\"));\n            })\n    }\n\n    if (!dataTable.length) return <EmptyData emptyText={trans(\"warehouse.area.list.empty\")} />;\n\n    return (\n        <div className=\"table-area\">\n\n            <NeedPermission need={'areas.delete'}>\n                <Route path={`${match.path}/delete-area/:area_id`}>\n                    {({ match }) => (\n                        <ModalConfirmDelete\n                            id={match?.params?.area_id}\n                            show={match != null}\n                            onConfirmed={handleDelete}\n                            title={trans(\"warehouse.area.delete.title\")}\n                        />\n                    )}\n                </Route>\n            </NeedPermission>\n\n            <CustomTable\n                columns={columns}\n                rows={dataTable}\n                onDelete={handleConfirmDelete}\n                onViewEdit={onViewEdit}\n                isPagination={false}\n                rowKey=\"id\"\n                noSTT\n                permissions={{\n                    update: 'areas.update',\n                    delete: 'areas.delete'\n                }}\n            />\n        </div>\n    );\n};\n\nTableArea.propTypes = {\n    onRefresh: PropTypes.func\n};\n\nexport default TableArea;\n","import useTrans from 'helper/useTrans';\n\nexport default function useColumns() {\n\n    const [trans] = useTrans();\n\n    return [\n        {\n            id: 'id',\n            title: trans(\"warehouse.area.title\"),\n        },\n        {\n            id: 'name',\n            title: trans(\"warehouse.area.name\")\n        },\n    ]\n}","import React from 'react';\n\nimport { FastField, Formik } from 'formik';\nimport { Input } from '_metronic/_partials/controls';\nimport * as Yup from 'yup';\nimport FormStatus from '../FormStatus';\nimport Form from '../FormEnterIndex';\nimport useTrans from 'helper/useTrans';\n\nimport './index.scss';\n\nfunction FormAddArea({\n    initialValues = {\n        name: '',\n        id: ''\n    },\n    onSubmit,\n}, ref) {\n    const [trans] = useTrans();\n\n    const validationSchema = Yup.object().shape({\n        id: Yup.string()\n            .required(trans(\"validation.message.required\")),\n\n        name: Yup.string()\n            .required(trans(\"validation.message.required\")),\n    });\n\n    return (\n        <Formik\n            enableReinitialize\n            initialValues={initialValues}\n            onSubmit={onSubmit}\n            innerRef={ref}\n            validationSchema={validationSchema}\n        >\n            <Form className=\"form form-label-right form-add-area\">\n                <div className=\"p-3\">\n                    <FastField\n                        name=\"id\"\n                        component={Input}\n                        label={trans(\"warehouse.area.id\")}\n                        placeholder={trans(\"warehouse.area.id\")}\n                        autoComplete=\"off\"\n                    />\n                </div>\n\n                <div className=\"p-3\">\n                    <FastField\n                        name=\"name\"\n                        component={Input}\n                        label={trans(\"warehouse.area.name\")}\n                        placeholder={trans(\"warehouse.area.name\")}\n                        autoComplete=\"off\"\n                    />\n                </div>\n\n                <FormStatus />\n            </Form>\n        </Formik>\n    );\n}\n\nexport default React.forwardRef(FormAddArea);\n","import React, { useCallback, useImperativeHandle, useRef, useState } from 'react';\n\nimport { useHistory } from 'react-router';\nimport warehouseApi from 'apis/warehouse';\nimport handleApiError from 'helper/handleApiError';\nimport useTrans from 'helper/useTrans';\n\nimport { Modal } from 'react-bootstrap';\nimport CustomModal from 'app/components/CustomModal';\nimport Button from 'app/components/Button';\nimport FormAddArea from 'app/modules/Warehouse/components/Form/FormAddArea';\nimport { dialog } from 'app/components/DialogNotify';\n\nconst ModalCreateArea = ({ show, onHide, onSuccess, editMode = false, id }, ref) => {\n\n    const [loading, setLoading] = useState(false);\n    const [initialValues, setInitialValues] = useState();\n    const [trans] = useTrans();\n    const history = useHistory();\n    const formRef = useRef();\n\n    useImperativeHandle(ref, () => ({\n        setInitialData: (data) => {\n            setInitialValues(data)\n        }\n    }));\n\n    const closeModal = useCallback(() => {\n        if (onHide) onHide();\n        else history.goBack();\n    }, [history, onHide]);\n\n    const triggerSubmit = useCallback(() => {\n        formRef.current.submitForm();\n    }, [formRef]);\n\n    const handleSubmit = (values, form) => {\n        setLoading(true);\n\n        if (editMode) updateArea(values, form);\n        else createArea(values, form);\n    }\n\n    const updateArea = useCallback((values, form) => {\n        warehouseApi.area.update(id, values)\n            .then(() => {\n                dialog.success(trans(\"warehouse.area.update.success\"));\n\n                onSuccess && onSuccess();\n                closeModal();\n            })\n            .catch((err) => {\n                console.error(err);\n\n                dialog.error(trans(\"warehouse.area.update.failure\"));\n                handleApiError(err, form);\n            })\n            .finally(() => {\n                setLoading(false);\n            })\n    }, [id, closeModal, onSuccess, trans]);\n\n    const createArea = useCallback((values, form) => {\n        warehouseApi.area.create(values)\n            .then(() => {\n                dialog.success(trans(\"warehouse.area.create.success\"));\n\n                onSuccess && onSuccess();\n                closeModal();\n            })\n            .catch((err) => {\n                console.error(err);\n\n                dialog.error(trans(\"warehouse.area.create.failure\"));\n                handleApiError(err, form);\n            })\n            .finally(() => {\n                setLoading(false);\n            })\n    }, [onSuccess, closeModal, trans]);\n\n    return (\n        <CustomModal\n            show={show}\n            onHide={closeModal}\n            actionsLoading={loading}\n            title={editMode ? trans(\"warehouse.area.update.title\") : trans(\"warehouse.area.create.title\")}\n        >\n            <Modal.Body>\n                <FormAddArea\n                    initialValues={initialValues}\n                    onSubmit={handleSubmit}\n                    ref={formRef}\n                />\n            </Modal.Body>\n            <Modal.Footer>\n                <Button type=\"secondary\" onClick={closeModal}>{trans(\"common.cancel\")}</Button>\n                <Button type=\"primary\" onClick={triggerSubmit} loading={loading}>{trans(\"common.save\")}</Button>\n            </Modal.Footer>\n        </CustomModal>\n    );\n};\n\nexport default React.forwardRef(ModalCreateArea);","import React, { useCallback, useEffect, useRef } from 'react';\nimport { Route, useHistory, useRouteMatch } from 'react-router';\nimport { useDispatch } from 'react-redux';\n\nimport useTrans from 'helper/useTrans';\n\nimport { Card, CardBody, CardHeader, CardHeaderToolbar } from '_metronic/_partials/controls';\nimport TableArea from 'app/modules/Warehouse/components/Table/TableArea';\nimport { fetchAreas } from 'app/modules/Warehouse/warehouse-redux/areaSlice';\nimport Button from 'app/components/Button';\nimport ModalCreateArea from './ModalCreateArea';\nimport NeedPermission from 'app/components/NeedPermission';\n\nconst AreaManagement = props => {\n\n    const [trans] = useTrans();\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const match = useRouteMatch();\n    const modalEditAreaRef = useRef();\n\n    useEffect(() => {\n        f5Data();\n    }, []); // eslint-disable-line\n\n    const f5Data = useCallback(() => {\n        dispatch(fetchAreas());\n    }, [dispatch]);\n\n    const handleOpenEditArea = useCallback((id, area) => {\n        modalEditAreaRef.current.setInitialData(area);\n\n        history.push(`${match.url}/edit-area/${id}`);\n    }, [history, match.url]);\n\n    const handleOpenCreateArea = useCallback(() => {\n        history.push(`${match.url}/create-area`);\n    }, [history, match.url]);\n\n    return (\n        <>\n            <NeedPermission need={['areas.create']}>\n                <Route path={`${match.path}/create-area`}>\n                    {({ match }) => (\n                        <ModalCreateArea\n                            show={match !== null}\n                            onSuccess={f5Data}\n                        />\n                    )}\n                </Route>\n            </NeedPermission>\n\n            <NeedPermission need={['areas.update']}>\n                <Route path={`${match.path}/edit-area/:id`}>\n                    {({ match }) => (\n                        <ModalCreateArea\n                            ref={modalEditAreaRef}\n                            id={match?.params?.id}\n                            editMode\n                            show={match !== null}\n                            onSuccess={f5Data}\n                        />\n                    )}\n                </Route>\n            </NeedPermission>\n\n            <Card className=\"area-management\">\n                <CardHeader title={trans(\"warehouse.area.title\")}>\n                    <NeedPermission need={['areas.create']}>\n                        <CardHeaderToolbar>\n                            <Button type=\"primary\" onClick={handleOpenCreateArea}>{trans(\"warehouse.area.create.title\")}</Button>\n                        </CardHeaderToolbar>\n                    </NeedPermission>\n                </CardHeader>\n                <CardBody>\n                    <TableArea\n                        onRefresh={f5Data}\n                        onViewEdit={handleOpenEditArea}\n                    />\n                </CardBody>\n            </Card>\n        </>\n    );\n};\n\nexport default AreaManagement;","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Route, useHistory, useRouteMatch } from 'react-router';\n\nimport useTrans from 'helper/useTrans';\nimport useColumns from './useColumns';\nimport warehouseApi from 'apis/warehouse';\n\nimport CustomTable from 'app/components/CustomTable';\nimport EmptyData from 'app/components/EmptyData';\nimport { dialog } from 'app/components/DialogNotify';\nimport ModalConfirmDelete from '../../ModalConfirmDelete';\n\nimport './index.scss';\nimport { shelveAction } from 'app/modules/Warehouse/warehouse-redux/shelveSlice';\nimport NeedPermission from 'app/components/NeedPermission';\n\nconst TableShelve = ({ onRefresh, onViewEdit }) => {\n    const dataTable = useSelector(\n        state => state.warehouse.shelve.list.data\n    );\n    const pagination = useSelector(\n        state => state.warehouse.shelve.list.pagination\n    );\n    const columns = useColumns();\n    const [trans] = useTrans();\n    const history = useHistory();\n    const match = useRouteMatch();\n    const dispatch = useDispatch();\n\n    const handleConfirmDelete = (id) => {\n        history.push(`${match.url}/delete-shelve/${id}`);\n    }\n\n    const handleDelete = (id) => {\n        warehouseApi.shelve.delete(id)\n            .then(() => {\n                onRefresh && onRefresh();\n\n                dialog.success(trans(\"warehouse.shelve.delete.success\"));\n            })\n            .catch((err) => {\n                console.error(err);\n\n                dialog.error(trans(\"warehouse.shelve.delete.failure\"));\n            })\n    }\n\n    const handlePageChange = useCallback((page) => {\n        dispatch(shelveAction.changePage(page));\n    }, [dispatch]);\n\n    if (!dataTable.length) return <EmptyData emptyText={trans(\"warehouse.shelve.list.empty\")} />;\n\n    return (\n        <div className=\"table-goods-deliveries\">\n\n            <NeedPermission need={['shelves.delete']}>\n                <Route path={`${match.path}/delete-shelve/:shelve_id`}>\n                    {({ match }) => (\n                        <ModalConfirmDelete\n                            id={match?.params?.shelve_id}\n                            show={match != null}\n                            onConfirmed={handleDelete}\n                            title={trans(\"warehouse.shelve.delete.title\")}\n                        />\n                    )}\n                </Route>\n            </NeedPermission>\n\n            <CustomTable\n                columns={columns}\n                rows={dataTable}\n                onDelete={handleConfirmDelete}\n                onViewEdit={onViewEdit}\n                page={pagination.page}\n                lastpage={pagination.lastPage}\n                onPageChange={handlePageChange}\n                rowKey=\"id\"\n                noSTT\n                permissions={{\n                    update: 'shelves.update',\n                    delete: 'shelves.delete',\n                }}\n            />\n        </div>\n    );\n};\n\nTableShelve.propTypes = {\n    onRefresh: PropTypes.func\n};\n\nexport default TableShelve;\n","import useTrans from 'helper/useTrans';\n\nexport default function useColumns() {\n\n    const [trans] = useTrans();\n\n    return [\n        {\n            id: 'id',\n            title: trans(\"warehouse.shelve.title\"),\n        },\n        {\n            id: ['area', 'name'],\n            title: trans(\"warehouse.area.name\")\n        },\n        {\n            id: 'floor',\n            title: trans(\"common.floor\")\n        },\n        {\n            id: 'row',\n            title: trans(\"common.row\")\n        },\n        {\n            id: 'column',\n            title: trans(\"common.column\")\n        }\n    ]\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport clsx from 'clsx';\n\nimport SelectArea from './index';\nimport { useField, useFormikContext } from \"formik\";\n\nconst SelectAreaForm = ({ name, ...props }) => {\n\n    const [field, meta] = useField(name);\n    const { setFieldTouched, setFieldValue } = useFormikContext();\n    const { error, touched } = meta;\n\n    const handleClick = () => {\n        setFieldTouched(field.name);\n    }\n\n    const handleChange = (v) => {\n        setFieldValue(name, v);\n    }\n\n    return (\n        <div className={clsx(touched && error && 'is-invalid')}>\n            <SelectArea\n                value={field.value}\n                onChange={handleChange}\n                onClick={handleClick}\n                {...props}\n            />\n\n            {touched && error && (\n                <div className=\"invalid-feedback d-block\">{error}</div>\n            )}\n        </div>\n    );\n};\n\nSelectAreaForm.propTypes = {\n    value: PropTypes.any,\n    onChange: PropTypes.func,\n    withFeedbackLabel: PropTypes.bool\n};\n\nexport default SelectAreaForm;","import React from 'react';\n\nimport useTrans from 'helper/useTrans';\n\nimport { Input } from '_metronic/_partials/controls';\nimport { FastField, Form, Formik } from 'formik';\nimport FormStatus from '../FormStatus';\nimport * as Yup from 'yup';\nimport SelectAreaForm from '../../SelectArea/SelectAreaForm';\n\nimport './index.scss';\n\nconst FormAddShelve = ({\n    onSubmit,\n    initialValues = {\n        area_id: '',\n        floor: 1,\n        row: 1,\n        column: 1\n    }\n}, ref) => {\n    const [trans] = useTrans();\n\n    const validationSchema = Yup.object().shape({\n        area_id: Yup.string().required(trans(\"validation.message.required\")),\n        floor: Yup.number().min(1, trans(\"validation.message.min\", { min: 1 })),\n        row: Yup.number().min(1, trans(\"validation.message.min\", { min: 1 })),\n        column: Yup.number().min(1, trans(\"validation.message.min\", { min: 1 }))\n    });\n\n    return (\n        <Formik\n            initialValues={initialValues}\n            enableReinitialize\n            validationSchema={validationSchema}\n            onSubmit={onSubmit}\n            innerRef={ref}\n        >\n            <Form className=\"form-add-location\">\n                <div className=\"row\">\n                    <div className=\"col-lg-6 col-sm-12\">\n                        <SelectAreaForm\n                            name=\"area_id\"\n                        />\n                    </div>\n\n                    <div className=\"col-lg-6 col-sm-12\">\n                        <FastField\n                            name=\"floor\"\n                            label={trans(\"common.floor\")}\n                            component={Input}\n                            type=\"number\"\n                        />\n                    </div>\n\n                    <div className=\"col-lg-6 col-sm-12\">\n                        <FastField\n                            name=\"row\"\n                            label={trans(\"common.row\")}\n                            component={Input}\n                            type=\"number\"\n                        />\n                    </div>\n\n                    <div className=\"col-lg-6 col-sm-12\">\n                        <FastField\n                            name=\"column\"\n                            label={trans(\"common.column\")}\n                            component={Input}\n                            type=\"number\"\n                        />\n                    </div>\n                </div>\n\n                <FormStatus />\n            </Form>\n        </Formik>\n    );\n};\n\nexport default React.forwardRef(FormAddShelve);","import React, { useCallback, useImperativeHandle, useRef, useState } from 'react';\n\nimport { useHistory } from 'react-router';\nimport warehouseApi from 'apis/warehouse';\nimport handleApiError from 'helper/handleApiError';\nimport useTrans from 'helper/useTrans';\n\nimport { Modal } from 'react-bootstrap';\nimport CustomModal from 'app/components/CustomModal';\nimport Button from 'app/components/Button';\nimport FormAddShelve from 'app/modules/Warehouse/components/Form/FormAddShelve';\nimport { dialog } from 'app/components/DialogNotify';\n\nconst ModalCreateShelve = ({ show, onHide, onSuccess, editMode = false, id }, ref) => {\n\n    const [loading, setLoading] = useState(false);\n    const [initialValues, setInitialValues] = useState();\n    const [trans] = useTrans();\n    const history = useHistory();\n    const formRef = useRef();\n\n    useImperativeHandle(ref, () => ({\n        setInitialData: (data) => {\n            setInitialValues(data)\n        }\n    }));\n\n    const closeModal = useCallback(() => {\n        if (onHide) onHide();\n        else history.goBack();\n    }, [history, onHide]);\n\n    const triggerSubmit = useCallback(() => {\n        formRef.current.submitForm();\n    }, [formRef]);\n\n    const handleSubmit = (values, form) => {\n        setLoading(true);\n\n        if (editMode) updateShelve(values, form);\n        else createShelve(values, form);\n    }\n\n    const updateShelve = useCallback((values, form) => {\n        warehouseApi.shelve.update(id, values)\n            .then(() => {\n                dialog.success(trans(\"warehouse.shelve.update.success\"));\n\n                onSuccess && onSuccess();\n                closeModal();\n            })\n            .catch((err) => {\n                console.error(err);\n\n                dialog.error(trans(\"warehouse.shelve.update.failure\"));\n                handleApiError(err, form);\n            })\n            .finally(() => {\n                setLoading(false);\n            })\n    }, [id, closeModal, onSuccess, trans]);\n\n    const createShelve = useCallback((values, form) => {\n        warehouseApi.shelve.create(values)\n            .then(() => {\n                dialog.success(trans(\"warehouse.shelve.create.success\"));\n\n                onSuccess && onSuccess();\n                closeModal();\n            })\n            .catch((err) => {\n                console.error(err);\n\n                dialog.error(trans(\"warehouse.shelve.create.failure\"));\n                handleApiError(err, form);\n            })\n            .finally(() => {\n                setLoading(false);\n            })\n    }, [onSuccess, closeModal, trans]);\n\n    return (\n        <CustomModal\n            show={show}\n            onHide={closeModal}\n            actionsLoading={loading}\n            title={trans(\"warehouse.shelve.create.title\")}\n        >\n            <Modal.Body>\n                <FormAddShelve\n                    initialValues={initialValues}\n                    onSubmit={handleSubmit}\n                    ref={formRef}\n                />\n            </Modal.Body>\n            <Modal.Footer>\n                <Button type=\"secondary\" onClick={closeModal}>{trans(\"common.cancel\")}</Button>\n                <Button type=\"primary\" onClick={triggerSubmit} loading={loading}>{trans(\"common.save\")}</Button>\n            </Modal.Footer>\n        </CustomModal>\n    );\n};\n\nexport default React.forwardRef(ModalCreateShelve);","import React, { useCallback, useEffect, useRef } from 'react';\nimport { Route, useHistory, useRouteMatch } from 'react-router';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport useTrans from 'helper/useTrans';\nimport { fetchShelves } from 'app/modules/Warehouse/warehouse-redux/shelveSlice';\n\nimport { Card, CardBody, CardHeader, CardHeaderToolbar } from '_metronic/_partials/controls';\nimport TableShelve from 'app/modules/Warehouse/components/Table/TableShelve';\nimport Button from 'app/components/Button';\nimport ModalCreateShelve from './ModalCreateShelve';\nimport NeedPermission from 'app/components/NeedPermission';\n\nconst ShelveManagement = props => {\n\n    const pagination = useSelector(state => state.warehouse.shelve.list.pagination);\n    const [trans] = useTrans();\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const match = useRouteMatch();\n    const modalEditRef = useRef();\n\n    useEffect(() => {\n        f5Data({ page: pagination.page });\n    }, [pagination.page]); // eslint-disable-line\n\n    const f5Data = useCallback((params) => {\n        dispatch(fetchShelves({ with: 'area', ...params }));\n    }, [dispatch]);\n\n    const handleOpenEdit = useCallback((id, shelve) => {\n        modalEditRef.current.setInitialData(shelve);\n\n        history.push(`${match.url}/edit-shelve/${id}`);\n    }, [history, match.url]);\n\n    const handleOpenModalCreate = useCallback(() => {\n        history.push(`${match.url}/create-shelve`);\n    }, [history, match.url]);\n\n    return (\n        <>\n            <NeedPermission need={['shelves.create']}>\n                <Route path={`${match.path}/create-shelve`}>\n                    {({ match }) => (\n                        <ModalCreateShelve\n                            show={match !== null}\n                            onSuccess={f5Data}\n                        />\n                    )}\n                </Route>\n            </NeedPermission>\n\n            <NeedPermission need={['shelves.update']}>\n                <Route path={`${match.path}/edit-shelve/:id`}>\n                    {({ match }) => (\n                        <ModalCreateShelve\n                            ref={modalEditRef}\n                            id={match?.params?.id}\n                            editMode\n                            show={match !== null}\n                            onSuccess={f5Data}\n                        />\n                    )}\n                </Route>\n            </NeedPermission>\n\n            <Card className=\"shelve-management\">\n                <CardHeader title={trans(\"warehouse.shelve.title\")}>\n                    <NeedPermission need={['shelves.create']}>\n                        <CardHeaderToolbar>\n                            <Button type=\"primary\" onClick={handleOpenModalCreate}>{trans(\"warehouse.shelve.create.title\")}</Button>\n                        </CardHeaderToolbar>\n                    </NeedPermission>\n                </CardHeader>\n                <CardBody>\n                    <TableShelve\n                        onRefresh={f5Data}\n                        onViewEdit={handleOpenEdit}\n                    />\n                </CardBody>\n            </Card>\n        </>\n    );\n};\n\nexport default ShelveManagement;","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Route, useHistory, useRouteMatch } from 'react-router';\n\nimport useTrans from 'helper/useTrans';\nimport useColumns from './useColumns';\nimport warehouseApi from 'apis/warehouse';\n\nimport CustomTable from 'app/components/CustomTable';\nimport EmptyData from 'app/components/EmptyData';\nimport { dialog } from 'app/components/DialogNotify';\nimport ModalConfirmDelete from '../../ModalConfirmDelete';\n\nimport './index.scss';\nimport NeedPermission from 'app/components/NeedPermission';\n\nconst TableContainerTypes = ({ onRefresh, onViewEdit }) => {\n    const dataTable = useSelector(\n        state => state.warehouse.containerType.list.data\n    );\n    const columns = useColumns();\n    const [trans] = useTrans();\n    const history = useHistory();\n    const match = useRouteMatch();\n\n    const handleConfirmDelete = (id) => {\n        history.push(`${match.url}/delete-container-type/${id}`);\n    }\n\n    const handleDelete = (id) => {\n        warehouseApi.containerType.delete(id)\n            .then(() => {\n                onRefresh && onRefresh();\n\n                dialog.success(trans(\"warehouse.container_type.delete.success\"));\n            })\n            .catch((err) => {\n                console.error(err);\n\n                dialog.error(trans(\"warehouse.container_type.delete.failure\"));\n            })\n    }\n\n    if (!dataTable.length) return <EmptyData emptyText={trans(\"warehouse.container_type.list.empty\")} />;\n\n    return (\n        <div className=\"table-goods-deliveries\">\n\n            <NeedPermission need={['container-types.delete']}>\n                <Route path={`${match.path}/delete-container-type/:container_type_id`}>\n                    {({ match }) => (\n                        <ModalConfirmDelete\n                            id={match?.params?.container_type_id}\n                            show={match != null}\n                            onConfirmed={handleDelete}\n                            title={trans(\"warehouse.container_type.delete.title\")}\n                        />\n                    )}\n                </Route>\n            </NeedPermission>\n\n            <CustomTable\n                columns={columns}\n                rows={dataTable}\n                onDelete={handleConfirmDelete}\n                onViewEdit={onViewEdit}\n                isPagination={false}\n                rowKey=\"id\"\n                noSTT\n                permissions={{\n                    update: 'container-types.update',\n                    delete: 'container-types.delete',\n                }}\n            />\n        </div>\n    );\n};\n\nTableContainerTypes.propTypes = {\n    onRefresh: PropTypes.func\n};\n\nexport default TableContainerTypes;\n","import formatNumber from 'helper/formatNumber';\nimport getDateOfWeekByNumber from 'helper/getDateOfWeekByNumber';\nimport useTrans from 'helper/useTrans';\n\nexport default function useColumns() {\n\n    const [trans] = useTrans();\n\n    return [\n        {\n            id: 'id',\n            title: trans(\"warehouse.container_type.id\"),\n        },\n        {\n            id: ['shipment_method', 'name'],\n            title: trans(\"warehouse.shipment_method.title\"),\n        },\n        {\n            id: ['to_area', 'name'],\n            title: trans(\"warehouse.container_type.to_area\"),\n        },\n        {\n            id: 'volume',\n            title: trans(\"common.volume\"),\n            render: volume => formatNumber(volume)\n        },\n        {\n            id: 'weight',\n            title: trans(\"common.weight\"),\n            render: weight => formatNumber(weight)\n        },\n        {\n            id: \"day_of_week\",\n            title: trans(\"common.day_of_week\"),\n            render: day_of_week => trans(getDateOfWeekByNumber(day_of_week))\n        },\n    ]\n}","export default function getDateOfWeekByNumber(d_o_w) {\n    switch (d_o_w) {\n        case 1:\n            return \"common.sunday\";\n\n        case 2:\n            return \"common.monday\";\n\n        case 3:\n            return \"common.tuesday\";\n\n        case 4:\n            return \"common.wednesday\";\n\n        case 5:\n            return \"common.thursday\";\n\n        case 6:\n            return \"common.friday\";\n\n        case 7:\n            return \"common.saturday\";\n\n        default:\n\n            return 'common.monday'\n    }\n}","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useTrans from 'helper/useTrans';\n\nimport TMNBaseSelect from '../BaseSelect';\n\nimport './index.scss';\n\nconst SelectDateOfWeek = ({ onChange, value, showLabel = true, ...props }) => {\n    const [trans] = useTrans();\n\n    const options = useMemo(() => ([\n        {value: 2, label: trans(\"common.monday\")},\n        {value: 3, label: trans(\"common.tuesday\")},\n        {value: 4, label: trans(\"common.wednesday\")},\n        {value: 5, label: trans(\"common.thursday\")},\n        {value: 6, label: trans(\"common.friday\")},\n        {value: 7, label: trans(\"common.saturday\")},\n        {value: 1, label: trans(\"common.sunday\")},\n    ]), [trans]);\n\n    const handleSelect = option => {\n        onChange && onChange(option.value);\n    };\n\n    return (\n        <TMNBaseSelect\n            value={value}\n            label={showLabel && trans(\"common.day_of_week\")}\n            placeholder={trans(\"common.pick_here\")}\n            options={options}\n            onChange={handleSelect}\n            className=\"select-date-of-week\"\n            {...props}\n        />\n    );\n};\n\nSelectDateOfWeek.propTypes = {\n    onChange: PropTypes.func,\n    value: PropTypes.any,\n    showLabel: PropTypes.bool\n};\n\nexport default SelectDateOfWeek;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport clsx from 'clsx';\n\nimport SelectDateOfWeek from './index';\nimport { useField, useFormikContext } from \"formik\";\n\nconst SelectDateOfWeekForm = ({ name, ...props }) => {\n\n    const [field, meta] = useField(name);\n    const { setFieldTouched, setFieldValue } = useFormikContext();\n    const { error, touched } = meta;\n\n    const handleClick = () => {\n        setFieldTouched(field.name);\n    }\n\n    const handleChangeCustomer = (v) => {\n        setFieldValue(field.name, v);\n    }\n\n    return (\n        <div className={clsx(touched && error && 'is-invalid')}>\n            <SelectDateOfWeek\n                value={field.value}\n                onChange={handleChangeCustomer}\n                onClick={handleClick}\n                {...props}\n            />\n\n            {touched && error && (\n                <div className=\"invalid-feedback d-block\">{error}</div>\n            )}\n        </div>\n    );\n};\n\nSelectDateOfWeekForm.propTypes = {\n    value: PropTypes.any,\n    onChange: PropTypes.func,\n    withFeedbackLabel: PropTypes.bool\n};\n\nexport default SelectDateOfWeekForm;","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { fetchShipmentMethods } from 'app/modules/Warehouse/warehouse-redux/shipmentMethodSlice';\nimport useTrans from 'helper/useTrans';\n\nimport TMNBaseSelect from '../BaseSelect';\n\nimport './index.scss';\n\nconst makeOption = (item) => {\n    return {\n        value: item.id,\n        label: `${item.name}`\n    }\n}\n\nconst SelectShipmentMethod = ({ onChange, value, ...props }) => {\n    const shipmentMethodList = useSelector(state => state.warehouse.shipmentMethod.list.data)\n    const loading = useSelector(state => state.warehouse.shipmentMethod.list.loading)\n    const dispatch = useDispatch();\n    const [trans] = useTrans();\n\n    const options = useMemo(() => {\n        return shipmentMethodList.map(item => {\n            return makeOption(item);\n        })\n    }, [shipmentMethodList]);\n\n    const handleSelectShipmentMethod = (option) => {\n        onChange && onChange(option.value);\n    }\n\n    const fetchData = (params) => {\n        dispatch(fetchShipmentMethods(params));\n    }\n\n    return (\n        <TMNBaseSelect\n            value={value}\n            label={trans(\"warehouse.shipment_method.title\")}\n            className=\"select-shipment-method\"\n            placeholder={trans(\"common.select_here\")}\n            options={options}\n            onChange={handleSelectShipmentMethod}\n            loading={loading}\n            onFetchData={fetchData}\n            typeSearch='name'\n            {...props}\n        />\n    );\n};\n\nSelectShipmentMethod.propTypes = {\n    onChange: PropTypes.func,\n    value: PropTypes.any,\n};\n\nexport default SelectShipmentMethod;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport clsx from 'clsx';\n\nimport SelectShipmentMethod from './index';\nimport { useField, useFormikContext } from \"formik\";\n\nconst SelectShipmentMethodForm = ({ value, isDisabled, customer_id, ...props }) => {\n\n    const [field, meta, helpers] = useField(props);\n    const { setFieldTouched } = useFormikContext();\n    const { error, touched } = meta;\n\n    const handleClick = () => {\n        setFieldTouched(field.name);\n    }\n\n    const onChange = (v) => {\n        helpers.setValue(v);\n    }\n\n    return (\n        <div className={clsx(touched && error && 'is-invalid')}>\n            <SelectShipmentMethod\n                value={field.value}\n                onChange={onChange}\n                isDisabled={isDisabled}\n                onClick={handleClick}\n            />\n\n            {touched && error && (\n                <div className=\"invalid-feedback d-block\">{error}</div>\n            )}\n        </div>\n    );\n};\n\nSelectShipmentMethodForm.propTypes = {\n    value: PropTypes.any,\n    onChange: PropTypes.func,\n    withFeedbackLabel: PropTypes.bool\n};\n\nexport default SelectShipmentMethodForm;","import React from 'react';\n\nimport useTrans from 'helper/useTrans';\n\nimport { Input } from '_metronic/_partials/controls';\nimport { FastField, Formik } from 'formik';\nimport Form from '../FormEnterIndex';\nimport FormStatus from '../FormStatus';\nimport * as Yup from 'yup';\nimport SelectDateOfWeekForm from 'app/components/Select/SelectDateOfWeek/SelectDateOfWeekForm';\nimport SelectShipmentMethodForm from 'app/components/Select/SelectShipmentMethod/SelectShipmentMethodForm';\nimport SelectAreaForm from '../../SelectArea/SelectAreaForm';\n\nimport './index.scss';\n\nconst FormAddContainerType = ({\n    onSubmit,\n    initialValues = {\n        shipment_method_id: '',\n        volume: 1,\n        weight: 1,\n        day_of_week: 2,\n        to_area_id: ''\n    }\n}, ref) => {\n    const [trans] = useTrans();\n\n    const validationSchema = Yup.object().shape({\n        shipment_method_id: Yup.string().required(trans(\"validation.message.required\")),\n        volume: Yup.number().min(1, trans(\"validation.message.min\", { min: 1 })).required(trans(\"validation.message.required\")),\n        weight: Yup.number().min(1, trans(\"validation.message.min\", { min: 1 })).required(trans(\"validation.message.required\")),\n        day_of_week: Yup.number().required(trans(\"validation.message.required\")),\n        to_area_id: Yup.string().required(trans(\"validation.message.required\"))\n    });\n\n    return (\n        <Formik\n            initialValues={initialValues}\n            enableReinitialize\n            validationSchema={validationSchema}\n            onSubmit={onSubmit}\n            innerRef={ref}\n        >\n            <Form className=\"form-add-container-type\">\n                <div className=\"row\">\n                    <div className=\"col-lg-6 col-sm-12\">\n                        <SelectShipmentMethodForm\n                            name=\"shipment_method_id\"\n                        />\n                    </div>\n\n                    <div className=\"col-lg-6 col-sm-12\">\n                        <SelectDateOfWeekForm name=\"day_of_week\" />\n                    </div>\n\n                    <div className=\"col-lg-6 col-sm-12\">\n                        <SelectAreaForm name=\"to_area_id\" label={trans(\"warehouse.container_type.to_area\")} />\n                    </div>\n\n                    <div className=\"col-lg-6 col-sm-12\">\n                        <FastField\n                            name=\"volume\"\n                            label={trans(\"common.volume\")}\n                            component={Input}\n                            type=\"number\"\n                        />\n                    </div>\n\n                    <div className=\"col-lg-6 col-sm-12\">\n                        <FastField\n                            name=\"weight\"\n                            label={trans(\"common.weight\")}\n                            component={Input}\n                            type=\"number\"\n                        />\n                    </div>\n                </div>\n\n                <FormStatus />\n            </Form>\n        </Formik>\n    );\n};\n\nexport default React.forwardRef(FormAddContainerType);","import React, { useCallback, useImperativeHandle, useRef, useState } from 'react';\n\nimport { useHistory } from 'react-router';\nimport warehouseApi from 'apis/warehouse';\nimport handleApiError from 'helper/handleApiError';\nimport useTrans from 'helper/useTrans';\n\nimport { Modal } from 'react-bootstrap';\nimport CustomModal from 'app/components/CustomModal';\nimport Button from 'app/components/Button';\nimport { dialog } from 'app/components/DialogNotify';\nimport FormAddContainerType from 'app/modules/Warehouse/components/Form/FormAddContainerType';\n\nconst ModalCreateContainerType = ({ show, onHide, onSuccess, editMode = false, id }, ref) => {\n\n    const [loading, setLoading] = useState(false);\n    const [initialValues, setInitialValues] = useState();\n    const [trans] = useTrans();\n    const history = useHistory();\n    const formRef = useRef();\n\n    useImperativeHandle(ref, () => ({\n        setInitialData: (data) => {\n            setInitialValues(data)\n        }\n    }));\n\n    const closeModal = useCallback(() => {\n        if (onHide) onHide();\n        else history.goBack();\n    }, [history, onHide]);\n\n    const triggerSubmit = useCallback(() => {\n        formRef.current.submitForm();\n    }, [formRef]);\n\n    const handleSubmit = (values, form) => {\n        setLoading(true);\n\n        if (editMode) updateContainertype(values, form);\n        else createContainertype(values, form);\n    }\n\n    const updateContainertype = useCallback((values, form) => {\n        warehouseApi.containerType.update(id, values)\n            .then(() => {\n                dialog.success(trans(\"warehouse.container_type.update.success\"));\n\n                onSuccess && onSuccess();\n                closeModal();\n            })\n            .catch((err) => {\n                console.error(err);\n\n                dialog.error(trans(\"warehouse.container_type.update.failure\"));\n                handleApiError(err, form);\n            })\n            .finally(() => {\n                setLoading(false);\n            })\n    }, [id, closeModal, onSuccess, trans]);\n\n    const createContainertype = useCallback((values, form) => {\n        warehouseApi.containerType.create(values)\n            .then(() => {\n                dialog.success(trans(\"warehouse.container_type.create.success\"));\n\n                onSuccess && onSuccess();\n                closeModal();\n            })\n            .catch((err) => {\n                console.error(err);\n\n                dialog.error(trans(\"warehouse.container_type.create.failure\"));\n                handleApiError(err, form);\n            })\n            .finally(() => {\n                setLoading(false);\n            })\n    }, [onSuccess, closeModal, trans]);\n\n    return (\n        <CustomModal\n            show={show}\n            onHide={closeModal}\n            actionsLoading={loading}\n            title={editMode ? trans(\"warehouse.container_type.update.title\") : trans(\"warehouse.container_type.create.title\")}\n        >\n            <Modal.Body>\n                <FormAddContainerType\n                    initialValues={initialValues}\n                    onSubmit={handleSubmit}\n                    ref={formRef}\n                />\n            </Modal.Body>\n            <Modal.Footer>\n                <Button type=\"secondary\" onClick={closeModal}>{trans(\"common.cancel\")}</Button>\n                <Button type=\"primary\" onClick={triggerSubmit} loading={loading}>{trans(\"common.save\")}</Button>\n            </Modal.Footer>\n        </CustomModal>\n    );\n};\n\nexport default React.forwardRef(ModalCreateContainerType);","import React, { useCallback, useEffect, useRef } from 'react';\nimport { Route, useHistory, useRouteMatch } from 'react-router';\nimport { useDispatch } from 'react-redux';\n\nimport useTrans from 'helper/useTrans';\nimport { fetchContainerTypes } from 'app/modules/Warehouse/warehouse-redux/containerTypeSlice';\n\nimport { Card, CardBody, CardHeader, CardHeaderToolbar } from '_metronic/_partials/controls';\nimport TableContainerTypes from 'app/modules/Warehouse/components/Table/TableContainerType';\nimport Button from 'app/components/Button';\nimport ModalCreateContainerType from './ModalCreateContainerType';\nimport NeedPermission from 'app/components/NeedPermission';\n\nconst ShelveManagement = props => {\n\n    const [trans] = useTrans();\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const match = useRouteMatch();\n    const modalEditRef = useRef();\n\n    useEffect(() => {\n        f5Data();\n    }, []); // eslint-disable-line\n\n    const f5Data = useCallback((params) => {\n        dispatch(fetchContainerTypes({ with: \"shipmentMethod;toArea\", ...params }));\n    }, [dispatch]);\n\n    const handleOpenEdit = useCallback((id, containerType) => {\n        modalEditRef.current.setInitialData(containerType);\n\n        history.push(`${match.url}/edit-container-type/${id}`);\n    }, [history, match.url]);\n\n    const handleOpenModalCreate = useCallback(() => {\n        history.push(`${match.url}/create-container-type`);\n    }, [history, match.url]);\n\n    return (\n        <>\n            <NeedPermission need={['container-types.create']}>\n                <Route path={`${match.path}/create-container-type`}>\n                    {({ match }) => (\n                        <ModalCreateContainerType\n                            show={match !== null}\n                            onSuccess={f5Data}\n                        />\n                    )}\n                </Route>\n            </NeedPermission>\n\n            <NeedPermission need={['container-types.update']}>\n                <Route path={`${match.path}/edit-container-type/:id`}>\n                    {({ match }) => (\n                        <ModalCreateContainerType\n                            ref={modalEditRef}\n                            id={match?.params?.id}\n                            editMode\n                            show={match !== null}\n                            onSuccess={f5Data}\n                        />\n                    )}\n                </Route>\n            </NeedPermission>\n\n            <Card className=\"container-type-management\">\n                <CardHeader title={trans(\"warehouse.container_type.title\")}>\n                    <NeedPermission need={['container-types.create']}>\n                        <CardHeaderToolbar>\n                            <Button type=\"primary\" onClick={handleOpenModalCreate}>{trans(\"warehouse.container_type.create.title\")}</Button>\n                        </CardHeaderToolbar>\n                    </NeedPermission>\n                </CardHeader>\n                <CardBody>\n                    <TableContainerTypes\n                        onRefresh={f5Data}\n                        onViewEdit={handleOpenEdit}\n                    />\n                </CardBody>\n            </Card>\n        </>\n    );\n};\n\nexport default ShelveManagement;","import React from 'react';\n\nimport { FastField, Formik } from 'formik';\nimport { Input } from '_metronic/_partials/controls';\nimport * as Yup from 'yup';\nimport FormStatus from '../FormStatus';\nimport Form from '../FormEnterIndex';\nimport useTrans from 'helper/useTrans';\n\nimport './index.scss';\n\nfunction FormAddShipmentMethod({\n    initialValues = {\n        id: '',\n        name: '',\n        fee: ''\n    },\n    onSubmit,\n}, ref) {\n    const [trans] = useTrans();\n\n    const validationSchema = Yup.object().shape({\n        id: Yup.string()\n            .required(trans(\"validation.message.required\")),\n\n        name: Yup.string()\n            .required(trans(\"validation.message.required\")),\n        fee: Yup.number()\n            .min(1, trans(\"validation.message.min\", { min: 1 }))\n            .required(trans(\"validation.message.required\")),\n    });\n\n    return (\n        <Formik\n            enableReinitialize\n            initialValues={initialValues}\n            onSubmit={onSubmit}\n            innerRef={ref}\n            validationSchema={validationSchema}\n        >\n            <Form className=\"form form-label-right form-add-shipment-method\">\n\n                <div className=\"p-3\">\n                    <FastField\n                        name=\"id\"\n                        component={Input}\n                        label={trans(\"warehouse.shipment_method.id\")}\n                        placeholder={trans(\"warehouse.shipment_method.id\")}\n                        autoComplete=\"off\"\n                    />\n                </div>\n\n                <div className=\"p-3\">\n                    <FastField\n                        name=\"name\"\n                        component={Input}\n                        label={trans(\"warehouse.shipment_method.name\")}\n                        placeholder={trans(\"warehouse.shipment_method.name\")}\n                        autoComplete=\"off\"\n                    />\n                </div>\n\n                <div className=\"p-3\">\n                    <FastField\n                        name=\"fee\"\n                        component={Input}\n                        label={trans(\"warehouse.shipment_method.fee\")}\n                        placeholder={trans(\"warehouse.shipment_method.fee\")}\n                        autoComplete=\"off\"\n                        type=\"number\"\n                    />\n                </div>\n\n                <FormStatus />\n            </Form>\n        </Formik>\n    );\n}\n\nexport default React.forwardRef(FormAddShipmentMethod);\n","import React, { useImperativeHandle, useRef, useState } from 'react';\nimport { useHistory } from 'react-router';\n\nimport useTrans from 'helper/useTrans';\nimport warehouseApi from 'apis/warehouse';\n\nimport CustomModal from 'app/components/CustomModal';\nimport { Modal } from 'react-bootstrap';\nimport { dialog } from 'app/components/DialogNotify';\nimport handleApiError from 'helper/handleApiError';\nimport FormAddShipmenMethod from 'app/modules/Warehouse/components/Form/FormAddShipmenMethod';\nimport Button from 'app/components/Button';\n\nconst ModalCreateShipmentMethod = ({ show, onHide, onSuccess, editMode = false, id }, ref) => {\n\n    const [loading, setLoading] = useState();\n    const [initialValues, setInitialValues] = useState();\n    const [trans] = useTrans();\n    const history = useHistory();\n    const formRef = useRef();\n\n    useImperativeHandle(ref, () => ({\n        setInitialData: (data) => {\n            setInitialValues(data)\n        }\n    }));\n\n    const closeModal = () => {\n        if (onHide) onHide();\n        else history.goBack();\n    }\n\n    const handleSubmit = (values, form) => {\n        if (editMode) updateShipmentMethod(values, form);\n        else createShipmentMethod(values, form);\n    }\n\n    const createShipmentMethod = (values, form) => {\n\n        setLoading(true);\n\n        warehouseApi.shipmentMethod.create(values)\n            .then(() => {\n                dialog.success(trans(\"warehouse.shipment_method.create.success\"));\n\n                onSuccess && onSuccess();\n                closeModal();\n            })\n            .catch((err) => {\n                dialog.error(trans(\"warehouse.shipment_method.create.failure\"));\n\n                handleApiError(err, form);\n            })\n            .finally(() => {\n                setLoading(false);\n            })\n    }\n\n    const updateShipmentMethod = (values, form) => {\n\n        setLoading(true);\n\n        warehouseApi.shipmentMethod.update(id, values)\n            .then(() => {\n                dialog.success(trans(\"warehouse.shipment_method.update.success\"));\n\n                onSuccess && onSuccess();\n                closeModal();\n            })\n            .catch((err) => {\n                dialog.error(trans(\"warehouse.shipment_method.update.failure\"));\n\n                handleApiError(err, form);\n            })\n            .finally(() => {\n                setLoading(false);\n            })\n    }\n\n    const triggerSubmit = () => {\n        formRef.current.submitForm();\n    }\n\n    return (\n        <CustomModal\n            show={show}\n            onHide={closeModal}\n            title={!editMode ? trans(\"warehouse.shipment_method.create.title\") : trans(\"warehouse.shipment_method.update.title\")}\n            actionsLoading={loading}\n        >\n            <Modal.Body>\n                <FormAddShipmenMethod\n                    formItemClass=\"col-lg-4 col-md-6 col-sm-12\"\n                    ref={formRef}\n                    onSubmit={handleSubmit}\n                    initialValues={initialValues}\n                />\n            </Modal.Body>\n            <Modal.Footer>\n                <Button type=\"secondary\" loading={loading} onClick={closeModal}>{trans(\"common.cancel\")}</Button>\n                <Button type=\"primary\" loading={loading} onClick={triggerSubmit}>{trans(\"common.save\")}</Button>\n            </Modal.Footer>\n        </CustomModal>\n    );\n};\n\nexport default React.forwardRef(ModalCreateShipmentMethod);","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Route, useHistory, useRouteMatch } from 'react-router';\n\nimport useTrans from 'helper/useTrans';\nimport useColumns from './useColumns';\nimport warehouseApi from 'apis/warehouse';\n\nimport CustomTable from 'app/components/CustomTable';\nimport EmptyData from 'app/components/EmptyData';\nimport { dialog } from 'app/components/DialogNotify';\nimport ModalConfirmDelete from '../../ModalConfirmDelete';\n\nimport './index.scss';\nimport NeedPermission from 'app/components/NeedPermission';\n\nconst TableShipmentMethods = ({ onRefresh, onViewEdit }) => {\n    const dataTable = useSelector(\n        state => state.warehouse.shipmentMethod.list.data\n    );\n    const columns = useColumns();\n    const [trans] = useTrans();\n    const history = useHistory();\n    const match = useRouteMatch();\n\n    const handleConfirmDelete = (id) => {\n        history.push(`${match.url}/delete-shipment-method/${id}`);\n    }\n\n    const handleDelete = (id) => {\n        warehouseApi.shipmentMethod.delete(id)\n            .then(() => {\n                onRefresh && onRefresh();\n\n                dialog.success(trans(\"warehouse.shipment_method.delete.success\"));\n            })\n            .catch((err) => {\n                console.error(err);\n\n                dialog.error(trans(\"warehouse.shipment_method.delete.failure\"));\n            })\n    }\n\n    if (!dataTable.length) return <EmptyData emptyText={trans(\"warehouse.shipment_method.list.empty\")} />;\n\n    return (\n        <div className=\"table-shipment-methods\">\n\n            <NeedPermission need={['shipment-methods.delete']}>\n                <Route path={`${match.path}/delete-shipment-method/:shipment_method_id`}>\n                    {({ match }) => (\n                        <ModalConfirmDelete\n                            id={match?.params?.shipment_method_id}\n                            show={match != null}\n                            onConfirmed={handleDelete}\n                            title={trans(\"warehouse.shipment_method.delete.title\")}\n                        />\n                    )}\n                </Route>\n            </NeedPermission>\n\n            <CustomTable\n                columns={columns}\n                rows={dataTable}\n                onDelete={handleConfirmDelete}\n                onViewEdit={onViewEdit}\n                isPagination={false}\n                rowKey=\"id\"\n                noSTT\n                permissions={{\n                    update: 'shipment-methods.update',\n                    delete: 'shipment-methods.delete',\n                }}\n            />\n        </div>\n    );\n};\n\nTableShipmentMethods.propTypes = {\n    onRefresh: PropTypes.func\n};\n\nexport default TableShipmentMethods;\n","import useTrans from 'helper/useTrans';\n\nexport default function useColumns() {\n\n    const [trans] = useTrans();\n\n    return [\n        {\n            id: 'id',\n            title: trans(\"warehouse.shipment_method.id\"),\n        },\n        {\n            id: 'name',\n            title: trans(\"warehouse.shipment_method.name\"),\n        },\n        {\n            id: 'fee',\n            title: trans(\"warehouse.shipment_method.fee\"),\n        },\n    ]\n}","import React, { useEffect, useRef } from 'react';\nimport { useHistory, useRouteMatch, Route } from 'react-router';\nimport { useDispatch } from 'react-redux';\n\nimport useTrans from 'helper/useTrans';\nimport { fetchShipmentMethods } from 'app/modules/Warehouse/warehouse-redux/shipmentMethodSlice';\n\nimport { Card, CardBody, CardHeader, CardHeaderToolbar } from '_metronic/_partials/controls';\nimport ModalCreateShipmentMethod from './ModalCreateShipmentMethod';\nimport TableShipmentMethods from 'app/modules/Warehouse/components/Table/TableShipmentMethods';\nimport NeedPermission from 'app/components/NeedPermission';\n\nconst ShipmentMethodManagement = props => {\n\n    const [trans] = useTrans();\n    const history = useHistory();\n    const match = useRouteMatch();\n    const modalEditRef = useRef();\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        f5Data();\n    }, []); // eslint-disable-line\n\n    const openCreateModal = () => {\n        history.push(`${match.url}/create-shipment-method`);\n    }\n\n    const f5Data = () => {\n        dispatch(fetchShipmentMethods());\n    }\n\n    const openUpdateModal = (id, palletType) => {\n        modalEditRef.current.setInitialData(palletType);\n\n        history.push(`${match.url}/edit-shipment-method/${id}`);\n    }\n\n    return (\n        <>\n            <NeedPermission need={['shipment-methods.create']}>\n                <Route path={`${match.path}/create-shipment-method`}>\n                    {({ match }) => (\n                        <ModalCreateShipmentMethod\n                            show={match !== null}\n                            onSuccess={f5Data}\n                        />\n                    )}\n                </Route>\n            </NeedPermission>\n\n            <NeedPermission need={['shipment-methods.update']}>\n                <Route path={`${match.path}/edit-shipment-method/:shipment_method_id`}>\n                    {({ match }) => (\n                        <ModalCreateShipmentMethod\n                            id={match?.params?.shipment_method_id}\n                            show={match !== null}\n                            onSuccess={f5Data}\n                            editMode\n                            ref={modalEditRef}\n                        />\n                    )}\n                </Route>\n            </NeedPermission>\n\n            <Card className=\"shipment-method-managements\">\n                <CardHeader title={trans(\"warehouse.shipment_method.title\")}>\n                    <NeedPermission need={['shipment-methods.create']}>\n                        <CardHeaderToolbar>\n                            <button className=\"btn btn-primary\" onClick={openCreateModal}>{trans(\"warehouse.shipment_method.create.title\")}</button>\n                        </CardHeaderToolbar>\n                    </NeedPermission>\n                </CardHeader>\n                <CardBody>\n                    <TableShipmentMethods\n                        onRefresh={f5Data}\n                        onViewEdit={openUpdateModal}\n                    />\n                </CardBody>\n            </Card>\n        </>\n    );\n};\n\nShipmentMethodManagement.propTypes = {\n\n};\n\nexport default ShipmentMethodManagement;","import React from 'react';\nimport useTrans from 'helper/useTrans';\n\nconst NotHavePermission = props => {\n\n    const [trans] = useTrans();\n\n    return (\n        <span>\n            {trans(\"common.not_have_permission\")}\n        </span>\n    );\n};\n\nNotHavePermission.propTypes = {\n    \n};\n\nexport default NotHavePermission;","import React from 'react';\n\nimport useTrans from 'helper/useTrans';\n\nimport Layout from '../../components/Layout';\nimport SimpleTabs, { TabPanel } from 'app/components/Tabs/Simple';\nimport DefaultAgency from './DefaultAgency';\nimport PrinterSettings from './PrinterSettings';\nimport LocationManagament from './LocationManagement';\nimport { Card, CardBody } from '_metronic/_partials/controls';\nimport PalletType from './PalletType';\nimport AreaManagement from './AreaManagement';\nimport ShelveManagement from './ShelveManagement';\nimport ContainerTypeManagement from './ContainerTypeManagement';\nimport ShipmentMethodManagement from './ShipmentMethodManagement';\nimport NeedPermission from 'app/components/NeedPermission';\nimport NotHavePermission from 'app/components/NeedPermission/NotHavePermission';\n\nconst SettingPage = props => {\n\n    const [trans] = useTrans();\n\n    return (\n        <Layout title={trans(\"MENU.WAREHOUSE.SETTINGS\")}>\n            <div className=\"settings-page\">\n\n                <SimpleTabs labels={[\n                    trans(\"warehouse.settings.common.title\"),\n                    trans(\"warehouse.location.title\"),\n                    trans(\"warehouse.pallet_type.title\"),\n                    trans(\"warehouse.area.title\"),\n                    trans(\"warehouse.shelve.title\"),\n                    trans(\"warehouse.container_type.title\"),\n                    trans(\"warehouse.shipment_method.title\")\n                ]}>\n                    <TabPanel>\n                        <NeedPermission need={['sfas']} fallback={<NotHavePermission />}>\n                            <Card>\n                                <CardBody>\n                                    <DefaultAgency />\n                                    <PrinterSettings />\n                                </CardBody>\n                            </Card>\n                        </NeedPermission>\n                    </TabPanel>\n\n                    <TabPanel>\n                        <NeedPermission need={['locations.index']} fallback={<NotHavePermission />}>\n                            <LocationManagament />\n                        </NeedPermission>\n                    </TabPanel>\n\n                    <TabPanel>\n                        <NeedPermission need={['pallet-types.index']} fallback={<NotHavePermission />}>\n                            <PalletType />\n                        </NeedPermission>\n                    </TabPanel>\n\n                    <TabPanel>\n                        <NeedPermission need={['areas']} fallback={<NotHavePermission />}>\n                            <AreaManagement />\n                        </NeedPermission>\n                    </TabPanel>\n\n                    <TabPanel>\n                        <NeedPermission need={['shelves']} fallback={<NotHavePermission />}>\n                            <ShelveManagement />\n                        </NeedPermission>\n                    </TabPanel>\n\n                    <TabPanel>\n                        <NeedPermission need={['container-types.index']} fallback={<NotHavePermission />}>\n                            <ContainerTypeManagement />\n                        </NeedPermission>\n                    </TabPanel>\n\n                    <TabPanel>\n                        <NeedPermission need={['shipment-methods']} fallback={<NotHavePermission />}>\n                            <ShipmentMethodManagement />\n                        </NeedPermission>\n                    </TabPanel>\n\n                </SimpleTabs>\n\n            </div>\n        </Layout>\n    );\n};\n\nSettingPage.propTypes = {};\n\nexport default SettingPage;\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport ListSFAForInbound from '../../../components/List/ListSFAForInbound';\n\nconst TableSFAs = props => {\n    const history = useHistory();\n\n    const gotoDetail = (sfaID) => {\n        history.push(`/warehouse/inbound/step-3/${sfaID}`)\n    }\n\n    return (\n        <ListSFAForInbound onViewEdit={gotoDetail} type=\"storage\" />\n    );\n};\n\nTableSFAs.propTypes = {\n\n};\n\nexport default TableSFAs;","import React, { useRef, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useHistory } from 'react-router';\n\nimport { startPrinter } from 'app/components/PrinterModal';\nimport { getTemplateData } from 'helper/printerTemplateData';\nimport handleApiError from 'helper/handleApiError';\nimport warehouseApi from 'apis/warehouse';\nimport useTrans from 'helper/useTrans';\n\nimport CustomModal from 'app/components/CustomModal';\nimport { Modal, Button } from 'react-bootstrap';\nimport FormAddLocation from '../FormAddLocation';\n\nconst ModalAddLocation = ({ show, onHide, onSuccess }) => {\n\n    const [loading, setLoading] = useState();\n    const areaList = useSelector(state => state.warehouse.area.list);\n    const history = useHistory();\n    const formRef = useRef();\n    const [trans] = useTrans();\n\n    const handleSaveLocation = (values, form) => {\n        setLoading(true);\n        warehouseApi.location.create(values)\n            .then((res) => {\n                startPrinter(getTemplateData('LOCATION', {\n                    locationId: res.id,\n                    floor: res.floor,\n                    row: res.row,\n                    column: res.column,\n                    quantity: 2\n                }));\n\n                onSuccess && onSuccess(res);\n                closeModal();\n            })\n            .catch((err) => {\n                console.error(err);\n                handleApiError(err, form);\n            })\n            .finally(() => {\n                setLoading(false);\n            })\n    }\n\n    const closeModal = () => {\n        if (onHide) onHide();\n        else history.goBack();\n    }\n\n    const triggerSubmit = () => {\n        formRef.current.submitForm();\n    }\n\n    return (\n        <CustomModal\n            show={show}\n            onHide={closeModal}\n            title={trans(\"warehouse.location.create.title\")}\n            actionsLoading={loading}\n        >\n            <Modal.Body>\n                <FormAddLocation\n                    initialValues={{\n                        area_id: areaList?.[0]?.id,\n                        shelve_id: '',\n                        floor: 1,\n                        row: 1,\n                        column: 1\n                    }}\n                    onSubmit={handleSaveLocation}\n                    ref={formRef}\n                />\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={closeModal} className=\"btn-large\">{trans(\"common.back\")}</Button>\n                <Button variant=\"primary\" onClick={triggerSubmit} className=\"btn-large\">{trans(\"common.save\")}</Button>\n            </Modal.Footer>\n        </CustomModal>\n    );\n};\n\nModalAddLocation.propTypes = {\n\n};\n\nexport default ModalAddLocation;","import React, { useMemo } from 'react';\nimport { Route, useHistory, useRouteMatch } from 'react-router';\n\nimport useTrans from 'helper/useTrans';\nimport * as Yup from 'yup';\nimport { isLocationCode, isPalletCode } from 'helper/useScanBarcode';\nimport { toAbsoluteUrl } from '_metronic/_helpers';\n\nimport SVG from 'react-inlinesvg';\nimport { FastField, Formik } from 'formik';\nimport { BarcodeInput } from '_metronic/_partials/controls';\nimport FormStatus from '../FormStatus';\nimport Form from '../FormEnterIndex';\nimport ModalAddLocation from './ModalAddLocation';\n\nimport './index.scss';\n\nfunction FormDirectStorage({\n    formItemClass = 'col-lg-6 col-sm-12',\n    initialValues = {\n        pallet_id: '',\n        location_id: ''\n    },\n    onSubmit\n}, ref) {\n    const [trans] = useTrans();\n    const match = useRouteMatch();\n    const history = useHistory();\n\n    const validationSchema = Yup.object().shape({\n        pallet_id: Yup.string()\n            .required(trans(\"validation.message.required\")),\n        location_id: Yup.string()\n            .required(trans(\"validation.message.required\")),\n    });\n\n    const handleCreateLocation = () => {\n        history.push(`${match.url}/create-location`);\n    }\n\n    const locationLabel = useMemo(() => {\n        return (\n            <div className=\"location-label\">\n                <span>{trans(\"warehouse.location.id\")}</span>\n                <span className=\"svg-icon svg-icon-primary ml-3 cursor-pointer\" onClick={() => handleCreateLocation()}>\n                    <SVG\n                        src={toAbsoluteUrl(\n                            '/media/svg/icons/Code/Info-circle.svg'\n                        )}\n                    ></SVG>\n                </span>\n            </div>\n        )\n    }, []); // eslint-disable-line\n\n    const handleCreateLocationSuccess = (location) => {\n        ref.current.setFieldValue('location_id', location.id);\n    }\n\n    return (\n        <>\n            <Route path={`${match.path}/create-location`}>\n                {({ match }) => (\n                    <ModalAddLocation\n                        show={match !== null}\n                        onSuccess={handleCreateLocationSuccess}\n                    />\n                )}\n            </Route>\n            <Formik\n                enableReinitialize\n                initialValues={initialValues}\n                onSubmit={onSubmit}\n                innerRef={ref}\n                validationSchema={validationSchema}\n            >\n                <Form className=\"form form-label-right form-direct-storage\">\n                    <div className=\"form-group row\">\n                        <div className={formItemClass}>\n                            <div>\n                                <FastField\n                                    name=\"pallet_id\"\n                                    component={BarcodeInput}\n                                    label={trans(\"warehouse.pallet.id\")}\n                                    placeholder={trans(\"warehouse.pallet.id\")}\n                                    autoComplete=\"off\"\n                                    condition={isPalletCode}\n                                />\n                            </div>\n                        </div>\n\n                        <div className={formItemClass}>\n                            <div>\n                                <FastField\n                                    name=\"location_id\"\n                                    component={BarcodeInput}\n                                    label={locationLabel}\n                                    placeholder={trans(\"warehouse.location.id\")}\n                                    autoComplete=\"off\"\n                                    condition={isLocationCode}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                    <FormStatus />\n                </Form>\n            </Formik>\n        </>\n    );\n}\n\nexport default React.forwardRef(FormDirectStorage);\n","import React, { useRef, useState } from 'react';\n\nimport warehouseApi from 'apis/warehouse';\nimport useTrans from 'helper/useTrans';\nimport handleApiError from 'helper/handleApiError';\n\nimport { Card, CardBody } from '_metronic/_partials/controls';\nimport FormDirectStorage from 'app/modules/Warehouse/components/Form/FormDirectStorage';\nimport { dialog } from 'app/components/DialogNotify';\nimport Loading from 'app/components/Loading';\n\nimport './index.scss';\nimport usePermission from 'app/components/NeedPermission/usePermission';\n\nconst DirectStorage = props => {\n    const [loading, setLoading] = useState(false);\n    const [trans] = useTrans();\n    const formRef = useRef();\n    const canUpdatePallet = usePermission('pallets.update')\n\n    const handleSubmit = (values, form) => {\n\n        if(!canUpdatePallet) {\n            dialog.error(trans(\"warehouse.pallet.update.need_permission\"));\n\n            return;\n        }\n\n        setLoading(true);\n        warehouseApi.pallet.update(values.pallet_id, { location_id: values.location_id })\n            .then((res) => {\n                dialog.success(trans(\"warehouse.storage_sfa.direct_storage.success\"))\n\n                form.resetForm();\n            })\n            .catch((err) => {\n                dialog.error(trans(\"warehouse.storage_sfa.direct_storage.failure\"))\n                handleApiError(err, form);\n            })\n            .finally(() => {\n                setLoading(false);\n            })\n    }\n\n    return (\n        <Card className=\"direct-storage position-relative\">\n            <CardBody>\n                {loading && <Loading local />}\n                <FormDirectStorage onSubmit={handleSubmit} ref={formRef} />\n            </CardBody>\n        </Card>\n    );\n};\n\nDirectStorage.propTypes = {\n\n};\n\nexport default DirectStorage;","import React from 'react';\n\nimport useTrans from 'helper/useTrans';\n\nimport Layout from '../../components/Layout';\nimport SimpleTabs, { TabPanel } from 'app/components/Tabs/Simple';\nimport TableSFAs from './TableSFAs';\nimport DirectStorage from './DirectStorage';\nimport NeedPermission from 'app/components/NeedPermission';\n\nconst StorageSFAPage = props => {\n\n    const [trans] = useTrans();\n\n    return (\n        <Layout title={trans(\"warehouse.storage_goods\")}>\n            <SimpleTabs labels={[\n                trans(\"warehouse.storage_sfa.direct_storage.title\"),\n                trans(\"warehouse.sfa.list\")\n            ]}>\n                <TabPanel>\n                    <NeedPermission need={['pallets.update']}>\n                        <DirectStorage />\n                    </NeedPermission>\n                </TabPanel>\n                <TabPanel>\n                    <TableSFAs />\n                </TabPanel>\n            </SimpleTabs>\n        </Layout>\n    );\n};\n\nStorageSFAPage.propTypes = {\n\n};\n\nexport default StorageSFAPage;","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory, useLocation, useRouteMatch } from 'react-router';\n\nimport queryString from 'query-string';\nimport { fetchShelveFromArea, fetchShelvesForWHModel, whModelAction } from 'app/modules/Warehouse/warehouse-redux/whModelSlice';\n\nimport { Card, CardBody } from '_metronic/_partials/controls';\nimport SelectArea from 'app/modules/Warehouse/components/SelectArea';\nimport SelectShelve from 'app/components/Select/SelectShelve';\nimport SelectPallet from 'app/components/Select/SelectPallet';\nimport SelectLocation from 'app/components/Select/SelectLocation';\n\nconst FilterSection = props => {\n\n    const filter = useSelector(state => state.warehouse.whModel.filter);\n    const dispatch = useDispatch();\n    const match = useRouteMatch();\n    const location = useLocation();\n    const history = useHistory();\n\n    useEffect(() => {\n        if (location.search) {\n            let searchParsed = queryString.parse(location.search);\n\n            let newFilter = searchParsed;\n\n            if(newFilter) {\n                dispatch(whModelAction.changeFilter(newFilter));\n                dispatch(fetchShelvesForWHModel());\n            }\n        } else {\n            dispatch(fetchShelveFromArea());\n        }\n    }, [location]); // eslint-disable-line\n\n    const handleChangeFilter = (newFP) => {\n        dispatch(whModelAction.changeFilter(newFP));\n    }\n\n    const handleResetFilter = () => {\n        dispatch(whModelAction.resetFilter());\n        dispatch(fetchShelveFromArea());\n        history.replace(`${match.url}`);\n    }\n\n    const handleFilter = () => {\n        dispatch(fetchShelvesForWHModel());\n\n        let parsedFilter = filter;\n\n        history.replace(`${match.url}?${queryString.stringify(parsedFilter)}`);\n    }\n\n    return (\n        <Card>\n            <CardBody>\n                <div className=\"row\">\n                    <div className=\"col-lg-4 col-sm-6\">\n                        <SelectArea value={filter['area_id'] || ''} onChange={(v) => handleChangeFilter({ 'area_id': v })} />\n                    </div>\n                    <div className=\"col-lg-4 col-sm-6\">\n                        <SelectShelve value={filter['id'] || ''} onChange={(v) => handleChangeFilter({ 'id': v })} />\n                    </div>\n                    <div className=\"col-lg-4 col-sm-6\">\n                        <SelectLocation value={filter['locations.id'] || ''} onChange={(v) => handleChangeFilter({ 'locations.id': v })} />\n                    </div>\n                    <div className=\"col-lg-4 col-sm-6\">\n                        <SelectPallet value={filter['locations.pallets.id'] || ''} onChange={(v) => handleChangeFilter({ 'locations.pallets.id': v })} />\n                    </div>\n                    <div className=\"col-lg-4 col-sm-6\">\n                        <div className=\"form-group\">\n                            <label htmlFor=\"\">SKU</label>\n                            <input\n                                value={filter['locations.pallets.pivotBoxes.box_id'] || ''}\n                                className=\"form-control\"\n                                onChange={(e) => { handleChangeFilter({ 'locations.pallets.pivotBoxes.box_id': e.target.value }) }}\n                            />\n                        </div>\n                    </div>\n                </div>\n                <div className=\"text-right\">\n                    <button className=\"btn btn-secondary\" onClick={handleResetFilter}>Bỏ lọc</button>\n                    <button className=\"btn btn-primary ml-3\" onClick={handleFilter}>Lọc</button>\n                </div>\n            </CardBody>\n        </Card>\n    );\n};\n\nFilterSection.propTypes = {\n\n};\n\nexport default FilterSection;","import React, { useCallback, useContext, useMemo, useState } from \"react\";\n\nconst initialContext = {\n    pallet: undefined,\n    showPallet: false,\n    setShowPallet: () => null, \n    setPallet: () => null\n}\n\nconst DetailPalletContext = React.createContext(initialContext);\n\nexport const DetailPalletProvider = ({ children }) => {\n    const [pallet, setPallet] = useState();\n    const [showPallet, setShowPallet] = useState(false);\n\n    const values = useMemo(() => ({\n        pallet,\n        showPallet,\n        setShowPallet,\n        setPallet\n    }), [pallet, showPallet, setPallet, setShowPallet]);\n\n    return <DetailPalletContext.Provider value={values}>{children}</DetailPalletContext.Provider>\n}\n\nexport const useDetailPallet = () => {\n    const { pallet, showPallet, setShowPallet, setPallet } = useContext(DetailPalletContext);\n\n    const togglePalletDetail = useCallback((data) => {\n        setShowPallet(!showPallet);\n        data && setPallet(data);\n    }, [setPallet, showPallet, setShowPallet]);\n\n    return { pallet, showPallet, togglePalletDetail };\n}","import React, { useEffect, useMemo, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router';\n\nimport { toAbsoluteUrl } from '_metronic/_helpers';\nimport clsx from 'clsx';\nimport queryString from 'query-string';\nimport { useDetailPallet } from '../context';\nimport _ from 'lodash';\n\nimport SVG from 'react-inlinesvg';\n\nimport './index.scss';\n\nconst PalletItem = ({ pallet }) => {\n\n    const { togglePalletDetail } = useDetailPallet();\n    const [isActive, setIsActive] = useState(false);\n    const routerLocation = useLocation();\n\n    useEffect(() => {\n        if (routerLocation.search) {\n            let search = queryString.parse(routerLocation.search);\n\n            if (search['locations.pallets.id'] === pallet.id) {\n                setIsActive(true);\n            }\n\n            if(_.findIndex(pallet?.pivot_boxes || [], ['box_id', search['locations.pallets.pivotBoxes.box_id']]) !== -1) {\n                setIsActive(true);\n            }\n        }\n    }, [routerLocation]); // eslint-disable-line\n\n    const totalBoxesInPallet = useMemo(() => {\n        return pallet?.pivot_boxes.reduce((prevV, curV) => prevV + curV?.current_quantity || 0, 0);\n    }, [pallet]);\n\n    const showPalletDetail = () => { togglePalletDetail(pallet) }\n\n    if (!pallet || !pallet?.pivot_boxes?.length) return (\n        <div className={clsx(\n            \"pallet-item-model\",\n            !pallet && 'placeholder',\n            pallet && !pallet?.pivot_boxes?.length && 'empty-pallet',\n            isActive && 'active'\n        )}>\n            <div className=\"pallet-item-model__icon\">\n                <SVG\n                    src={toAbsoluteUrl(\n                        '/media/svg/icons/Shopping/Pallet.svg'\n                    )}\n                ></SVG>\n            </div>\n            <div className=\"pallet-item-model__id\">\n                {pallet?.id}\n            </div>\n        </div>\n    )\n\n    return (\n        <div className={clsx(\"pallet-item-model\", isActive && 'active')} onClick={showPalletDetail}>\n            <div className=\"pallet-item-model__icon\">\n                <SVG\n                    src={toAbsoluteUrl(\n                        '/media/svg/icons/Shopping/Pallet-with-box.svg'\n                    )}\n                ></SVG>\n            </div>\n            <div className=\"pallet-item-model__id\">\n                {pallet.id}\n            </div>\n            <div className=\"pallet-item-model_boxes-length\">\n                {totalBoxesInPallet}\n            </div>\n        </div>\n    );\n};\n\nPalletItem.propTypes = {\n    pallet: PropTypes.any,\n    onSelect: PropTypes.func\n};\n\nexport default React.memo(PalletItem);","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router';\n\nimport warehouseApi from 'apis/warehouse';\nimport queryString from 'query-string';\n\nimport Loading from 'app/components/Loading';\nimport PalletItem from '../PalletItem';\n\nimport './index.scss';\nimport clsx from 'clsx';\n\nconst LocationItem = ({ location }) => {\n\n    const [locationData, setLocationData] = useState();\n    const [loading, setLoading] = useState(false);\n    const [isActive, setIsActive] = useState(false);\n    const routerLocation = useLocation();\n\n    useEffect(() => {\n        if(routerLocation.search) {\n            let search = queryString.parse(routerLocation.search);\n\n            if(search['locations.id'] === location.id) \n                setIsActive(true);\n        }\n    }, [routerLocation]); // eslint-disable-line\n\n    useEffect(() => {\n        if (location) {\n            setLoading(true);\n            warehouseApi.location.fetchLocation(location.id, { with: 'pallets.pivotBoxes' })\n                .then(res => {\n                    setLocationData(res);\n                })\n                .finally(() => { setLoading(false) });\n        }\n    }, [location]);\n\n    return (\n        <div className={clsx(\"location-item position-relative\", isActive && 'active')}>\n            {loading && <Loading local />}\n\n            {locationData?.pallets?.length ? locationData.pallets.map((p, idx) => (\n                <PalletItem pallet={p} key={`pallet-item-${idx}`} />\n            )) : (\n                    <div className=\"empty-location\">{locationData?.id}</div>\n                )}\n        </div>\n    );\n};\n\nLocationItem.propTypes = {\n    location: PropTypes.any\n};\n\nexport default LocationItem;","import React, { useCallback, useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport _ from 'lodash';\n\nimport LocationItem from '../LocationItem';\n\nimport './index.scss';\n\nconst LocationGrid = ({ locations }) => {\n\n    const groupRow = useMemo(() => {\n        return _.groupBy(locations, 'row');\n    }, [locations]);\n\n    const maxRow = useMemo(() => {\n        return _.maxBy(locations, 'row').row;\n    }, [locations]);\n\n    const renderColumnLocation = useCallback((rowLocations, rowIdx) => {\n\n        let maxColumn = _.maxBy(rowLocations, 'column').column;\n\n        return (\n            <div className=\"grid-location-row\" key={`grid-location-row-${rowIdx}`}>\n                {_.range(1, maxColumn + 1, 1).map((columnIdx) => {\n\n                    let location = _.find(rowLocations, ['column', columnIdx]);\n\n                    if (location) return <LocationItem location={location} key={`grid-location-col-${columnIdx}`} />\n\n                    return <div className=\"location-item empty-location-item\" key={`grid-location-col-${columnIdx}`}>C.{columnIdx}</div>\n                })}\n            </div>\n        );\n    }, []); // eslint-disable-line\n\n    return (\n        <div className=\"location-grid\">\n            <div className=\"grid-location-container\">\n                {_.range(1, maxRow + 1, 1).map((rowIdx) => {\n                    if (groupRow[rowIdx]) {\n                        return renderColumnLocation(groupRow[rowIdx], rowIdx)\n                    }\n\n                    return <div className=\"grid-location-row empty-row\" key={`empty-grid-location-${rowIdx}`}>R.{rowIdx}</div>\n                })}\n            </div>\n        </div>\n    );\n};\n\nLocationGrid.propTypes = {\n    locations: PropTypes.array,\n};\n\nexport default LocationGrid;","import React, { useState, useEffect } from 'react';\n\nimport { useDetailPallet } from '../context';\nimport { toAbsoluteUrl } from '_metronic/_helpers';\nimport clsx from 'clsx';\nimport warehouseApi from 'apis/warehouse';\nimport formatNumber from 'helper/formatNumber';\n\nimport SVG from 'react-inlinesvg';\nimport Barcode from 'react-barcode';\nimport { dialog } from 'app/components/DialogNotify';\nimport Loading from 'app/components/Loading';\n\nimport './index.scss';\n\nconst PalletDetail = () => {\n    const { pallet, showPallet, togglePalletDetail } = useDetailPallet();\n    const [selectedBox, setSelectedBox] = useState();\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        if (!showPallet) setSelectedBox(undefined);\n    }, [showPallet]);\n\n    const hideDetailPallet = () => {\n        togglePalletDetail();\n    }\n\n    const handleSelectBox = (box) => {\n        setLoading(true);\n        warehouseApi.box.fetchBox(box.id, { with: 'items;childs.items' })\n            .then(res => {\n                setSelectedBox(res);\n            })\n            .catch((err) => {\n                dialog.error('Get data box failure!')\n            })\n            .finally(() => {\n                setLoading(false);\n            });\n    }\n\n    return (\n        <div className={clsx(\"pallet-detail\", showPallet ? 'show' : 'hide')}>\n            <div className=\"pallet-detail-head d-flex align-items-center\">\n                <div className=\"close-section btn btn-link\" onClick={hideDetailPallet}>\n                    <SVG\n                        src={toAbsoluteUrl(\n                            '/media/svg/icons/Navigation/Arrow-left.svg'\n                        )}\n                    ></SVG>\n                </div>\n                <div className='pallet-id'>{pallet?.id}</div>\n            </div>\n\n            <div className=\"pallet-content\">\n                {!!pallet?.pivot_boxes?.length && (\n                    <>\n                        <div className=\"list-box-wrapper\">\n                            {pallet.pivot_boxes.map(({ box, current_quantity }, boxIdx) => (\n                                <div\n                                    className={clsx(\"box d-flex align-items-center justify-content-between\", selectedBox?.id === box.id && \"selected\")}\n                                    key={`box-item-${boxIdx}`}\n                                    onClick={() => handleSelectBox(box)}\n                                >\n                                    <div className=\"box-id\">{box.id} <span className=\"quantity-on-pallet\">{current_quantity}</span></div>\n                                    <div className=\"show-on-hover svg-icon svg-icon-primary\">\n                                        <SVG\n                                            src={toAbsoluteUrl(\n                                                '/media/svg/icons/Navigation/Arrow-right.svg'\n                                            )}\n                                        ></SVG>\n                                    </div>\n                                </div>\n                            ))}\n                        </div>\n                        <div className=\"box-content position-relative\">\n                            {loading && <Loading local />}\n                            {selectedBox && (\n                                <div className=\"d-flex h-100\">\n                                    <div className=\"box-info\">\n                                        <div>\n                                            <div className=\"icon-section\">\n                                                <SVG\n                                                    src={toAbsoluteUrl(\n                                                        '/media/svg/icons/Shopping/Box4.svg'\n                                                    )}\n                                                ></SVG>\n                                                <div className=\"bar-code\">\n                                                    <Barcode value={selectedBox?.id || \"0\"} textPosition=\"top\" height={40} />\n                                                </div>\n                                            </div>\n                                            <div className=\"d-flex mt-3\">\n                                                <div className=\"box-width\">Chiều dài: {formatNumber(selectedBox.width)}</div>\n                                                <div className=\"box-height\">Chiều rộng:{formatNumber(selectedBox.height)}</div>\n                                                <div className=\"box-length\">Chiều cao: {formatNumber(selectedBox.length)}</div>\n                                                <div className=\"box-weight\">Khối lượng: {formatNumber(selectedBox.weight_per_box)}</div>\n                                                <div className=\"box-volume\">Thể tích: {formatNumber(selectedBox.volume_per_box)}</div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className=\"box-items-wrapper\">\n                                        <div className=\"box-items-title\">Sản phẩm trong thùng</div>\n\n                                        <div className=\"box-items-list\">\n                                            {selectedBox.childs.map((child, cIdx) => (\n                                                <div className=\"box-child\" key={`box-child-${cIdx}`}>\n                                                    <div className=\"box-child-id\">Thùng con: {child.id} (SL: {child.duplicate})</div>\n                                                    <div className=\"box-child-items\">\n                                                        {child.items.map((item, iIdx) => (\n                                                            <div className=\"box-item\" key={`box-child-item-${iIdx}`}>\n                                                                <div className=\"box-item__product-id\">{item.product_id}</div>\n                                                                <div className=\"box-item__quantity\">Số lượng: {item.quantity} <small>x</small> {child.duplicate}</div>\n                                                            </div>\n                                                        ))}\n                                                    </div>\n                                                </div>\n                                            ))}\n                                            {selectedBox.items.map((item, iIdx) => (\n                                                <div className=\"box-item\" key={`box-item-${iIdx}`}>\n                                                    <div className=\"box-item__product-id\">{item.product_id}</div>\n                                                    <div className=\"box-item__quantity\">Số lượng: {item.quantity}</div>\n                                                </div>\n                                            ))}\n                                        </div>\n                                    </div>\n                                </div>\n                            )}\n                        </div>\n                    </>\n                )}\n            </div>\n        </div>\n    )\n};\n\nexport default PalletDetail;","import React, { useEffect, useMemo, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport warehouseApi from 'apis/warehouse';\nimport _ from 'lodash';\nimport { useDetailPallet } from '../context';\nimport clsx from 'clsx';\n\nimport LocationGrid from '../LocationGrid';\nimport Loading from 'app/components/Loading';\nimport EmptyData from 'app/components/EmptyData';\nimport PalletDetail from '../PalletDetail';\n\nimport './index.scss';\n\nconst ShelveItem = ({ shelve, areaName }) => {\n\n    const [shelveItemData, setShelveItemData] = useState();\n    const [loading, setLoading] = useState(false);\n    const { showPallet } = useDetailPallet();\n\n    useEffect(() => {\n        if (shelve) {\n            setLoading(true);\n            warehouseApi.shelve.fetchShelve(shelve.id, { with: 'locations' })\n                .then(res => {\n                    setShelveItemData(res);\n                })\n                .finally(() => { setLoading(false) })\n        }\n    }, [shelve]);\n\n    const groupFloor = useMemo(() => {\n        return _.groupBy(shelveItemData?.locations || [], 'floor');\n    }, [shelveItemData]);\n\n    return (\n        <div className={clsx(\"shelve-item-card position-relative\", showPallet && 'pallet-content')}>\n            <PalletDetail />\n            <div className=\"shelve-head position-relative\">\n                <div className=\"shelve-name\"><span className=\"shelve-prefix\">Shelve</span><span className=\"shelve-id\">{shelve.id}</span></div>\n                <div className=\"extends-data\">\n                    <div className=\"shelve-position\">\n                        F{shelve.floor} . R{shelve.row} . C{shelve.column}\n                    </div>\n                    <div className=\"area-name\">{areaName}</div>\n                </div>\n            </div>\n            <div className=\"position-relative shelve-content\">\n                {loading && <Loading local />}\n                {Object.entries(groupFloor).map(([floor, floorLocations], lIdx) => (\n                    <div key={`grid-location-${lIdx}`} className=\"shelve-floor\">\n                        <div className=\"floor-name\">F.{floor}</div>\n                        <LocationGrid locations={floorLocations} />\n                    </div>\n                ))}\n                {!Object.keys(groupFloor).length && <EmptyData />}\n            </div>\n        </div>\n    );\n};\n\nShelveItem.propTypes = {\n    shelve: PropTypes.any,\n    areaName: PropTypes.string,\n};\n\nexport default ShelveItem;","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport Layout from '../../components/Layout';\nimport FilterSection from './FilterSection';\nimport ShelveItem from '../../components/Model/ShelveItem';\nimport Loading from 'app/components/Loading';\nimport { CardBody, Card } from '_metronic/_partials/controls';\nimport { DetailPalletProvider } from '../../components/Model/context';\n\nimport './index.scss';\n\nconst WarehouseModel = props => {\n\n    const shelveList = useSelector(state => state.warehouse.whModel.shelves);\n    const loading = useSelector(state => state.warehouse.whModel.loading);\n\n    return (\n        <Layout title=\"Mô hình nhà kho Tomoni\">\n            <div className=\"warehouse-model-page overflow-hidden\">\n                <FilterSection />\n\n                <Card className=\"area-list-section position-relative\">\n                    <CardBody className=\"p-4\">\n                        {loading && <Loading local />}\n                        {shelveList.map((shelve, sIdx) => (\n                            <div className=\"mt-3\" key={`shelve-${sIdx}`}>\n                                <DetailPalletProvider>\n                                    <ShelveItem shelve={shelve} areaName={shelve.areaName} />\n                                </DetailPalletProvider>\n                            </div>\n                        ))}\n                    </CardBody>\n                </Card>\n            </div>\n        </Layout>\n    );\n};\n\nWarehouseModel.propTypes = {\n\n};\n\nexport default WarehouseModel;","import DialogNotify from 'app/components/DialogNotify';\nimport { ROLES } from 'constant/Role';\nimport React, { Suspense, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Redirect, Switch, useLocation } from 'react-router-dom';\nimport { ContentRoute, LayoutSplashScreen } from '../../../../_metronic/layout';\nimport { fetchAgencies } from '../warehouse-redux/agencySlice';\nimport { fetchShipmentMethods } from '../warehouse-redux/shipmentMethodSlice';\nimport CheckSFAPage from './CheckSFA';\nimport ClassifyBoxPage from './ClassifyBox';\nimport WHDashboard from './Dashboard';\nimport DownContainer from './DownContainer';\nimport GoodsDelivery from './GoodsDelivery';\nimport InboundPlanPage from './InboundPlan';\nimport InvoicePage from './Invoice';\nimport LadingBillPage from './LadingBill';\nimport LoadUpContainerPage from './LoadUpContainer';\nimport OutBoundPicker from './OutBoundPicker';\nimport PackPage from './Pack';\nimport PerformEntryPage from './PerformEntry';\nimport SettingsPage from './Settings';\nimport StorageSFAPage from './StorageSFA';\nimport WarehouseModelPage from './WarehouseModel';\nimport ErrorPage from 'app/modules/Error/ErrorPage';\n\nexport default function WarehousePage() {\n    const dispatch = useDispatch();\n    const user = useSelector(state => state.auth.user);\n    const { pathname } = useLocation();\n    const { role } = user;\n\n    const warehouseRole = role?.includes(ROLES.WAREHOUSE);\n    const saleRole = role?.includes(ROLES.SALE);\n    const allRole = role?.includes(ROLES.ADMIN) || role?.includes(ROLES.ROOT);\n\n    const checkRedirect = warehouseRole || allRole;\n    const checkSaleRedirect =\n        saleRole && pathname.includes('/warehouse/classify-box');\n\n    useEffect(() => {\n        dispatch(fetchAgencies());\n        dispatch(fetchShipmentMethods());\n    }, []); // eslint-disable-line\n\n    if (!checkRedirect && !checkSaleRedirect)\n        return <Redirect to=\"/dashboard\" />;\n\n    return (\n        <div>\n            <DialogNotify\n                variant=\"default\"\n                size=\"large\"\n                position={{ vertical: 'top', horizontal: 'right' }}\n            />\n            <Suspense fallback={<LayoutSplashScreen />}>\n                <Switch>\n                    <Redirect\n                        exact={true}\n                        from=\"/warehouse\"\n                        to=\"/warehouse/dashboard\"\n                    />\n                    <ContentRoute\n                        path=\"/warehouse/dashboard\"\n                        component={WHDashboard}\n                        need={['sfas']}\n                    />\n                    <ContentRoute\n                        path=\"/warehouse/storage-sfas\"\n                        component={StorageSFAPage}\n                        need={[\n                            'boxes.update',\n                            'pallets.create',\n                            'pallets.update'\n                        ]}\n                        permissionJoin=\"and\"\n                    />\n\n                    <ContentRoute\n                        path=\"/warehouse/check-sfas\"\n                        component={CheckSFAPage}\n                        need={['boxes.update', 'boxes.create', 'box-items']}\n                        permissionJoin=\"and\"\n                    />\n\n                    <ContentRoute\n                        path=\"/warehouse/load-up-container\"\n                        component={LoadUpContainerPage}\n                        need={['in-container-pickers.index']}\n                        permissionJoin=\"and\"\n                    />\n\n                    <ContentRoute\n                        path=\"/warehouse/container\"\n                        component={InvoicePage}\n                        need={['containers.index']}\n                    />\n\n                    <ContentRoute\n                        path=\"/warehouse/model\"\n                        component={WarehouseModelPage}\n                        need={['sfas']}\n                    />\n\n                    <ContentRoute\n                        path=\"/warehouse/wh-plan\"\n                        component={InboundPlanPage}\n                        need={['sfas']}\n                    />\n\n                    <ContentRoute\n                        path=\"/warehouse/pack-box\"\n                        component={PackPage}\n                        need={['boxes.create', 'boxes.update']}\n                        permissionJoin=\"and\"\n                    />\n\n                    <ContentRoute\n                        path=\"/warehouse/classify-box\"\n                        component={ClassifyBoxPage}\n                        need={'owning-boxes.index'}\n                    />\n\n                    <ContentRoute\n                        path=\"/warehouse/inbound\"\n                        component={PerformEntryPage}\n                        need={['sfas']}\n                    />\n\n                    <ContentRoute\n                        path=\"/warehouse/lading-bills\"\n                        component={LadingBillPage}\n                        need={['lading-bills.index']}\n                    />\n\n                    <ContentRoute\n                        path=\"/warehouse/settings\"\n                        component={SettingsPage}\n                        need={['sfas']}\n                    />\n\n                    <ContentRoute\n                        path=\"/warehouse/down-container\"\n                        component={DownContainer}\n                        need={['out-container-pickers.index']}\n                    />\n\n                    <ContentRoute\n                        path=\"/warehouse/goods-delivery\"\n                        component={GoodsDelivery}\n                        need={[\n                            'delivery-partners.index',\n                            'goods-deliveries.index'\n                        ]}\n                    />\n\n                    <ContentRoute\n                        path=\"/warehouse/outbound-picker\"\n                        component={OutBoundPicker}\n                        need={['outbound-pickers.index']}\n                    />\n\n                    <ContentRoute component={ErrorPage} />\n                </Switch>\n            </Suspense>\n        </div>\n    );\n}\n"],"sourceRoot":""}